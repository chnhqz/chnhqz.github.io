<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>刀刀博客</title>
        <link>https://chnhqz.github.io</link>
        <description>欢迎来到刀刀的笔记空间(^_^)</description>
        <language>zh-CN</language>
        <pubDate>Mon, 06 May 2024 10:20:46 +0800</pubDate>
        <lastBuildDate>Mon, 06 May 2024 10:20:46 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2024/05/06/%E5%8A%9B%E6%89%A3/</guid>
            <title>力扣</title>
            <link>https://chnhqz.github.io/2024/05/06/%E5%8A%9B%E6%89%A3/</link>
            <pubDate>Mon, 06 May 2024 10:20:46 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;哈希&#34;&gt;1.哈希&lt;/h2&gt;
&lt;h4 id=&#34;两数之和&#34;&gt;1.两数之和&lt;/h4&gt;
&lt;p&gt;如果直接暴力很简单，但是时间复杂度为 &lt;span
class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;
。这里其实时间的复杂度主要来自于内层循环的复杂度，外层循环，的 &lt;span
class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt; 时间复杂度是不可避免的，对于 &lt;span
class=&#34;math inline&#34;&gt;\(nums[i]\)&lt;/span&gt; 来说，我们在数组中找到一个数等于
&lt;span class=&#34;math inline&#34;&gt;\(target - nums[i]\)&lt;/span&gt;
。只是循环的话，还是 &lt;span class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;
的时间复杂度，我们可以使用哈希的方法，直接用 &lt;span
class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的时间复杂度找到 &lt;span
class=&#34;math inline&#34;&gt;\(target - nums[i]\)&lt;/span&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;twoSum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 找一个键值为 target - nums[i] 的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; it  = mp.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(target - nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果找到了键值为 target - nums[i] 的索引，那么返回答案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (it != mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;it-&amp;gt;second, i&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp[nums[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;字母异位词分组&#34;&gt;49.字母异位词分组&lt;/h4&gt;
&lt;p&gt;我们可以选择将排序后的字符串作为键，无序的字符串作为键值
&lt;code&gt;unordered_map&amp;lt;string, vector&amp;lt;string&amp;gt;&amp;gt; mp;&lt;/code&gt;
这样遍历一边字符串，就可以筛选出所有的答案。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;groupAnagrams&lt;/span&gt;(vector&amp;lt;string&amp;gt;&amp;amp; strs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map&amp;lt;string, vector&amp;lt;string&amp;gt;&amp;gt; mp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (string&amp;amp; str : strs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            string key = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(key.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), key.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp[key].&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; it = mp.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res.&lt;span class=&#34;built_in&#34;&gt;emplace_back&lt;/span&gt;(it-&amp;gt;second);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;最长连续序列&#34;&gt;128.最长连续序列&lt;/h4&gt;
&lt;p&gt;首先我们考虑枚举数组中的每个数 &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;
。考虑不断尝试 &lt;span class=&#34;math inline&#34;&gt;\(x+1,x+2,x+3,...\)&lt;/span&gt;
是否存在。对于匹配的过程，直接的方法是 &lt;span
class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;
遍历数组去看是否存在这个数，但是我们可以使用更高效的方法，用一个哈希表存储数组中的数，这样查看一个数是否存在能优化至
&lt;span class=&#34;math inline&#34;&gt;\(O(1)\)&lt;/span&gt; 的时间复杂度。&lt;/p&gt;
&lt;p&gt;但是仅仅这样，我们的算法时间复杂度最坏情况还是会达到 &lt;span
class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt; （即外层需要枚举 &lt;span
class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 个数，内层也需要暴力匹配 &lt;span
class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; 次）。这样无法满足题目时间复杂度 &lt;span
class=&#34;math inline&#34;&gt;\(O(n)\)&lt;/span&gt;
的要求。但是我们仔细分析这个枚举的过程，我们会发现其实我们进行了很多不必要的枚举，如果已知有一个
&lt;span class=&#34;math inline&#34;&gt;\(x, x+1, x+2, ..., x+y\)&lt;/span&gt;
的连续序列，而我们在下一个数字 &lt;span class=&#34;math inline&#34;&gt;\(x+ 2\)&lt;/span&gt;
的时候仍然一个一个的枚举，这样得到的结果是一定不会优于以 &lt;span
class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;
为起点的的答案的。所以我们需要在外层判断 &lt;code&gt;x - 1&lt;/code&gt;
是否在数组中存在，如果存在，那么他就是已经判断过的，不需要在判断，直接跳过即可。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;longestConsecutive&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; num_set;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; num : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            num_set.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; longestStreak = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; num : num_set) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!num_set.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(num - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; currentNum = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; currentStreak = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (num_set.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(currentNum + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    currentNum += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    currentStreak += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                longestStreak = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(longestStreak, currentStreak);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; longestStreak;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;双指针&#34;&gt;2.双指针&lt;/h2&gt;
&lt;h4 id=&#34;移动零&#34;&gt;283.移动零&lt;/h4&gt;
&lt;p&gt;双指针，&lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; 当&lt;code&gt;left&lt;/code&gt;
为0时，&lt;code&gt;right&lt;/code&gt;找到&lt;code&gt;left&lt;/code&gt;后边第一个不为零的数字进行交换。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;moveZeroes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; left &amp;lt; right &amp;amp;&amp;amp; right &amp;lt; nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nums[left] == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (right &amp;lt; nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() &amp;amp;&amp;amp; nums[right] == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    right ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (right == nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                nums[left] = nums[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                nums[right] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;盛最多水的容器&#34;&gt;11.盛最多水的容器&lt;/h4&gt;
&lt;p&gt;这道题目，观察数据的规模，如果采用暴力的双层&lt;code&gt;for&lt;/code&gt;循环进行枚举，那么时间复杂度一定超标。这里我们观察，是解决两条线之间的面积最大的问题，那么自然而然想到可以使用双指针来解决，我们接下来注意如何解决指针的移动，首先在&lt;code&gt;height[0]&lt;/code&gt;
和 &lt;code&gt;height[8]&lt;/code&gt;之间指针如何移动呢？此时指针
&lt;code&gt;height[0] &amp;lt; height[8]&lt;/code&gt; 那就是说我们此时找到比
&lt;code&gt;height[0]&lt;/code&gt;大的值即可。可以照样理解，我们此时在数组中寻找只要比
&lt;code&gt;height[8]&lt;/code&gt;小的值，那么面积一定比此时面积小，所以我们选择移动两个数值之间较小的数字，这样才有可能出现比现在大的面积。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;maxArea&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (left &amp;lt; right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(res, &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(height[left], height[right]) * (right - left));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (height[left] &amp;gt; height[right]) right --;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; left ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三数之和&#34;&gt;15.三数之和&lt;/h4&gt;
&lt;p&gt;利用双指针进行时间复杂度的压缩，首先我们对数组进行排序，这样可以方便后续进行左右指针的移动。排序后，我们要对数组中一样的数字进行去重，&lt;code&gt;if (i - 1 &amp;gt;= 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1]) continue&lt;/code&gt;
这句代码就是进行去重的代码。之后我们定义左指针指向&lt;code&gt;nums[i]&lt;/code&gt;
的下一个数字，右指针指向最后一个数字。定义 &lt;code&gt;target&lt;/code&gt;
为目标数字，这样我们就可以用二分查找的方法进行时间复杂度的压缩，我们将三数之和问题转化为两个数字的和等于
&lt;code&gt;-nums[i]&lt;/code&gt; 。我们计算这个和&lt;code&gt;sum&lt;/code&gt;。如果这个和
&lt;code&gt;sum &amp;gt; 0&lt;/code&gt; &lt;code&gt;right--&lt;/code&gt; 否则 &lt;code&gt;left++&lt;/code&gt;
。但是这里有个问题，就是会有一样的数字造成答案数组重复。所以我们要进行一样的数字跳过的操作。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&#34;built_in&#34;&gt;threeSum&lt;/span&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector&amp;lt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(nums.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), nums.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i] == nums[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, right = nums.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; target = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (left &amp;lt; right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sum = target + nums[left] + nums[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) right--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sum &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    res.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&amp;#123;target, nums[left], nums[right]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (left ++; left &amp;lt; right &amp;amp;&amp;amp; nums[left] == nums[left - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]; left++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (right--; left &amp;lt; right &amp;amp;&amp;amp; nums[right] == nums[right + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]; right--);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;接雨水&#34;&gt;42.接雨水&lt;/h4&gt;
&lt;figure&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;截屏2024-05-06%2010.21.59.png&#34;
alt=&#34;截屏2024-05-06 10.21.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-06 10.21.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这里我们将每一块区域都视为一个底边长度为&lt;code&gt;1&lt;/code&gt;
的木桶，这是木桶的容水量为
&lt;code&gt;min(左边最高的木板，右边最高的木板)- height[i]&lt;/code&gt;
那么如何求对于一个位置的左边最高木板和右边最高木板呢？这里我们用到前后缀的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 0 1 1 2 2 2 2 3 3 3 3 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 3 3 3 3 3 3 3 3 2 2 2 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 0 0 1 0 1 2 1 0 0 1 0 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;pre_max&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(height.size(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;suf_max&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(height.size(), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pre_max[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = height[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        suf_max[height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = height[height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pre_max[i] = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(pre_max[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], height[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            suf_max[i] = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(suf_max[i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], height[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res += &lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(pre_max[i], suf_max[i]) - height[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;相向双指针的做法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;trap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = height.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, pre_max = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suf_max = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (left &amp;lt;= right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pre_max = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(pre_max, height[left]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            suf_max = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(suf_max, height[right]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pre_max &amp;lt; suf_max) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 左边木桶的容量就知道了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res += pre_max - height[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res += suf_max - height[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                right --;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;滑动窗口&#34;&gt;3.滑动窗口&lt;/h2&gt;
&lt;h4 id=&#34;无重复字符的最长字串&#34;&gt;3.无重复字符的最长字串&lt;/h4&gt;
&lt;p&gt;滑动窗口，利用集合维护一个没有重复字符的字符串，不断枚举右指针指向的字符，并在集合中判断它在所维护的字符串中是否出现过，如果出现过，就不断移动所维护的字符串的左边界，使得所维护的字符串中没有与此时右指针指向的字符串重复的字符。然后插入右指针指向的字符，更新答案。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(string s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;&amp;gt; st;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; right = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; right &amp;lt; s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); right++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 不断滑动右指针，直到当前右指针指向的字符没有重复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (st.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(s[right])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 当前右指针指向的字符在st中有重复的，所以不断滑动左指针，并擦去st中的左指针字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                st.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(s[left++]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 当滑动完成，此时右指针指向的字符在st中没有重复的，插入右指针的字符 更新答案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(s[right]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res = &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(res, right - left + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;找到字符串中所有字母异位词&#34;&gt;438.找到字符串中所有字母异位词&lt;/h4&gt;
&lt;p&gt;首先我想到的是暴力解法，利用每次在&lt;code&gt;s&lt;/code&gt;中截取一段长度等于&lt;code&gt;p&lt;/code&gt;的子字符串。然后比较两个字符串是否是异位字符串。这种方法比较直接，实现起来也没有难度。我用的是字典来比较字符串是否是异位字符串，但是时间复杂度很高。不出意料的超时了。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;findAnagrams&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(string s, string p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map &amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; p.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp_1[p[i]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector &amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map &amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = p.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; right &amp;lt; s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();left++, right++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp_2.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; flag = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = left; i &amp;lt;= right; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                mp_2[s[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; mp_1_ : mp_1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mp_2[mp_1_.first] != mp_1_.second) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    flag = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着想，这个解法中可以优化的点在哪里？首先分析时间复杂度，一个最外层的循环，内部是有两个循环，一个循环记录当前的子字符串的字典集合，另外一个循环进行比较两个字符串。最坏的情况就是
&lt;span class=&#34;math inline&#34;&gt;\(O(n^2)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;此时其实有一个可以优化的点，就是不需要每次重复循环计算&lt;code&gt;mp_2&lt;/code&gt;，我们只需要减去上次的左端点，在加上这次的右端点即可。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;findAnagrams&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(string s, string p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector &amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() &amp;lt; p.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map &amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unordered_map &amp;lt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; p.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp_1[p[i]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mp_2[s[i]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; left = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, right = p.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; right &amp;lt; s.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();left++, right++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; flag = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (left != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                mp_2[s[left - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]] --;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                mp_2[s[right]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; mp_1_ : mp_1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mp_2[mp_1_.first] != mp_1_.second) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    flag = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                res.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过这次优化，就通过了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2024/05/06/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
            <title>论文阅读</title>
            <link>https://chnhqz.github.io/2024/05/06/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
            <pubDate>Mon, 06 May 2024 10:19:12 +0800</pubDate>
            <description><![CDATA[ &lt;h3
id=&#34;selective-hourglass-mapping-for-universal-image-restoration-based-on-diffusion-model&#34;&gt;19.Selective
Hourglass Mapping for Universal Image Restoration Based on Diffusion
Model&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基于扩散模型的全局图像恢复的选择性沙漏映射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;
&#34;通用图像恢复是实际和潜在的计算机视觉任务，适用于现实世界的应用。该任务的主要挑战是同时处理不同的退化分布。现有方法主要利用任务特定条件（例如，提示）来引导模型分别学习不同的分布，称为多部分映射。然而，这对于通用模型学习并不适用，因为它忽略了不同任务之间的共享信息。在这项工作中，我们提出了一种基于扩散模型的先进选择性沙漏映射策略，称为DiffUIR。两个新颖的考虑使我们的DiffUIR非常规。首先，我们为模型配备了强大的条件指导，以获得扩散模型的准确生成方向（选择性）。更重要的是，DiffUIR将灵活的共享分布项（SDT）优雅而自然地整合到扩散算法中，逐渐将不同的分布映射到共享分布中。在反向过程中，结合SDT和强条件指导，DiffUIR迭代地将共享分布引导到具有高图像质量的任务特定分布（沙漏）。没有花哨的东西，仅通过修改映射策略，我们在五个图像恢复任务中取得了最先进的性能，在通用设置和零次通用化设置中有22个基准。令人惊讶的是，仅使用轻量级模型（仅0.89M），我们就能实现出色的性能。源代码和预训练模型可在
https://github.com/iSEE-Laboratory/DiffUIR 找到。&#34;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用图像恢复旨在通过单一模型处理不同的图像恢复任务，在现实世界的机器人导航
[3] 和自动驾驶 [4]
等领域具有广泛的应用。通过单一模型处理不同的图像恢复任务的主要挑战是同时学习各种分布。现有的通用图像恢复方法
[24, 31, 33, 40, 57]
主要利用多编码器架构或提示大规模模型，如图1所示。按照
[63]，通过这种方式，它们将在一个模型中学习不同的分布映射，通过在满足特定条件时引导模型分别学习不同的分布（即多部分映射）。尽管强大的条件指导能够保持一定的图像质量，但它们忽视了不同任务可能共享信息的事实，这些信息有潜力补充和增强单一任务的性能。例如，在去雨数据集中，雨天和雾天通常同时发生。试图独立学习这两种退化类型可能无法解决这种情况。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;截屏2024-05-06 10.48.50.png&#34; alt=&#34;截屏2024-05-06 10.48.50&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1.
对比我们的DiffUIR与现有的通用图像恢复方法的示意图，现有方法主要设计任务特定模块来处理不同的分布，这迫使通用模型（橙色模块）同时学习不同的分布，称为多部分映射。相比之下，所提出的DiffUIR将不同的分布映射到一个共享分布中（即注意，这不是纯高斯分布），同时保持强大的条件指导。通过这种方式，DiffUIR使通用模型仅学习一个共享分布，并将共享分布引导到一个任务特定的分布，称为选择性沙漏映射。放大以获得最佳视图。&lt;/p&gt;
&lt;p&gt;在这项工作中，我们旨在捕捉不同任务之间的共享信息，以实现更好的通用图像恢复学习。我们用基于条件扩散模型的新颖选择性沙漏映射策略替换了多部分映射策略，称为DiffUIR。两个新颖的设计使我们的DiffUIR非同寻常。首先，受RDDM
[28]的启发，我们将条件（即降级图像）明确融合到扩散模型的扩散算法中，并将条件与扩散目标广泛连接起来。通过这种方式，DiffUIR具备了类似于多部分映射方法的强大条件指导能力。其次，为了实现共享分布映射，我们优雅而自然地将一个名为SDT的共享分布项整合到扩散算法中，逐渐调整算法中条件的权重。通过建模这两个问题，在前向扩散过程中，DiffUIR逐渐减小条件的权重，各种分布将接近一个共享分布，使模型能够捕捉不同任务之间的共享信息。&lt;strong&gt;值得注意的是，我们将不同的分布映射到一个不纯的高斯分布中，留下了轻微的条件，正如[10,
27,
28]中所述，纯高斯噪声不包含任何任务信息，这不利于良好的生成质量。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这句话的意思是在反向去噪的过程中不直接使用纯高斯噪声？而是选择由分布映射到一个不纯的高斯分布中，留下轻微的条件，在这个不纯的高斯分布的基础上进行去噪？我这样理解有问题吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在反向过程中，在强条件和SDT的引导下，DiffUIR将逐渐从共享分布中恢复到任务特定分布。通过仅修改映射策略，没有花里胡哨的，我们在五个图像恢复基准测试中大幅超越了所有现有的通用方法。值得注意的是，我们只使用了参数为36.26M的模型，比现有的基于大规模模型的通用方法少至少5倍，但性能更高。此外，为了满足实际应用的需求，我们提出了几个我们的DiffUIR的轻量级版本，其中微型版本DiffUIR-T仅包含0.89M个参数，但表现出色。为了进一步验证我们通用模型的能力，我们进行了已知任务和未知任务设置下的零次通用化实验，与其他通用方法相比，也实现了最先进的性能。总之，我们的主要贡献如下：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;提出了一种新颖的选择性沙漏映射方法DiffUIR，它可以自由地将各种分布转换为一个共享分布，并使模型学习不同任务之间的共享信息。此外，配备强条件的DiffUIR将共享分布引导到具有高图像质量的任务特定分布中。&lt;/li&gt;
&lt;li&gt;我们通过实证验证，我们的分布映射策略是通用图像恢复任务的更好解决方案。仅通过改变映射策略，我们甚至超越了基于大规模模型的通用图像恢复方法，而参数量仅为1/5。&lt;/li&gt;
&lt;li&gt;我们的DiffUIR符合实际场景的需求。我们在零次通用化设置中超越了其他通用方法。我们的微型版本DiffUIR-T仅包含0.89M个参数，但性能出色。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2.Related Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1. Image Restoration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图像恢复旨在从其降级对应物中恢复出干净的图像，这是一个基础且重要的计算机视觉领域，涵盖了各种任务，如去雨、去雪、低光增强、去模糊和去雾等。现有的作品主要集中在通过独特的模型设计解决一个特定任务。虽然这些方法取得了很大的性能成功，但它们忽视了一个现实中的事实，即在实际应用中，人们更喜欢一个能够处理所有降级类型的模型。最近一些先驱研究了通用图像恢复模型并取得了一些进展。AirNet使用一个模块将不同的分布映射到由对比学习约束的一个共享分布中，这对训练来说是困难的，并且性能受到限制。IDR观察到不同的降级类型可以通过奇异值分解进行划分，并且可以通过重新制定奇异值和向量来重新计算干净的图像。Painter、ProRes和DA-CLIP旨在通过提示学习来整合大规模模型的全部潜力。尽管它们利用了大规模模型的先验知识，但由于使用了多部分映射策略，它们的性能仅有限，并且需要大量的参数。在这项工作中，我们提出了一种基于条件扩散模型的选择性沙漏映射策略，一次装备了模型具有共享分布映射和强条件引导的能力。由于这些能力，我们实现了出色的结果，而无需依赖复杂的训练流水线或大规模模型或预训练。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.Diffusion Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为密集估计任务的一部分，许多研究人员将扩散模型应用于图像恢复。RainDiffusion
[62]将循环框架融入条件扩散模型中，在无监督设置中表现良好；DDNM
[58]构建了一个优雅的身份方程，自然地将条件添加到扩散模型的反向过程中，对线性图像恢复任务效果显著；RDDM
[28]将扩散方向从目标域改变为输入域，自然地将条件（即降级图像）集成到正向过程中，并在几个图像恢复基准测试中取得了令人印象深刻的性能。以上方法提出了一些关于条件约束的有趣修改，实现了强大的条件指导。然而，它们都不适合通用图像恢复学习。标准条件扩散模型的扩散终点是标准高斯噪声，没有任何特定任务的上下文信息，正如[10,
27,
28]中所述，它因为条件是以中介方式添加（即串联）而导致恢复质量不佳；RDDM
[28]将条件明确融合到扩散算法中，实现了高质量的图像。然而，多元映射问题出现了，因为不同任务的端点是可区分的，并且属于不同的分布。在这项工作中，我们解决了现有条件扩散模型的缺点，并同时实现了共享分布映射和强大的条件建模。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.DiffUIR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本节中，我们首先受RDDM启发，探索了扩散模型的适当条件机制，然后介绍了我们的选择性沙漏映射策略，该策略具备了共享分布映射和强大的条件引导能力，以实现更好的通用学习效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1.Revist the condition mechanism of RDDM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDDM [28]遵循标准的T步扩散模型[14,
48]，其中包含前向过程和反向过程。在前向过程中，单步噪声可以被写成马尔可夫链：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-13 10.18.10.png&#34; alt=&#34;截屏2024-05-13 10.18.10&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 是在时间步 &lt;span
class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; 的扩散结果，&lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt; 是退化图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; 和 清晰图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 的残差 ：&lt;span
class=&#34;math inline&#34;&gt;\(I_{res} = I_{in} - I_0\)&lt;/span&gt; 。&lt;span
class=&#34;math inline&#34;&gt;\(\alpha_t,\beta_t\)&lt;/span&gt; 分别是 &lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt;
噪声系数和高斯噪声系数。他们将噪声目标从&lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt;（即之前图像恢复扩散方法[38,
62]中使用的）更改为了&lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt;，遵循了残差学习的原则[13]。通过马尔可夫链的性质和重新参数化技术[19,
20]，单步噪声分布可以扩展为任意步骤的噪声形式，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513102646412.png&#34; alt=&#34;image-20240513102646412&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中， &lt;span
class=&#34;math inline&#34;&gt;\(\bar{\alpha}_t=\sum^t_{i=1}\alpha_i,\bar{\beta}_t=\sqrt{\sum^t_{i=1}\beta^2_i}\)&lt;/span&gt;
当 &lt;span class=&#34;math inline&#34;&gt;\(t\to T, \bar{\alpha}_T=1\)&lt;/span&gt;
此时，公式可以被写为 &lt;span
class=&#34;math inline&#34;&gt;\(I_T=I_{in}+\bar{\beta}_T\epsilon\)&lt;/span&gt; 。
这表明端点仅与退化图像和添加的噪声相关，自然地将条件添加到模型训练中。在反向过程中，RDDM使用
&lt;span
class=&#34;math inline&#34;&gt;\(q(I_{t-1}|I_t,I^{\theta}_0,I^{\theta}_{res})\)&lt;/span&gt;
来模拟真实分布 &lt;span
class=&#34;math inline&#34;&gt;\(p_{\theta}(I_{t-1}|I_t)\)&lt;/span&gt;
，并且它可以被写为马尔可夫链：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513103504239.png&#34; alt=&#34;image-20240513103504239&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在这里，θ 代表基于模型输出获得的项，0 代表根据 [48]
中的确定性隐式采样方程使用的结果。&lt;/p&gt;
&lt;p&gt;作为 RDDM
的终点包含了条件信息（即，降级图像），它是扩散模型的一个很好的条件机制，我们称之为显式条件；此外，他们广泛地将条件与扩散目标进行连接，从而获得更好的图像质量，称为隐式条件。然而，RDDM
中的强条件机制并不适合用于通用训练，因为条件始终存在，这意味着他们强迫模型分别学习不同的降级分布，导致多部分映射，无法捕获不同任务之间的共享信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2. Selective Hourglass Mapping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们方法的目标是同时实现强条件引导和共享分布映射。我们采用了RDDM的条件机制，并将共享分布项（SDT）整合到扩散算法中，实现了两个组件之间的协同效应。我们展示我们的变体扩散过程如下。分布逼近前向过程。在前向过程中，由于我们采用了RDDM的条件机制，一步扩散过程如下：
&lt;span
class=&#34;math inline&#34;&gt;\(I_t=I_{t-1}+\alpha_tI_{res}+\beta_t\epsilon_{t-1}\)&lt;/span&gt;
。为了进一步实现共享分布映射，我们修改前向过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513104339479.png&#34; alt=&#34;image-20240513104339479&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&#34;math inline&#34;&gt;\(\delta_tI_{in}\)&lt;/span&gt; 是
SDT，&lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt; 是共享分布项系数，&lt;span
class=&#34;math inline&#34;&gt;\(\bar\delta_t = \sum^t_{i=1}\delta_i\)&lt;/span&gt;
。我们设置 &lt;span class=&#34;math inline&#34;&gt;\(\bar\delta_t\)&lt;/span&gt; 从 0 逐渐到
0.9 。这将逐渐减少条件的影响。当 &lt;span class=&#34;math inline&#34;&gt;\(t\to
T\)&lt;/span&gt; 时，&lt;span class=&#34;math inline&#34;&gt;\(\bar\alpha_T = 1\)&lt;/span&gt;
,公式可以重写为 &lt;span class=&#34;math inline&#34;&gt;\(I_T = (1-\bar\delta_T)I_{in}
+ \bar \beta_T\epsilon = 0.1I_{in}+\bar\beta_T\epsilon\)&lt;/span&gt;
，这接近一个不纯的高斯分布（我们在实验中进一步验证）。请注意，我们采用渐进逼近策略来自然地适应扩散模型的扩散过程。&lt;/p&gt;
&lt;h3
id=&#34;structure-matters-tackling-the-semantic-discrepancy-in-diffusion-models-for-image-inpainting&#34;&gt;20.Structure
Matters: Tackling the Semantic Discrepancy in Diffusion Models for Image
Inpainting&lt;/h3&gt;
&lt;h3
id=&#34;condition-aware-neural-network-for-controlled-image-generation&#34;&gt;21.Condition-Aware
Neural Network for Controlled Image Generation&lt;/h3&gt;
&lt;h3
id=&#34;accelerating-diffusion-sampling-with-optimized-time-steps&#34;&gt;22.Accelerating
Diffusion Sampling with Optimized Time Steps&lt;/h3&gt;
&lt;h3
id=&#34;balancing-act-distribution-guided-debiasing-in-diffusion-models&#34;&gt;23.Balancing
Act: Distribution-Guided Debiasing in Diffusion Models&lt;/h3&gt;
&lt;h3
id=&#34;diffir-efficient-diffusion-model-for-image-restoration&#34;&gt;24.DiffIR:
Efficient Diffusion Model for Image Restoration&lt;/h3&gt;
&lt;h3 id=&#34;residual-denoising-diffusion-models&#34;&gt;25.Residual Denoising
Diffusion Models&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;
我们提出了残差去噪扩散模型（RDDM），这是一种新颖的双重扩散过程，将传统的单一去噪扩散过程解耦为残差扩散和噪声扩散。这种双重扩散框架将最初仅用于图像恢复的基于去噪的扩散模型扩展为一个统一且可解释的模型，通过引入残差实现图像生成和恢复的统一。具体来说，我们的残差扩散表示从目标图像到退化输入图像的定向扩散，并明确引导图像恢复的反向生成过程，而噪声扩散表示扩散过程中的随机扰动。残差优先考虑确定性，而噪声强调多样性，使RDDM能够有效地统一具有不同确定性或多样性要求的任务，例如图像生成和恢复。我们通过系数转换证明了我们的采样过程与DDPM和DDIM的一致性，并提出了一个部分路径独立的生成过程，以更好地理解反向过程。值得注意的是，我们的RDDM使得仅通过L1损失和批量大小为1进行训练的通用UNet能够与最先进的图像恢复方法竞争。我们提供了代码和预训练模型，以鼓励对我们创新框架的进一步探索、应用和开发（https://github.com/nachifur/RDDM）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在现实生活中，扩散通常以涉及多个并发过程的复杂形式发生，例如多种气体的扩散或不同类型的波或场的传播。这让我们思考，基于去噪的扩散模型
[17, 51] 是否在仅关注去噪方面存在局限性。当前基于扩散的图像恢复方法 [22,
39, 48, 49, 82]
通过使用降级图像作为条件输入来将扩散模型扩展到图像恢复任务中，以隐式地指导反向生成过程，而不修改原始的去噪扩散过程
[17,
51]。然而，从噪声开始的反向过程似乎是不必要的，因为降级图像已经是已知的。正向过程对于图像恢复来说是不可解释的，因为扩散过程不包含任何关于降级图像的信息，如图1(a)所示。&lt;/p&gt;
&lt;p&gt;在本文中，我们探索了一种新颖的双重扩散过程，并提出了残差去噪扩散模型（RDDM），可以解决单一去噪过程对图像恢复的不可解释性。在RDDM中，我们将先前的扩散过程解耦为残差扩散和噪声扩散。残差扩散优先考虑确定性，并表示从目标图像到条件输入图像的定向扩散，噪声扩散强调多样性，并表示扩散过程中的随机扰动。因此，我们的RDDM可以统一需要不同确定性或多样性的不同任务，例如图像生成和恢复。与基于去噪的扩散模型相比，RDDM中的残差清晰地指示了正向扩散方向，并明确地指导了图像恢复的反向生成过程，如图1(b)所示。&lt;/p&gt;
&lt;figure&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;截屏2024-05-06%2016.02.59.png&#34;
alt=&#34;截屏2024-05-06 16.02.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-06 16.02.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;具体来说，我们重新定义了一种新的正向过程，允许残差和噪声同时扩散，在其中目标图像逐渐扩散成纯噪声图像用于图像生成，或者扩散成带有噪声的输入图像用于图像恢复。与之前的去噪扩散模型[17,
51]不同，其使用一个系数表来控制噪声和图像的混合比例，我们的RDDM使用两个独立的系数表来控制残差和噪声的扩散速度。我们发现，这种独立的扩散属性在反向生成过程中也是明显的，例如，在测试过程中在一定范围内调整系数表不会影响图像生成结果，并且首先移除残差，然后去噪（见图2），也可以生成语义一致的图像。我们的RDDM与广泛使用的去噪扩散模型兼容，即，通过转换系数表，我们的采样过程与DDPM[17]和DDIM[51]的采样过程一致。此外，我们的RDDM本身支持条件输入，使得仅使用ℓ1损失和批量大小为1进行训练的网络能够与最先进的图像恢复方法竞争。我们预见我们的模型可以促进统一且可解释的图像分布转换方法，突显了残差和噪声对于扩散模型同样重要的事实，例如，残差优先考虑确定性，而噪声强调多样性。本文的贡献总结如下：
-
我们提出了一种新颖的双重扩散框架，通过引入残差来解决单一去噪过程对于图像恢复的不可解释性。我们的残差扩散表示了从目标图像到条件输入图像的定向扩散。
-
我们引入了一个部分路径独立的生成过程，将残差和噪声解耦，突出了它们在控制方向性残差偏移（确定性）和随机扰动（多样性）中的作用。
-
我们设计了一个自动目标选择算法，用于选择对于未知新任务是否预测残差或噪声。
-
大量实验表明，我们的方法可以适用于不同的任务，例如图像生成、恢复、修补和翻译，聚焦于确定性或多样性，并涉及成对或非成对数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Related Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;去噪扩散模型（例如，DDPM [17]、SGM [52, 53] 和 DDIM
[51]）最初是为图像生成而开发的。基于DDPM和DDIM的后续图像恢复方法 [14,
39, 48] 将降级图像作为条件输入提供给一个去噪网络，例如DvSR [62]、SR3
[49] 和 WeatherDiffusion
[82]，这些方法通常需要较大的采样步长和批量大小。此外，在这些方法中，从噪声开始的反向过程似乎对于图像恢复任务是不必要且低效的。因此，SDEdit
[41]、ColdDiffusion [2]、InDI [11] 和 I2SB [29]
提出直接从降级图像或带有噪声的降级图像生成清晰图像。InDI [11] 和 I2SB
[29]
还提出了统一的图像生成和恢复框架，与我们提出的RDDM最相关。具体来说，InDI、I2SB
和我们的RDDM的正向扩散一致地采用了三个术语的混合（即，输入图像Iin、目标图像I0
和噪声 ϵ），超出了基于去噪的扩散模型 [17,
51]，该模型包括了两个术语的混合（即，I0 和 ϵ）。然而，InDI 和 I2SB
选择估计目标图像或其线性变换项来替换噪声估计，类似于我们RDDM的一个特例（SM-Res）。相比之下，我们引入了残差估计，同时为生成和恢复任务采用了噪声。我们的RDDM可以进一步扩展DDPM
[17]、DDIM [51]、InDI [11] 和 I2SB [29]
到独立的双重扩散过程，并为多维扩散过程铺平道路。我们强调残差和噪声同样重要，例如，残差优先考虑确定性，而噪声强调多样性。此外，我们的工作与系数表设计
[44, 48]、方差策略优化 [3, 4, 24, 44]、叠加图像分解 [12, 81]、曲线积分
[47]、随机微分方程 [53] 和图像恢复 [1, 32, 56, 70, 72, 75] 中的残差学习
[15] 相关。详细比较请参见附录 A.5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.Residual Denoising Diffusion Models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的目标是发展一种双重扩散过程去统一和融合图像生成和恢复。我们修改了传统DDPM中&lt;span
class=&#34;math inline&#34;&gt;\(I_T =
ϵ\)&lt;/span&gt;的表示形式，将其改为在我们的RDDM中&lt;span
class=&#34;math inline&#34;&gt;\(I_T = I_{in} + ϵ\)&lt;/span&gt;，其中&lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt;是一个降级图像（例如，阴影、低光或模糊图像）用于图像恢复，对于图像生成则设置为0。这种修改与广泛使用的去噪扩散模型兼容。例如，
&lt;span class=&#34;math inline&#34;&gt;\(I_T = 0 + ϵ\)&lt;/span&gt;
是完全的噪声，对应生成，对于图像恢复， &lt;span
class=&#34;math inline&#34;&gt;\(I_T\)&lt;/span&gt; 是一个带有噪声的降级图像（&lt;span
class=&#34;math inline&#34;&gt;\(I_{in} + ϵ\)&lt;/span&gt;），如图3所示。&lt;/p&gt;
&lt;figure&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;截屏2024-05-06%2020.18.45.png&#34;
alt=&#34;截屏2024-05-06 20.18.45&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-06 20.18.45&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;图3:提出的残差去噪扩散模型是一个统一图像生成和修复的框架，我们在RDDM中引入残差（&lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt;），重新定义正向扩散过程，使其涉及残差和噪声的同时扩散。残差
&lt;span class=&#34;math inline&#34;&gt;\(I_{res} = I_{in} - I_0\)&lt;/span&gt;
扩散表示从目标图像 &lt;span class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt;
到输入的退化图像 &lt;span class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt;
的直接扩散。而噪声扩散表示扩散过成中的随机扰动。在RDDM中 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 逐渐扩散到 &lt;span
class=&#34;math inline&#34;&gt;\(I_T = I_{in} + ϵ  ϵ ∼ N (0, I)\)&lt;/span&gt;
。在第三列，对于图像生成 &lt;span class=&#34;math inline&#34;&gt;\(I_{in} = 0\)&lt;/span&gt;
此时 &lt;span class=&#34;math inline&#34;&gt;\(I_T\)&lt;/span&gt;
是一个完全的噪声，并且对于图像恢复来说，&lt;span
class=&#34;math inline&#34;&gt;\(I_T\)&lt;/span&gt; 是一个携带退化图像的噪声， &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; 是退化图像。&lt;/p&gt;
&lt;p&gt;修正后的正向过程从 &lt;span class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 到 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in} + \epsilon\)&lt;/span&gt; ,涉及将 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 逐渐降级为 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; ，并注入噪声 &lt;span
class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt;
。这自然产生了一个双重扩散过程，一个是残差扩散来建模从 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 到 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt;
的过渡，另一个是噪声扩散。例如，从无阴影图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 到带阴影图像的带噪声图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_T\)&lt;/span&gt;
的正向扩散过程涉及逐渐添加阴影和噪声。&lt;/p&gt;
&lt;p&gt;在接下来的小节中，我们详细介绍了RDDM背后的基本理论和方法论。受到残差学习的启发，我们重新定义了第4.1节中每个正向扩散过程的步骤。对于反向过程，我们在第4.2节中提出了一个训练目标，用于预测正向过程中注入的残差和噪声。在第4.3节中，我们提出了三种采样方法，即残差预测（SM-Res）、噪声预测（SM-N）和“残差和噪声预测”（SM-Res-N）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1 Directional Residual Diffusion Process with
Perturbation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了建模图像质量的逐渐降低和噪声的增加，我们定义了RDDM中单个正向过程步骤如下：
&lt;span class=&#34;math display&#34;&gt;\[
I_t = I_{t-1} + I^t_{res} \quad \quad I^t_{res} \sim
\mathcal{N(\alpha_tI_{res},\beta^2_{t}I)}
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(I^t_{res}\)&lt;/span&gt; 代表从状态
&lt;span class=&#34;math inline&#34;&gt;\(I_{t-1}\)&lt;/span&gt; 到状态 &lt;span
class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt;
的方向均值偏移（残差扩散）与随机扰动（噪声扩散），其中 &lt;span
class=&#34;math inline&#34;&gt;\(I^t_{res}\)&lt;/span&gt; 中的残差 &lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt; 是&lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 之间的差异（&lt;span
class=&#34;math inline&#34;&gt;\(I_{res} = I_{in} - I_{0}\)&lt;/span&gt;）
，而两个独立的系数调度 &lt;span class=&#34;math inline&#34;&gt;\(\alpha_t\)&lt;/span&gt; 和
&lt;span class=&#34;math inline&#34;&gt;\(\beta_t\)&lt;/span&gt;
分别控制残差和噪声扩散。事实上，从 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 中采样 &lt;span
class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 更简单。 &lt;span
class=&#34;math display&#34;&gt;\[
I_t = I_{t-1} + \alpha_tI_{res} + \beta_t\epsilon_{t-1} ,\\=I_{t-2} +
(\alpha_{t-1} + \alpha_t)I_{res} +
(\sqrt{\beta^2_{t-1}+\beta^2_t})\epsilon_{t-2} \\ =\cdots\\=I_0 +
\bar{\alpha_t}I_{res} + \bar{\beta_t}\epsilon, \tag{7}
\]&lt;/span&gt; 其中，&lt;span class=&#34;math inline&#34;&gt;\(\epsilon_{t-1},\dots
,\epsilon \sim \mathcal{N(0,I)}\)&lt;/span&gt; ， ${}&lt;em&gt;t=^t&lt;/em&gt;{i=1}_i ,
{}_t = $ 如果 &lt;span class=&#34;math inline&#34;&gt;\(t= T, \bar{\alpha}_T = 1
I_T=I_{in}+\bar{\beta}_T\epsilon\)&lt;/span&gt; 。&lt;span
class=&#34;math inline&#34;&gt;\(\bar{\beta}_T\)&lt;/span&gt;
可以控制图像恢复中噪声扰动的强度（例如，&lt;span
class=&#34;math inline&#34;&gt;\(\bar{\beta}^2_T=0.01\)&lt;/span&gt; 用于阴影消除）然而
&lt;span class=&#34;math inline&#34;&gt;\(\bar{\beta}^2_T=1\)&lt;/span&gt;
用于图像生成，从方程6中，可以定义正向过程中的联合概率分布如下： &lt;span
class=&#34;math display&#34;&gt;\[
q(I_{1:T}|I_0,I_{res}):=\Pi^T_{t=1}q(I_t|I_{t-1},I_{res}), \tag{8} \\
q(I_t|I_{t-1},I_{res}):=\mathcal{N}(I_t;I_{t-1}+\alpha_tI_{res},\beta^2_tI).
\]&lt;/span&gt; 方程7定义了边缘概率分布 &lt;span
class=&#34;math inline&#34;&gt;\(q(I_t|I_0,I_{res})=\mathcal{N}(I_t;I_0+\bar{\alpha}_tI_{res},\bar{\beta}^2_tI)\)&lt;/span&gt;
事实上，我们的RDDM的正向扩散是三个项（即&lt;span
class=&#34;math inline&#34;&gt;\(I_0,I_{res},\epsilon\)&lt;/span&gt; ）
的混合，扩展了广泛使用的去噪扩散模型，后者是两个项（即 &lt;span
class=&#34;math inline&#34;&gt;\(I_0,\epsilon\)&lt;/span&gt; ）
的混合，类似的混合形式在几个并行的工作中也可以看到，例如 InDI, I2SB,
IRSDE, REsShift。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2. Generation Process and Training Objective&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在正向过程中，残差 &lt;span class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt;
和噪声 &lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; 逐渐添加到 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 中，然后合成为 &lt;span
class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 而从 &lt;span
class=&#34;math inline&#34;&gt;\(I_T\)&lt;/span&gt; 到 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt;
的逆过程及对在正向过程中注入的残差和噪声的估计。我们可以训练一个残差网络
&lt;span class=&#34;math inline&#34;&gt;\(I^{\theta}_{res}(I_t,t,I_{in})\)&lt;/span&gt;
来预测 &lt;span class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt; ，以及一个噪声网络
&lt;span class=&#34;math inline&#34;&gt;\(\epsilon_{\theta}(I_t,t,I_{in})\)&lt;/span&gt;
来估计 &lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; 。使用公式 7
我们获得了估计的目标图像 &lt;span class=&#34;math inline&#34;&gt;\(I^{\theta}_{0} =
I_t - \bar{\alpha}_tI^{\theta}_{res} -
\bar{\beta}_t\epsilon_{\theta}\)&lt;/span&gt; 。如果给定了 &lt;span
class=&#34;math inline&#34;&gt;\(I^{\theta}_{0}\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(I^{\theta}_{res}\)&lt;/span&gt; ，则生成过程定义为：
&lt;span class=&#34;math display&#34;&gt;\[
p_{\theta} (I_{t-1}|I_t) := q_{\sigma} (I_{t-1}|I_t,
I^{\theta}_0,I^{\theta}_{res}) \tag{10}
\]&lt;/span&gt; 其中，从&lt;span class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt;到&lt;span
class=&#34;math inline&#34;&gt;\(I_{t-1}\)&lt;/span&gt;的传递概率. &lt;span
class=&#34;math inline&#34;&gt;\(q_{\sigma}(I_{t-1}|I_t, I_0, I_{res})^2\)&lt;/span&gt;
为：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-11 11.33.28.png&#34; alt=&#34;截屏2024-05-11 11.33.28&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&#34;math inline&#34;&gt;\(\sigma ^2_t =
\eta\beta^2_t\bar{\beta}^2_{t-1} / \bar{\beta}^2_t\)&lt;/span&gt; , &lt;span
class=&#34;math inline&#34;&gt;\(\eta\)&lt;/span&gt; 控制生成过程是随机的 &lt;span
class=&#34;math inline&#34;&gt;\((\eta = 1)\)&lt;/span&gt; 还是确定性的 &lt;span
class=&#34;math inline&#34;&gt;\(\eta=0\)&lt;/span&gt; 利用公式 10 和 公式 11
，可以通过以下方式从 &lt;span class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 中采样
&lt;span class=&#34;math inline&#34;&gt;\(I_{t-1}\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/论文阅读/截屏2024-05-11 11.45.49.png&#34; alt=&#34;截屏2024-05-11 11.45.49&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中， &lt;span class=&#34;math inline&#34;&gt;\(\epsilon_t \sim
\mathcal{N}(0,I)\)&lt;/span&gt; 。当 &lt;span class=&#34;math inline&#34;&gt;\(\eta =
1\)&lt;/span&gt; ，我们的 RDDM 具有受限制的总方差，而DDPM具有保持方差，当
&lt;span class=&#34;math inline&#34;&gt;\(\eta = 0\)&lt;/span&gt; 采样过程是确定性的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/论文阅读/截屏2024-05-11 11.56.46.png&#34; alt=&#34;截屏2024-05-11 11.56.46&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们推导出以下简化的损失函数用于训练（附录 A.1）：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-11 11.57.45.png&#34; alt=&#34;截屏2024-05-11 11.57.45&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中，超参数 &lt;span
class=&#34;math inline&#34;&gt;\(\lambda_{res},lambda_{\epsilon}\in
\{0,1\}\)&lt;/span&gt; ，以及训练输入图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 是通过 &lt;span
class=&#34;math inline&#34;&gt;\(I_0, I_{res}, \epsilon\)&lt;/span&gt;
综合得到的。也可以使用 &lt;span class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt;
综合生成 &lt;span class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; &lt;span
class=&#34;math display&#34;&gt;\[
I_t = I_{in} + (\bar{\alpha}_t  - 1 )I_{res} + \bar{\beta}_t\epsilon
\]&lt;/span&gt; &lt;strong&gt;5.Decoupled Dual Diffusion
Framework（解耦双重扩散框架）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对RDDM和DDPM进行对比分析后，我们发现DDPM确实涉及到了残差和噪音的同时扩散，这在附录A.3中的方程48等价于方程44时显而易见。我们发现可以将这两种扩散方式解耦。第5.1节介绍了解耦的前向扩散过程。在第5.2节中，我们提出了一种部分路径独立的生成过程，并将同时采样解耦为先移除残差，然后移除噪音（参见图6(d)和图17）。这种解耦的双重扩散框架揭示了DDPM生成过程中残差去除和去噪的作用。&lt;/p&gt;
&lt;p&gt;该模型提出了一种残差去噪模型
（RDDM）可用于图像生成和图像修复。该文最大的特点是提出一种双扩散模型，在扩散过程中不仅包含噪声
&lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; 扩散，还包含残差信息 &lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt;
的扩散，这里的残差信息就是退化图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 之间的差值 （&lt;span
class=&#34;math inline&#34;&gt;\(I_{res} = I_{in} - I_0\)&lt;/span&gt;）
。&lt;strong&gt;接下来我只讨论在引入条件的过程中的图像修复内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在传统的扩散模型中，我们的正向扩散过程是： &lt;span
class=&#34;math display&#34;&gt;\[
I_t = \sqrt{\bar{\alpha}_t} I_0+\sqrt{1-\bar{\alpha}_t} \epsilon \tag{1}
\]&lt;/span&gt; 本文中的正向扩散过程： &lt;span class=&#34;math display&#34;&gt;\[
I_t = I_0 + \bar{\alpha}_tI_{res} + \bar{\beta}_t\epsilon   \tag{2}
\]&lt;/span&gt; 其中，&lt;span class=&#34;math inline&#34;&gt;\(1-\bar{\alpha}_t =
\bar{\beta}_t\)&lt;/span&gt;
。这样我们可以看到两个正向扩散的过程十分相近。那么作者这点在代码中的体现如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 随机符合正态分布的噪声&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;noise = default(noise, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt;: torch.randn_like(x_start))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 残差 为 退化图像和清晰图像的差&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_res = x_input - x_start&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_t = self.q_sample(x_start, x_res, t, noise=noise)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;q_sample()&lt;/code&gt;
是封装好的正向扩散过程，这也是与原始&lt;code&gt;DDPM&lt;/code&gt;
不同的点。我们可以列出两者代码对比一下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;q_sample&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x_start, continuous_sqrt_alpha_cumprod, noise=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		noise = default(noise, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt;: torch.randn_like(x_start))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# random gama&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        continuous_sqrt_alpha_cumprod * x_start +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; - continuous_sqrt_alpha_cumprod**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).sqrt() * noise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;q_sample&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x_start, x_res, t, noise=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    noise = default(noise, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt;: torch.randn_like(x_start))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x_start+extract(self.alphas_cumsum, t, x_start.shape) * x_res +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        extract(self.betas_cumsum, t, x_start.shape) * noise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以明显看出两者之间的区别，当然不仅仅是空格缩进的区别（哈哈）&lt;/p&gt;
&lt;p&gt;其次，&lt;code&gt;RDDM&lt;/code&gt; 在扩散过程中需要同时训练两个模型 &lt;span
class=&#34;math inline&#34;&gt;\(I^{\theta}_{res}(I_t,t,I_{in})\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(\epsilon_{\theta}(I_t,t,I_{in})\)&lt;/span&gt;
来分别预测每一步中应该存在的残差 &lt;span
class=&#34;math inline&#34;&gt;\(I^{\theta}_{res}\)&lt;/span&gt; 和每一步中添加的噪声
&lt;span class=&#34;math inline&#34;&gt;\(\epsilon_{\theta}\)&lt;/span&gt;
。其中，模型训练的目标函数分别为： &lt;span class=&#34;math display&#34;&gt;\[
L_{res}(\theta):=\mathbb{E}[\lambda_{res}\|I_{res} -
I^{\theta}_{res}(I_t,t,I_{in}) \|^2]\\
L_{\epsilon}(\theta):=\mathbb{E}[\lambda_{\epsilon}\| \epsilon -
\epsilon_{\theta}(I_t,t,I_{in}) \|^2] \tag{3}
\]&lt;/span&gt; 这一部分在代码中体现如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;model_out = self.model(x_in,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       [self.alphas_cumsum[t]*self.num_timesteps,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       self.betas_cumsum[t]*self.num_timesteps],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       x_self_cond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 这里 x_in 是 torch.cat((x_t, x_input, x_input_condition), dim=1) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 后续是时间步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# x_self_cond 是与自注意力机制有关，目前不太清楚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 这里的 model_out 是两个张量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# pred_res = model_out[0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# pred_noise = model_out[1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 这里作者是通过创建两个 unet 模型来实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着是通过模型训练的目标函数进行损失计算，达到训练模型的目的：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x_u = self.q_posterior_from_res_noise(pred_res, pred_noise, x, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;u_gt = self.q_posterior_from_res_noise(x_res, noise, x, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;*self.loss_fn(x_u, u_gt, reduction=&lt;span class=&#34;string&#34;&gt;&amp;#x27;none&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里主要是拆解一下 &lt;code&gt;self.q_posterior_from_res_noise()&lt;/code&gt;
这个函数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;q_posterior_from_res_noise&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x_res, noise, x_t, t&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (x_t-extract(self.alphas, t, x_t.shape) * x_res -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           (extract(self.betas2, t, x_t.shape)/extract(self.betas_cumsum, t, x_t.shape)) * noise)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里先引入一下原始的 &lt;code&gt;DDPM&lt;/code&gt; 是如何计算损失的。 &lt;span
class=&#34;math display&#34;&gt;\[
L(\theta):=\mathbb{E}_{I_0\sim q(I_0),\epsilon\sim
\mathcal{N}(0,I)}[\|\epsilon - \epsilon_{\theta}(I_t,t)  \|^2] \tag{4}
\]&lt;/span&gt; 可以看出，原始&lt;code&gt;DDPM&lt;/code&gt;
的损失计算十分简单，只需要计算模型预测出来的噪声和原始的噪声的差值即可。但是在
&lt;code&gt;RDDM&lt;/code&gt;
中，引入了一个新的需要计算的损失，即残差之间的损失。&lt;code&gt;DDPM&lt;/code&gt;
的损失计算：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x_recon = self.denoise_fn(torch.cat([x_in[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Input&amp;#x27;&lt;/span&gt;], x_noisy], dim=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), continuous_sqrt_alpha_cumprod)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = self.loss_func(noise, x_recon)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们从代码比较中可以看出，&lt;code&gt;RDDM&lt;/code&gt;
并没有采用将两者损失分别计算然后相加的方法进行计算，而是通过函数
&lt;code&gt;q_posterior_from_res_noise&lt;/code&gt;
计算出一个值，之后计算两个值之间的差值来进行损失计算和模型训练。通过代码分析，&lt;code&gt;q_posterior_from_res_noise&lt;/code&gt;
计算的是 &lt;code&gt;x_t - x_res - noise&lt;/code&gt;
，即应该是当前时间步下添加了残差和噪声的图像 &lt;code&gt;x_t&lt;/code&gt;
去除模型预测的残差和噪声的值。（⚠️这里其实我也不太确定，没有找的依据）&lt;/p&gt;
&lt;p&gt;至此，正向扩散过程和模型训练过程结束。&lt;/p&gt;
&lt;p&gt;后续，我们就可以利用训练好的网络预测得到的 &lt;span
class=&#34;math inline&#34;&gt;\(I^{\theta}_{res}\)&lt;/span&gt; 和噪声 &lt;span
class=&#34;math inline&#34;&gt;\(\epsilon_{\theta}\)&lt;/span&gt; 从 &lt;span
class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; 中 恢复 &lt;span
class=&#34;math inline&#34;&gt;\(I_{t-1}\)&lt;/span&gt; 。 &lt;span class=&#34;math display&#34;&gt;\[
I_{t-1} = I_{t} - (\bar{\alpha}_t - \bar{\alpha}_{t-1})I^{\theta}_{res}
-
(\bar{\beta}_{t}-\sqrt{\bar{\beta}^2_{t-1}-\sigma^2_t})\epsilon_{\theta}
+ \sigma_t\epsilon_t,where\quad \epsilon_t\sim \mathcal{N}(0,I) \\
\sigma^2_t = \eta \beta^2_t \bar{\beta}^2_{t-1} / \bar{\beta}^2_{t}
\tag{5}
\]&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​ &lt;code&gt;RDDM&lt;/code&gt; 其实是在正向扩散过程中加入了 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in} - I_0 = I_{res}\)&lt;/span&gt;
残差，意味着，原本正向扩散过程中只有 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 变成了 有 &lt;span
class=&#34;math inline&#34;&gt;\(I_0,I_{res}\)&lt;/span&gt; 。也就是说网络从只学习 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 分布变成了现在学习 &lt;span
class=&#34;math inline&#34;&gt;\(I_0,I_res\)&lt;/span&gt;
分布。在这之后分别训练两个模型，一个专注于预测 &lt;span
class=&#34;math inline&#34;&gt;\(I_{res}\)&lt;/span&gt; 另一个专注于预测 &lt;span
class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt;
。作者指出，残差扩散代表了从退化图像 &lt;span
class=&#34;math inline&#34;&gt;\(I_{in}\)&lt;/span&gt; 到 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt;
的过程。代表了确定性。噪声扩散代表了从杂环无序的噪声 &lt;span
class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt; 到 &lt;span
class=&#34;math inline&#34;&gt;\(I_0\)&lt;/span&gt; 的过程，代表了多样性。两者统一。&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2024/05/05/%E9%9F%B3%E8%A7%86%E9%A2%91/</guid>
            <title>音视频</title>
            <link>https://chnhqz.github.io/2024/05/05/%E9%9F%B3%E8%A7%86%E9%A2%91/</link>
            <pubDate>Sun, 05 May 2024 13:07:50 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;截屏2024-05-05 23.17.47.png&#34; alt=&#34;截屏2024-05-05 23.17.47&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;将mp4转化为flv格式&#34;&gt;将MP4转化为FLV格式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avformat_alloc_output_context2()&lt;/code&gt; 和
&lt;code&gt;avformat_free_context()&lt;/code&gt; 是 FFmpeg
中用于操作输出格式上下文（output format context）的函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avformat_alloc_output_context2()&lt;/code&gt;
用于分配并初始化一个输出格式上下文。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avformat_free_context()&lt;/code&gt;
用于释放一个输出格式上下文及其相关资源。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avformat_new_stream()&lt;/code&gt;
用于创建新的流（stream）。这个函数允许你在一个封装器（如
AVFormatContext）中添加一个新的音频或视频流。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avcodec_parameters_copy()&lt;/code&gt;
是一个函数，用于复制编解码器参数（codec
parameters）。它可以将源编解码器参数复制到目标编解码器参数，确保目标参数与源参数具有相同的属性和配置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avformat_write_header()&lt;/code&gt;
是一个函数，用于向输出容器（output container）写入容器头（container
header）。在使用 FFmpeg
编码或封装媒体文件时，通常需要在写入数据流之前调用此函数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_write_frame()&lt;/code&gt; 和
&lt;code&gt;av_interleaved_write_frame()&lt;/code&gt;
是用于将音视频帧写入输出文件的函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;av_write_frame()&lt;/code&gt;
用于将音视频帧写入输出文件，但不进行交错写入（interleaved
writing）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;av_interleaved_write_frame()&lt;/code&gt;
则是进行交错写入的版本，确保音频和视频帧以交错的方式写入输出文件，以便播放器能够按照正确的顺序解码和播放。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_write_trailer()&lt;/code&gt;
是一个函数，用于写入封装器（muxer）的尾部（trailer），完成媒体文件的封装过程。在使用
FFmpeg
编码或封装媒体文件时，通常需要在写入所有数据流并关闭文件之前调用此函数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;错误记录：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error C2065: “INTMAX_MAX”: 未声明的标识符 (编译源文件 src\main.cpp)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开项目属性-&amp;gt; C/C++ -&amp;gt; 预处理器-&amp;gt; 预处理器定义&lt;/p&gt;
&lt;p&gt;添加： **__STDC_LIMIT_MACROS**&lt;/p&gt;
&lt;p&gt;遇到
&lt;code&gt;不能将 const AVOutputformat * 类型的值分配到 AVOutputformat * 类型的实体&lt;/code&gt;
错误&lt;/p&gt;
&lt;p&gt;这个错误可能是因为试图将一个 &lt;code&gt;const AVOutputFormat&lt;/code&gt;
类型的值分配给一个 &lt;code&gt;AVOutputFormat&lt;/code&gt;
类型的变量，而这两个类型不完全相同。&lt;/p&gt;
&lt;p&gt;通常情况下，可以通过使用类型转换来解决这个问题。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AVOutputFormat *const_format_ptr = ...; &lt;span class=&#34;comment&#34;&gt;// 指向常量 AVOutputFormat 的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AVOutputFormat *format_ptr = (AVOutputFormat *)const_format_ptr; &lt;span class=&#34;comment&#34;&gt;// 转换为普通 AVOutputFormat 指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，确保应用程序逻辑和安全性不受影响，因为在将常量指针转换为非常量指针时可能会引入潜在的错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;log_packet&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AVFormatContext* fmt_ctx, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AVPacket* pkt, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* tag)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVRational* time_base = &amp;amp;fmt_ctx-&amp;gt;streams[pkt-&amp;gt;stream_index]-&amp;gt;time_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mp42flv&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVOutputFormat* ofmt = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVFormatContext* ifmt_ctx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, * ofmt_ctx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPacket pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; src[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;input.mp4&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; dst[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;output.flv&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; stream_index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *stream_mapping = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; stream_mapping_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((ret = &lt;span class=&#34;built_in&#34;&gt;avformat_open_input&lt;/span&gt;(&amp;amp;ifmt_ctx, src, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 打开输入的多媒体文件，生成多媒体上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not open input file &amp;#x27;%s&amp;#x27;.\n&amp;quot;&lt;/span&gt;, src);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((ret = &lt;span class=&#34;built_in&#34;&gt;avformat_find_stream_info&lt;/span&gt;(ifmt_ctx, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to retrieve input stream information.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_dump_format&lt;/span&gt;(ifmt_ctx, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, src, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;avformat_alloc_output_context2&lt;/span&gt;(&amp;amp;ofmt_ctx, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, dst);	&lt;span class=&#34;comment&#34;&gt;// 输出的上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!ofmt_ctx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not create output context.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = AVERROR_UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	stream_mapping_size = ifmt_ctx-&amp;gt;nb_streams;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	stream_mapping = (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;*)&lt;span class=&#34;built_in&#34;&gt;av_malloc_array&lt;/span&gt;(stream_mapping_size, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(*stream_mapping));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!stream_mapping) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;built_in&#34;&gt;AVERROR&lt;/span&gt;(ENOMEM);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-1.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ofmt = (AVOutputFormat*)ofmt_ctx-&amp;gt;oformat;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; ifmt_ctx-&amp;gt;nb_streams; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVStream* out_stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVStream* in_stream = ifmt_ctx-&amp;gt;streams[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodecParameters* in_codecpar = in_stream-&amp;gt;codecpar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (in_codecpar-&amp;gt;codec_type != AVMEDIA_TYPE_AUDIO &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			in_codecpar-&amp;gt;codec_type != AVMEDIA_TYPE_AUDIO &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			in_codecpar-&amp;gt;codec_type != AVMEDIA_TYPE_SUBTITLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			stream_mapping[i] = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		stream_mapping[i] = stream_index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		out_stream = &lt;span class=&#34;built_in&#34;&gt;avformat_new_stream&lt;/span&gt;(ofmt_ctx, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!out_stream) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed allocating output stream.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ret = AVERROR_UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;built_in&#34;&gt;avcodec_parameters_copy&lt;/span&gt;(out_stream-&amp;gt;codecpar, in_codecpar);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to copy codec parameters.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		out_stream-&amp;gt;codecpar-&amp;gt;codec_tag = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_dump_format&lt;/span&gt;(ofmt_ctx, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, dst, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;system&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;built_in&#34;&gt;avio_open&lt;/span&gt;(&amp;amp;ofmt_ctx-&amp;gt;pb, dst, AVIO_FLAG_WRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not open file &amp;#x27;%s&amp;#x27;.\n&amp;quot;&lt;/span&gt;, dst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ret = &lt;span class=&#34;built_in&#34;&gt;avformat_write_header&lt;/span&gt;(ofmt_ctx, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Error occurred when opening output file.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVStream* in_stream, * out_stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;built_in&#34;&gt;av_read_frame&lt;/span&gt;(ifmt_ctx, &amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		in_stream = ifmt_ctx-&amp;gt;streams[pkt.stream_index];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pkt.stream_index &amp;gt;= stream_mapping_size || stream_mapping[pkt.stream_index] &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;av_packet_unref&lt;/span&gt;(&amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt.stream_index = stream_mapping[pkt.stream_index];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		out_stream = ofmt_ctx-&amp;gt;streams[pkt.stream_index];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;log_packet&lt;/span&gt;(ifmt_ctx, &amp;amp;pkt, &lt;span class=&#34;string&#34;&gt;&amp;quot;in&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;/* copy packet*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt.pts = &lt;span class=&#34;built_in&#34;&gt;av_rescale_q_rnd&lt;/span&gt;(pkt.pts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			AV_ROUND_PASS_MINMAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt.dts = &lt;span class=&#34;built_in&#34;&gt;av_rescale_q_rnd&lt;/span&gt;(pkt.dts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			AV_ROUND_PASS_MINMAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt.duration = &lt;span class=&#34;built_in&#34;&gt;av_rescale_q&lt;/span&gt;(pkt.duration, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt.pos = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;log_packet&lt;/span&gt;(ofmt_ctx, &amp;amp;pkt, &lt;span class=&#34;string&#34;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;built_in&#34;&gt;av_interleaved_write_frame&lt;/span&gt;(ofmt_ctx, &amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;Error muxing packet.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;av_packet_unref&lt;/span&gt;(&amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_write_trailer&lt;/span&gt;(ofmt_ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;avformat_close_input&lt;/span&gt;(&amp;amp;ifmt_ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ofmt_ctx &amp;amp;&amp;amp; !(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avio_closep&lt;/span&gt;(&amp;amp;ofmt_ctx-&amp;gt;pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;avformat_free_context&lt;/span&gt;(ofmt_ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_freep&lt;/span&gt;(&amp;amp;stream_mapping);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;ffmpeg文件与目录操作&#34;&gt;FFmpeg文件与目录操作&lt;/h4&gt;
&lt;p&gt;文件的删除与重命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avpriv_io_delete()&lt;/code&gt; 是 FFmpeg
中的一个私有函数，用于删除指定的文件或目录。它可以删除本地文件系统上的文件或目录，并提供了一些选项来控制删除操作的行为。由于
&lt;code&gt;avpriv_io_delete()&lt;/code&gt; 是一个私有函数，它并不是 FFmpeg 公共 API
的一部分，因此在正式的应用程序中使用它可能会有一些风险，因为它的行为和接口可能随时发生变化。通常情况下，您应该尽量避免使用私有函数，而是使用
FFmpeg 提供的公共 API。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avpriv_io_move()&lt;/code&gt; 是 FFmpeg
中的一个私有函数，用于移动文件或目录。它可以将文件或目录从一个位置移动到另一个位置，并提供了一些选项来控制移动操作的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现一个简单的小咖秀&#34;&gt;实现一个简单的小咖秀&lt;/h4&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;从两个媒体文件中分别抽取音频与视频轨&lt;/li&gt;
&lt;li&gt;将音频与视频轨合并成一个新文件&lt;/li&gt;
&lt;li&gt;对音频与视频轨进行裁剪&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;libavcodecavcodec.h&#34;&gt;libavcodec/avcodec.h&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AVCodec&lt;/code&gt; 编码器结构体&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AVCodecContext&lt;/code&gt; 编码器上下文&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AVFrame&lt;/code&gt; 解码后的帧&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_frame_alloc()&lt;/code&gt; 和 &lt;code&gt;av_frame_free()&lt;/code&gt; 是
FFmpeg 中用于操作帧（frame）的函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_frame_alloc()&lt;/code&gt;
用于分配一个新的帧，并返回一个指向该帧的指针。您可以使用此函数来创建一个空的帧，然后填充数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_frame_free()&lt;/code&gt;
用于释放先前分配的帧。当您完成对帧的使用后，应该调用此函数来释放相关的内存，并避免内存泄漏。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个函数通常在编解码过程中用于分配和释放帧内存。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avcodec_alloc_context3()&lt;/code&gt;
分配一个&lt;code&gt;AVCodecContext&lt;/code&gt;结构体的实例，用于存储编解码器的参数和状态。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avcodec_free_context()&lt;/code&gt; 释放上下文&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解码步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;查找解码器 &lt;code&gt;avcodec_find_decoder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开解码器 &lt;code&gt;avcodec_open2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解码 &lt;code&gt;avcodec_decode_video2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;编码步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;查找编码器
&lt;code&gt;avcodec_find_encoder_by_name/avcodec_find_encoder&lt;/code&gt; 在 FFmpeg
中，&lt;code&gt;avcodec_find_encoder_by_name()&lt;/code&gt; 和
&lt;code&gt;avcodec_find_encoder()&lt;/code&gt; 都是用于查找编码器的函数。
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avcodec_find_encoder_by_name()&lt;/code&gt;
根据编码器的名称查找编码器。您需要传递编码器的名称作为参数，函数将返回一个指向
&lt;code&gt;AVCodec&lt;/code&gt; 结构体的指针，该结构体包含了编码器的信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;avcodec_find_encoder()&lt;/code&gt; 则是根据编码器的
ID（编码器的枚举值）来查找编码器。您需要传递编码器的 ID
作为参数，函数将返回一个指向 &lt;code&gt;AVCodec&lt;/code&gt;
结构体的指针，该结构体包含了编码器的信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;设置编码参数（分辨率、帧率、...），并打开编码器
&lt;code&gt;avcodec_open2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编码 &lt;code&gt;avcodec_encode_video2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：音频，视频的编解码大概类似，大体都分为三步：找到编解码器、（设置参数）打开编解码器、进行编解码。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;从mp4截取一段视频&#34;&gt;从MP4截取一段视频&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;av_seek_frame&lt;/code&gt;
函数用于在媒体文件中定位到指定的帧。&lt;/p&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AVFormatContext *s&lt;/code&gt;：表示输入或输出媒体文件的格式上下文。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int stream_index&lt;/code&gt;：表示要寻找的媒体流的索引。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int64_t timestamp&lt;/code&gt;：表示要寻找的时间戳，以媒体流的基本时间单位为单位（通常是微秒）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int flags&lt;/code&gt;：表示定位的标志位，可以是
&lt;code&gt;AVSEEK_FLAG_BACKWARD&lt;/code&gt;（向后定位）、&lt;code&gt;AVSEEK_FLAG_BYTE&lt;/code&gt;（以字节为单位定位）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该函数将在媒体文件中定位到距离给定时间戳最近的关键帧，并更新
&lt;code&gt;AVFormatContext&lt;/code&gt; 中的信息以反映新的位置。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;avformat_new_stream 的用法：&lt;/p&gt;
&lt;p&gt;AVStream 即是流通道。例如我们将 H264 和 AAC
码流存储为MP4文件的时候，就需要在
MP4文件中增加两个流通道，一个存储Video：H264，一个存储Audio：AAC。（假设H264和AAC只包含单个流通道）。&lt;/p&gt;
&lt;p&gt;AVStream包含很多参数，用于记录通道信息，其中最重要的是 :&lt;/p&gt;
&lt;p&gt;AVCodecParameters * codecpar
：用于记录编码后的流信息，即通道中存储的流的编码信息。&lt;/p&gt;
&lt;p&gt;AVRational time_base
：AVStream通道的时间基，时间基是个相当重要的概念。（可参考之后的关于ffmpeg时间的文章）&lt;/p&gt;
&lt;p&gt;需要注意的是：现在的 ffmpeg 3.1.4版本已经使用AVCodecParameters *
codecpar替换了原先的CodecContext* codec !&lt;/p&gt;
&lt;p&gt;avformat_new_stream 在 AVFormatContext中创建 Stream 通道&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//AVFormatContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nb_streams; &lt;span class=&#34;comment&#34;&gt;// 记录stream通道数目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AVStream **streams;      &lt;span class=&#34;comment&#34;&gt;// 存储stream通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// AVStream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; index;							&lt;span class=&#34;comment&#34;&gt;// 在AVFormatContext 中所处的通道索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-07%2016.22.19.png&#34;
alt=&#34;截屏2024-05-07 16.22.19&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-07 16.22.19&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;avformat_new_stream&lt;/code&gt;之后便在&lt;code&gt;AVFormatContext&lt;/code&gt;里增加了&lt;code&gt;AVStream&lt;/code&gt;增加了&lt;code&gt;AVStream&lt;/code&gt;通道（相关的&lt;code&gt;index&lt;/code&gt;已经被设置了）。之后我们就可以自行设置&lt;code&gt;AVStream&lt;/code&gt;的一些信息。例如
&lt;code&gt;codec_id,format,bit_rate,width,heoght.....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;avformat_new_stream(AVFormatContext * s, const AVCodec * c)&lt;/p&gt;
&lt;p&gt;AVCodec ：s需要通信的视频对应的编码方式。
在已知codec_id的情况下可以通过
codec=avcodec_find_decoder(codec_id)；的方式得到。&lt;/p&gt;
&lt;p&gt;原文：https://blog.csdn.net/u014162133/article/details/82258488&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/Kami_Jiang/article/details/106784580&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;sdl事件基本原理&#34;&gt;SDL事件基本原理&lt;/h4&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;SDL将所有事件都存放在一个队列中&lt;/li&gt;
&lt;li&gt;所有对事件的操作，其实就是对队列的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SDL事件种类&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;SDL_WindowEvent&lt;/code&gt;：窗口事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_KeyboardEvent&lt;/code&gt; ：键盘事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_MouseMotionEvent&lt;/code&gt; ：鼠标事件&lt;/li&gt;
&lt;li&gt;自定义事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;SDL_PollEvent&lt;/code&gt; DL
库中的一个函数，用于检查是否有任何事件发生。它会检查事件队列，并返回队列中的下一个事件（如果有）。轮询操作，要等待一段时间。如果不等待时间，CPU过载&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SDL_WaitEvent&lt;/code&gt;
事件触发机制，用于等待事件的发生。如果当前事件队列为空，则该函数将会一直等待，直到有事件发生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;纹理渲染&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-08%2014.22.58.png&#34;
alt=&#34;截屏2024-05-08 14.22.58&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-08 14.22.58&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SDL_CreateTexture()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;format:YUV,RGB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;access:Texture类型,Target,Stream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_DestroyTexture()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_SetRenderTarget()&lt;/code&gt;用于设置渲染目标，即指定在哪个渲染器上进行绘制。你可以将渲染目标设置为一个纹理或者窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_RenderClear()&lt;/code&gt;用于清除当前渲染目标上的所有内容，将其填充为指定的颜色。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_RenderCopy()&lt;/code&gt;用于将纹理复制到当前渲染目标上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_RenderPresent&lt;/code&gt;用于更新窗口显示，将之前所有的渲染操作绘制到窗口上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;yuv播放器&#34;&gt;YUV播放器&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;创建线程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SDL_CreateThread()&lt;/code&gt;函数用于创建一个新的线程。它接受两个参数：一个指向函数的指针，这个函数将作为新线程的入口点；以及一个可选的参数，将传递给新线程的入口函数。函数返回一个指向新线程的
&lt;code&gt;SDL_Thread&lt;/code&gt; 结构体的指针。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; 线程执行函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; 线程名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 执行函数参数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;更新纹理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SDL_UpdateTexture()&lt;/code&gt;
函数用于更新纹理的像素数据。它接受纹理、矩形区域和像素数据作为参数，以更新纹理的一部分或全部像素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_UpdateYUVTexture&lt;/code&gt;
函数用于更新YUV格式的纹理像素数据。它接受纹理、矩形区域、Y、U和V平面的像素数据作为参数，以更新纹理的一部分或全部像素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdl音频api&#34;&gt;SDL音频API&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SDL_OpenAudio/SDL_CloseAudio&lt;/code&gt;
&lt;code&gt;SDL_OpenAudio()&lt;/code&gt;函数用于初始化音频子系统，并打开音频设备以进行音频播放或录制。而&lt;code&gt;SDL_CloseAudio()&lt;/code&gt;函数用于关闭音频设备并释放音频子系统的资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_PauseAudio&lt;/code&gt; &lt;code&gt;SDL_PauseAudio&lt;/code&gt;
用于暂停或继续音频回放。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_MixAudio&lt;/code&gt; 用于将音频数据混合到音频缓冲区中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pcm-音频播放器&#34;&gt;PCM 音频播放器&lt;/h4&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; SDL_MAIN_HANDLED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;SDL2/SDL.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;libavcodec/avcodec.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; BLOCK_SIZE 4096000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; Uint8* audio_buf = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; buffer_len = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; Uint8* audio_pos = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;read_audio_data&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;* udata, Uint8* stream, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (buffer_len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_memset&lt;/span&gt;(stream, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	len = (len &amp;lt; buffer_len) ? len : buffer_len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_MixAudio&lt;/span&gt;(stream, audio_pos, len, SDL_MIX_MAXVOLUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	audio_pos += len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buffer_len -= len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PCM_play&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;pcm_player&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// SDL 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; path[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;NULL&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		FILE* audio_fd = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;SDL_Init&lt;/span&gt;(SDL_INIT_AUDIO)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_Log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to initial.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_fd = &lt;span class=&#34;built_in&#34;&gt;fopen&lt;/span&gt;(path, &lt;span class=&#34;string&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!audio_fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_Log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to open pcm file!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 分配内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_buf = (Uint8*)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(BLOCK_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!audio_buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_Log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to alloc memory!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// spec 音频参数 采样率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_AudioSpec spec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.freq = &lt;span class=&#34;number&#34;&gt;44100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.channels = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.format = AUDIO_S16SYS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.silence = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.callback = read_audio_data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		spec.userdata = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;SDL_OpenAudio&lt;/span&gt;(&amp;amp;spec, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_Log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to open audio device!\n&amp;quot;&lt;/span&gt;);\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_PauseAudio&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buffer_len = &lt;span class=&#34;built_in&#34;&gt;fread&lt;/span&gt;(audio_buf, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, BLOCK_SIZE, audio_fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			audio_pos = audio_buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (audio_pos &amp;lt; (audio_buf + buffer_len)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_Delay&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (buffer_len != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_CloseAudio&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__FAIL:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio_buf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(audio_buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio_fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;fclose&lt;/span&gt;(audio_fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_Quit&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;简单视频播放器&#34;&gt;简单视频播放器&lt;/h4&gt;
&lt;p&gt;利用&lt;code&gt;FFmpeg&lt;/code&gt;
将&lt;code&gt;h264&lt;/code&gt;等数据解码成&lt;code&gt;YUV&lt;/code&gt;数据，通过&lt;code&gt;SDL&lt;/code&gt;渲染。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sws_ctx = &lt;span class=&#34;built_in&#34;&gt;sws_getContext&lt;/span&gt;(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pCodecCtx-&amp;gt;pix_fmt, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AV_PIX_FMT_YUV420P, SWS_BILINEAR,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这段代码使用了 libswscale 库中的 &lt;code&gt;sws_getContext&lt;/code&gt;
函数来创建一个图像转换上下文（sws_ctx）。这个上下文用于将一个像素格式的图像转换成另一种像素格式的图像，以便在播放或处理视频时进行必要的格式转换。&lt;/p&gt;
&lt;p&gt;具体来说，这段代码的作用是将视频帧从输入编解码器上下文（pCodecCtx）的像素格式（pCodecCtx-&amp;gt;pix_fmt）转换为
YUV420P 格式。在大多数情况下，YUV420P
是视频处理中常用的一种格式，因为它包含了亮度（Y）和色度（U、V）信息，而且是压缩视频格式的一种常见格式。&lt;/p&gt;
&lt;p&gt;下面是这段代码的参数解释： - &lt;code&gt;pCodecCtx-&amp;gt;width&lt;/code&gt; 和
&lt;code&gt;pCodecCtx-&amp;gt;height&lt;/code&gt;: 输入视频帧的宽度和高度。 -
&lt;code&gt;pCodecCtx-&amp;gt;pix_fmt&lt;/code&gt;: 输入视频帧的像素格式。 -
&lt;code&gt;pCodecCtx-&amp;gt;width&lt;/code&gt; 和 &lt;code&gt;pCodecCtx-&amp;gt;height&lt;/code&gt;:
输出视频帧的宽度和高度，通常与输入视频帧的尺寸相同。 -
&lt;code&gt;AV_PIX_FMT_YUV420P&lt;/code&gt;: 输出视频帧的像素格式，这里选择了
YUV420P 格式。 - &lt;code&gt;SWS_BILINEAR&lt;/code&gt;:
像素转换的算法，这里选择了双线性插值算法，用于平滑图像。&lt;/p&gt;
&lt;p&gt;最后三个参数是用于设置特殊选项的，通常情况下可以设为 NULL。&lt;/p&gt;
&lt;p&gt;总之，这段代码的目的是创建一个图像转换上下文，以便在播放视频时将输入的像素格式转换为
YUV420P 格式，以便后续处理或显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pict = (AVPicture*)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(AVPicture));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;avpicture_alloc&lt;/span&gt;(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这段代码分配了一个大小合适的内存块来存储 YUV420P
格式的图像数据，并使用 &lt;code&gt;avpicture_alloc&lt;/code&gt; 函数来初始化
&lt;code&gt;pict&lt;/code&gt; 指针所指向的内存块，使其可以存储 YUV420P
格式的图像数据。&lt;/p&gt;
&lt;p&gt;具体来说，&lt;code&gt;avpicture_alloc&lt;/code&gt;
函数会根据指定的像素格式（AV_PIX_FMT_YUV420P）、宽度（pCodecCtx-&amp;gt;width）和高度（pCodecCtx-&amp;gt;height），为
&lt;code&gt;pict&lt;/code&gt;
指向的内存块分配足够的空间，并根据像素格式的要求对内存块进行初始化，以便后续存储
YUV420P 格式的图像数据。&lt;/p&gt;
&lt;p&gt;这段代码的目的是为后续的视频解码和处理准备一个用于存储图像数据的缓冲区，以便于在播放或处理视频时使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;sws_scale&lt;/span&gt;(sws_ctx, (&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;* &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;*)pFrame-&amp;gt;data, pFrame-&amp;gt;linesize, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, pCodecCtx-&amp;gt;height, pict-&amp;gt;data, pict-&amp;gt;linesize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这段代码使用 &lt;code&gt;sws_scale&lt;/code&gt; 函数将解码后的视频帧数据转换为
YUV420P 格式，并将结果存储在 &lt;code&gt;pict&lt;/code&gt; 所指向的内存块中。&lt;/p&gt;
&lt;p&gt;具体来说，&lt;code&gt;sws_scale&lt;/code&gt;
函数会将输入的视频帧数据（&lt;code&gt;pFrame-&amp;gt;data&lt;/code&gt;）按照指定的转换参数（&lt;code&gt;sws_ctx&lt;/code&gt;）进行转换，转换后的数据存储在输出缓冲区（&lt;code&gt;pict-&amp;gt;data&lt;/code&gt;）中。参数
&lt;code&gt;pFrame-&amp;gt;linesize&lt;/code&gt; 表示输入数据每行的字节数，而
&lt;code&gt;pict-&amp;gt;linesize&lt;/code&gt;
表示输出数据每行的字节数。函数还会根据输入和输出的图像大小进行缩放和裁剪操作，以确保输出数据的正确性和一致性。&lt;/p&gt;
&lt;p&gt;这段代码的作用是将解码后的视频帧数据转换为 YUV420P
格式，并存储在指定的内存块中，以便后续的视频处理和显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; filepath[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;input.mp4&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 多媒体文件上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVFormatContext* pFormatCtx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i, videoStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 编解码上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVCodecContext* pCodecCtxOrig = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVCodecContext* pCodecCtx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 图像裁剪上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SwsContext&lt;/span&gt;* sws_ctx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 编解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVCodec* pCodec = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 解码后的数据帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVFrame* pFrame = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 解码前的数据包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPacket packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; frameFinished;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;float&lt;/span&gt; aspect_ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 解码出来的YUV数据存放在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPicture* pict = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_Rect rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Uint32 pixformat;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// render&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_Window* win = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_Renderer* renderer = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_Texture* texture = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 设置默认的窗口大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w_width = &lt;span class=&#34;number&#34;&gt;640&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w_height = &lt;span class=&#34;number&#34;&gt;480&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;SDL_Init&lt;/span&gt;(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not initialize SDL - %s.\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;SDL_GetError&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_register_all&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avformat_open_input&lt;/span&gt;(&amp;amp;pFormatCtx, filepath, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not open video file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avformat_find_stream_info&lt;/span&gt;(pFormatCtx, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to find stream information.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;av_dump_format&lt;/span&gt;(pFormatCtx, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, filepath, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 找到第一个视频流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	videoStream = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; pFormatCtx-&amp;gt;nb_streams; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type == AVMEDIA_TYPE_VIDEO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			videoStream = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;视频流编号：%d\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (videoStream == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Din&amp;#x27;t find a video stream.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;/* 这行代码的目的是获取视频流的编解码上下文（`AVCodecContext`）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	`pFormatCtx` 是输入格式上下文，`streams[videoStream]` 表示视频流，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	然后通过 `codec` 成员获取该流的编解码上下文。*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pCodecCtxOrig = pFormatCtx-&amp;gt;streams[videoStream]-&amp;gt;codec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 找到视频流的解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pCodec = &lt;span class=&#34;built_in&#34;&gt;avcodec_find_decoder&lt;/span&gt;(pCodecCtxOrig-&amp;gt;codec_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodec == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Unsupported codec.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 复制 上下文 为了不破坏原来的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pCodecCtx = &lt;span class=&#34;built_in&#34;&gt;avcodec_alloc_context3&lt;/span&gt;(pCodec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avcodec_copy_context&lt;/span&gt;(pCodecCtx, pCodecCtxOrig) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Couldn&amp;#x27;t copy codec context.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 打开解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avcodec_open2&lt;/span&gt;(pCodecCtx, pCodec, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to open decoder!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 分配视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pFrame = &lt;span class=&#34;built_in&#34;&gt;av_frame_alloc&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	w_width = pCodecCtx-&amp;gt;width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	w_height = pCodecCtx-&amp;gt;height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	win = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateWindow&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Media Player&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_WINDOWPOS_UNDEFINED,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_WINDOWPOS_UNDEFINED,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		w_width, w_height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!win) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to create window by SDL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	renderer = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateRenderer&lt;/span&gt;(win, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!renderer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to create Renderer by SDL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pixformat = SDL_PIXELFORMAT_IYUV;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	texture = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateTexture&lt;/span&gt;(renderer, pixformat,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_TEXTUREACCESS_STREAMING, w_width, w_height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sws_ctx = &lt;span class=&#34;built_in&#34;&gt;sws_getContext&lt;/span&gt;(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pCodecCtx-&amp;gt;pix_fmt, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AV_PIX_FMT_YUV420P, SWS_BILINEAR,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pict = (AVPicture*)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(AVPicture));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;avpicture_alloc&lt;/span&gt;(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;av_read_frame&lt;/span&gt;(pFormatCtx, &amp;amp;packet) &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (packet.stream_index == videoStream) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 解码视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;avcodec_decode_video2&lt;/span&gt;(pCodecCtx, pFrame, &amp;amp;frameFinished, &amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// 得到解码后的视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frameFinished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// 将图片转化为 SDL 使用的 YUV 格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;sws_scale&lt;/span&gt;(sws_ctx, (&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;* &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;*)pFrame-&amp;gt;data,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pFrame-&amp;gt;linesize, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, pCodecCtx-&amp;gt;height, pict-&amp;gt;data, pict-&amp;gt;linesize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_UpdateYUVTexture&lt;/span&gt;(texture, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				rect.x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				rect.y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				rect.w = pCodecCtx-&amp;gt;width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				rect.h = pCodecCtx-&amp;gt;height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_RenderClear&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_RenderCopy&lt;/span&gt;(renderer, texture, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &amp;amp;rect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_RenderPresent&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;av_free_packet&lt;/span&gt;(&amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__FAIL:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Free the YUV frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFrame) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;av_frame_free&lt;/span&gt;(&amp;amp;pFrame);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Close the codec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodecCtx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avcodec_close&lt;/span&gt;(pCodecCtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodecCtxOrig) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avcodec_close&lt;/span&gt;(pCodecCtxOrig);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Close the video file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFormatCtx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avformat_close_input&lt;/span&gt;(&amp;amp;pFormatCtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pict) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avpicture_free&lt;/span&gt;(pict);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(pict);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (win) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyWindow&lt;/span&gt;(win);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (renderer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyRenderer&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (texture) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyTexture&lt;/span&gt;(texture);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_Quit&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用队列存放音频包-播放器&#34;&gt;使用队列存放音频包-播放器&lt;/h4&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;396&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;397&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;398&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;399&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;401&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;402&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;403&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;404&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;405&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;406&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;407&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;408&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;409&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;410&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;411&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;412&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;413&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;414&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;415&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;416&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;417&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;418&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;419&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;420&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;421&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;422&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;423&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;424&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;425&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;426&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;427&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;428&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;429&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;430&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;431&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;432&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;433&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;434&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;435&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;436&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;437&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;438&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;439&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;440&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;441&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;442&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;443&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;444&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;445&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;446&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;447&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;448&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;449&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;450&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;451&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;452&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;453&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;454&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;455&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;456&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;457&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;458&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;459&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;460&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;461&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;462&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;463&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;464&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;465&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;466&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;467&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;468&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;469&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;470&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;471&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;472&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;473&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;474&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;475&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;476&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;477&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;478&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;479&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;480&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;481&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;482&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;483&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;484&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;485&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;486&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;487&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;488&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;489&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;490&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;491&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;492&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;493&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;494&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;495&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;496&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;497&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;498&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;499&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;500&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;501&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;502&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;503&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;pragma&lt;/span&gt; once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; SDL_MAIN_HANDLED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;SDL2/SDL.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;libavcodec/avcodec.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libavutil/log.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libavformat/avformat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libavutil/avutil.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libavcodec/version.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libavutil/mem.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libswscale/swscale.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;libswresample/swresample.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; BLOCK_SIZE 4096000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; Uint8* audio_buf = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; buffer_len = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; Uint8* audio_pos = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; LIBAVCODEC_VERSION_INT &amp;lt; AV_VERSION_INT(55, 28, 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; av_frame_alloc avcodec_alloc_frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; av_frame_free avcodec_free_frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; SDL_AUDIO_BUFFER_SIZE 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MAX_AUDIO_FRAME_SIZE 192000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; quit = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SwrContext&lt;/span&gt;* audio_convert_ctx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PacketQueue&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPacketList* first_pkt, * last_pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nb_packets;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_mutex* mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	SDL_cond* cond;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; PacketQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PacketQueue audioq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packet_queue_init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(PacketQueue* q)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(q, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(PacketQueue));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	q-&amp;gt;mutex = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateMutex&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	q-&amp;gt;cond = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateCond&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packet_queue_put&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(PacketQueue* q, AVPacket* pkt)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPacketList* pkt1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;av_dup_packet&lt;/span&gt;(pkt) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pkt1 = (AVPacketList*)&lt;span class=&#34;built_in&#34;&gt;av_malloc&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(AVPacketList));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!pkt1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pkt1-&amp;gt;pkt = *pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pkt1-&amp;gt;next = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_LockMutex&lt;/span&gt;(q-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!q-&amp;gt;last_pkt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		q-&amp;gt;first_pkt = pkt1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		q-&amp;gt;last_pkt-&amp;gt;next = pkt1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	q-&amp;gt;last_pkt = pkt1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	q-&amp;gt;nb_packets++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	q-&amp;gt;size += pkt1-&amp;gt;pkt.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_CondSignal&lt;/span&gt;(q-&amp;gt;cond);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_UnlockMutex&lt;/span&gt;(q-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packet_queue_get&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(PacketQueue* q, AVPacket* pkt, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; block)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVPacketList* pkt1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_LockMutex&lt;/span&gt;(q-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (quit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ret = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pkt1 = q-&amp;gt;first_pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pkt1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			q-&amp;gt;first_pkt = pkt1-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!q-&amp;gt;first_pkt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				q-&amp;gt;last_pkt = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			q-&amp;gt;nb_packets--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			q-&amp;gt;size -= pkt1-&amp;gt;pkt.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			*pkt = pkt1-&amp;gt;pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;av_free&lt;/span&gt;(pkt1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ret = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ret = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_CondWait&lt;/span&gt;(q-&amp;gt;cond, q-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;SDL_UnlockMutex&lt;/span&gt;(q-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;audio_decode_frame&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AVCodecContext* aCodecCtx, &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt;* audio_buf, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; buf_size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; AVPacket pkt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt;* audio_pkt_data = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; audio_pkt_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; AVFrame frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len1, data_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (audio_pkt_size &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; got_frame = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			len1 = &lt;span class=&#34;built_in&#34;&gt;avcodec_decode_audio4&lt;/span&gt;(aCodecCtx, &amp;amp;frame, &amp;amp;got_frame, &amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len1 &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				audio_pkt_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			audio_pkt_data += len1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			audio_pkt_size -= len1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			data_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (got_frame) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				data_size = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * frame.nb_samples;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(data_size &amp;lt;= buf_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;swr_convert&lt;/span&gt;(audio_convert_ctx,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;amp;audio_buf,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					MAX_AUDIO_FRAME_SIZE * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt;**)frame.data,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					frame.nb_samples);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (data_size &amp;lt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; data_size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pkt.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;av_free_packet&lt;/span&gt;(&amp;amp;pkt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (quit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;packet_queue_get&lt;/span&gt;(&amp;amp;audioq, &amp;amp;pkt, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_pkt_data = pkt.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_pkt_size = pkt.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;audio_callback&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;* userdata, Uint8* stream, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AVCodecContext* aCodecCtx = (AVCodecContext*)userdata;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len1, audio_size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; audio_buf[(MAX_AUDIO_FRAME_SIZE * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; audio_buf_size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; audio_buf_index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio_buf_index &amp;gt;= audio_buf_size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;/* We have already sent all our data; get more*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			audio_size = &lt;span class=&#34;built_in&#34;&gt;audio_decode_frame&lt;/span&gt;(aCodecCtx, audio_buf, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(audio_buf));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio_size &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				audio_buf_size = &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(audio_buf, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, audio_buf_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				audio_buf_size = audio_size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			audio_buf_index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		len1 = audio_buf_size - audio_buf_index;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len1 &amp;gt; len) len1 = len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;memcpy&lt;/span&gt;(stream, (&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt;*)audio_buf + audio_buf_index, len1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		len -= len1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		stream += len1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_buf_index += len1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PCM_play&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; filepath[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;input.mp4&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 多媒体文件上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVFormatContext* pFormatCtx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i, videoStream, audioStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 编解码上下文 视频流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodecContext* pCodecCtxOrig = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodecContext* pCodecCtx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 图像裁剪上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SwsContext&lt;/span&gt;* sws_ctx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 音频流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodecContext* aCodecCtxtOrig = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodecContext* aCodecCtx = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodec* aCodec = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int64_t&lt;/span&gt; in_channel_layout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int64_t&lt;/span&gt; out_channel_layout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 编解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVCodec* pCodec = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 解码后的数据帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVFrame* pFrame = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 解码前的数据包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVPacket packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; frameFinished;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;float&lt;/span&gt; aspect_ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 解码出来的YUV数据存放在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		AVPicture* pict = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_Rect rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		Uint32 pixformat;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// render&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_Window* win = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_Renderer* renderer = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_Texture* texture = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 设置默认的窗口大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w_width = &lt;span class=&#34;number&#34;&gt;640&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; w_height = &lt;span class=&#34;number&#34;&gt;480&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_Event event;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 音频 指定音频播放的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		SDL_AudioSpec wanted_spec, spec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;SDL_Init&lt;/span&gt;(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not initialize SDL - %s.\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;SDL_GetError&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;av_register_all&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avformat_open_input&lt;/span&gt;(&amp;amp;pFormatCtx, filepath, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Could not open video file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avformat_find_stream_info&lt;/span&gt;(pFormatCtx, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to find stream information.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;av_dump_format&lt;/span&gt;(pFormatCtx, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, filepath, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 找到 视频流 音频流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		videoStream = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audioStream = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; pFormatCtx-&amp;gt;nb_streams; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type == AVMEDIA_TYPE_VIDEO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				videoStream = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;视频流编号：%d\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type == AVMEDIA_TYPE_AUDIO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				audioStream = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;音频流编号：%d\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (videoStream == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Din&amp;#x27;t find a video stream.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audioStream == &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Din&amp;#x27;t find a audio stream.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 音频&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		aCodecCtxtOrig = pFormatCtx-&amp;gt;streams[audioStream]-&amp;gt;codec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		aCodec = &lt;span class=&#34;built_in&#34;&gt;avcodec_find_decoder&lt;/span&gt;(aCodecCtxtOrig-&amp;gt;codec_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!aCodec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Unsupported codec.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		aCodecCtx = &lt;span class=&#34;built_in&#34;&gt;avcodec_alloc_context3&lt;/span&gt;(aCodec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avcodec_copy_context&lt;/span&gt;(aCodecCtx, aCodecCtxtOrig) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Couldn&amp;#x27;t copy codec context.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 设置音频参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.freq = aCodecCtx-&amp;gt;sample_rate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.format = AUDIO_S16SYS;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.channels = aCodecCtx-&amp;gt;channels;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.silence = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.samples = SDL_AUDIO_BUFFER_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.callback = audio_callback;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wanted_spec.userdata = aCodecCtx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;SDL_OpenAudio&lt;/span&gt;(&amp;amp;wanted_spec, &amp;amp;spec) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to open audio device -%s.\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;SDL_GetError&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 打开音频解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avcodec_open2&lt;/span&gt;(aCodecCtx, aCodec, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;packet_queue_init&lt;/span&gt;(&amp;amp;audioq);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		in_channel_layout = &lt;span class=&#34;built_in&#34;&gt;av_get_default_channel_layout&lt;/span&gt;(aCodecCtx-&amp;gt;channels);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		out_channel_layout = in_channel_layout;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;in layout:%lld, out layout:%lld \n&amp;quot;&lt;/span&gt;, in_channel_layout, out_channel_layout);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		audio_convert_ctx = &lt;span class=&#34;built_in&#34;&gt;swr_alloc&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio_convert_ctx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;swr_alloc_set_opts&lt;/span&gt;(audio_convert_ctx,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				out_channel_layout,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				AV_SAMPLE_FMT_S16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				aCodecCtx-&amp;gt;sample_rate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				in_channel_layout,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				aCodecCtx-&amp;gt;sample_fmt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				aCodecCtx-&amp;gt;sample_rate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;swr_init&lt;/span&gt;(audio_convert_ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_PauseAudio&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;/* 这行代码的目的是获取视频流的编解码上下文（`AVCodecContext`）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		`pFormatCtx` 是输入格式上下文，`streams[videoStream]` 表示视频流，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;		然后通过 `codec` 成员获取该流的编解码上下文。*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pCodecCtxOrig = pFormatCtx-&amp;gt;streams[videoStream]-&amp;gt;codec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 找到视频流的解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pCodec = &lt;span class=&#34;built_in&#34;&gt;avcodec_find_decoder&lt;/span&gt;(pCodecCtxOrig-&amp;gt;codec_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodec == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Unsupported codec.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 复制 上下文 为了不破坏原来的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pCodecCtx = &lt;span class=&#34;built_in&#34;&gt;avcodec_alloc_context3&lt;/span&gt;(pCodec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avcodec_copy_context&lt;/span&gt;(pCodecCtx, pCodecCtxOrig) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Couldn&amp;#x27;t copy codec context.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 打开解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;avcodec_open2&lt;/span&gt;(pCodecCtx, pCodec, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to open decoder!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 分配视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pFrame = &lt;span class=&#34;built_in&#34;&gt;av_frame_alloc&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		w_width = pCodecCtx-&amp;gt;width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		w_height = pCodecCtx-&amp;gt;height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		win = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateWindow&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Media Player&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			SDL_WINDOWPOS_UNDEFINED,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			SDL_WINDOWPOS_UNDEFINED,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!win) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION, &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to create window by SDL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		renderer = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateRenderer&lt;/span&gt;(win, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!renderer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_LogError&lt;/span&gt;(SDL_LOG_CATEGORY_APPLICATION , &lt;span class=&#34;string&#34;&gt;&amp;quot;Failed to create Renderer by SDL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __FAIL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pixformat = SDL_PIXELFORMAT_IYUV;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		texture = &lt;span class=&#34;built_in&#34;&gt;SDL_CreateTexture&lt;/span&gt;(renderer, pixformat,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			SDL_TEXTUREACCESS_STREAMING, w_width, w_height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sws_ctx = &lt;span class=&#34;built_in&#34;&gt;sws_getContext&lt;/span&gt;(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pCodecCtx-&amp;gt;pix_fmt, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			AV_PIX_FMT_YUV420P, SWS_BILINEAR,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pict = (AVPicture*)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(AVPicture));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;avpicture_alloc&lt;/span&gt;(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;av_read_frame&lt;/span&gt;(pFormatCtx, &amp;amp;packet) &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (packet.stream_index == videoStream) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// 解码视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;avcodec_decode_video2&lt;/span&gt;(pCodecCtx, pFrame, &amp;amp;frameFinished, &amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// 得到解码后的视频帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frameFinished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;comment&#34;&gt;// 将图片转化为 SDL 使用的 YUV 格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;sws_scale&lt;/span&gt;(sws_ctx, (&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;* &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;*)pFrame-&amp;gt;data,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pFrame-&amp;gt;linesize, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, pCodecCtx-&amp;gt;height, pict-&amp;gt;data, pict-&amp;gt;linesize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;SDL_UpdateYUVTexture&lt;/span&gt;(texture, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pict-&amp;gt;data[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], pict-&amp;gt;linesize[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					rect.x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					rect.y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					rect.w = pCodecCtx-&amp;gt;width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					rect.h = pCodecCtx-&amp;gt;height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;SDL_RenderClear&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;SDL_RenderCopy&lt;/span&gt;(renderer, texture, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &amp;amp;rect);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;SDL_RenderPresent&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;SDL_Delay&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;built_in&#34;&gt;av_free_packet&lt;/span&gt;(&amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (packet.stream_index == audioStream) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;packet_queue_put&lt;/span&gt;(&amp;amp;audioq, &amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;av_free_packet&lt;/span&gt;(&amp;amp;packet);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_PollEvent&lt;/span&gt;(&amp;amp;event);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (event.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; SDL_QUIT:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				quit = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; __QUIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;built_in&#34;&gt;SDL_Log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;event type is %d&amp;quot;&lt;/span&gt;, event.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__QUIT:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ret = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__FAIL:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Free the YUV frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFrame) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;av_frame_free&lt;/span&gt;(&amp;amp;pFrame);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Close the codec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodecCtx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;avcodec_close&lt;/span&gt;(pCodecCtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pCodecCtxOrig) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;avcodec_close&lt;/span&gt;(pCodecCtxOrig);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Close the video file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pFormatCtx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;avformat_close_input&lt;/span&gt;(&amp;amp;pFormatCtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pict) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;avpicture_free&lt;/span&gt;(pict);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(pict);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (win) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyWindow&lt;/span&gt;(win);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (renderer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyRenderer&lt;/span&gt;(renderer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (texture) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;SDL_DestroyTexture&lt;/span&gt;(texture);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;SDL_Quit&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/blog/source/_posts/音视频/黄秋钊.jpg&#34;
alt=&#34;黄秋钊&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;黄秋钊&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;多线程与锁音视频的同步&#34;&gt;多线程与锁（音视频的同步）&lt;/h4&gt;
&lt;p&gt;实现音视频同步的本质就是多线程之间的同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SDL_CreateThread&lt;/code&gt;
用于创建一个新的线程。它接受一个函数指针和一个指向函数参数的指针作为参数，然后创建一个新的线程来执行指定的函数，并将指定的参数传递给该函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_WaitThread&lt;/code&gt;函数用于等待一个指定线程的结束。它接受一个指向线程的指针作为参数，并在该线程结束后返回。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_CteateMutex/SDL_DestroyMutex&lt;/code&gt;
&lt;code&gt;SDL_CreateMutex&lt;/code&gt;函数用于创建一个互斥锁（mutex），用于线程间的同步。而&lt;code&gt;SDL_DestroyMutex&lt;/code&gt;函数用于销毁互斥锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_LockMutex/SDL_UnlockMutex&lt;/code&gt;
&lt;code&gt;SDL_LockMutex&lt;/code&gt;函数用于尝试锁定互斥锁，如果互斥锁已经被锁定，则该函数会阻塞直到锁可用。&lt;code&gt;SDL_UnlockMutex&lt;/code&gt;函数用于释放已经锁定的互斥锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_CreateCond/SDL_DestroyCond&lt;/code&gt;
&lt;code&gt;SDL_CreateCond&lt;/code&gt;函数用于创建条件变量，而&lt;code&gt;SDL_DestroyCond&lt;/code&gt;函数用于销毁条件变量。条件变量通常与互斥锁一起使用，用于在线程之间等待某个条件的发生或通知其他线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDL_CondWait/SDL_CondSignal&lt;/code&gt;
&lt;code&gt;SDL_CondWait&lt;/code&gt;函数用于等待条件变量的信号。当线程调用该函数时，它会阻塞并等待条件变量的信号。在等待期间，该函数会释放传入的互斥锁，以允许其他线程修改共享数据。一旦条件变量被另一个线程发送信号，当前线程将重新获取互斥锁并继续执行。&lt;code&gt;SDL_CondSignal&lt;/code&gt;函数用于向等待某个条件的线程发送信号，通知它们条件已经满足，可以继续执行。这个函数通常与&lt;code&gt;SDL_CondWait&lt;/code&gt;配合使用，用于唤醒一个等待该条件的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;播放器线程模型&#34;&gt;播放器线程模型&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-11%2016.50.12.png&#34;
alt=&#34;截屏2024-05-11 16.50.12&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-05-11 16.50.12&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一共有四个线程：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;主线程，主要用于一些参数的检查，事件的处理，视频的渲染，主线程会定时从视频解码队列中取出视频帧。&lt;/li&gt;
&lt;li&gt;第二个线程，解复用线程，在这个线程中会创建一个视频解码线程，紧接着对多媒体文件进行解复用，将视频包存放在视频流队列，将音频包存放在音频流队列中&lt;/li&gt;
&lt;li&gt;第三个线程是视频解码线程，首先去视频流队列中取出一个个视频包，进行解码，解码后的视频帧，存放在解码视频队列。&lt;/li&gt;
&lt;li&gt;最后一个线程是&lt;code&gt;SDL&lt;/code&gt;
在打开音频设备时创建的，在这个线程中，它会调用我们的回调函数，最终时从音频队列中取出一个个音频包，进行解码，解码后就交给声卡。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么要进行重采样？&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SwrContext&lt;/span&gt; *audio_swr_ctx;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是因为我们的音频设备的音频参数是固定的（采样率、通道数、采样大小等等）。这些都是我们已经固定的。也就是我们一旦初始化音频设备以后，这些参数就不能改变了，而在多媒体文件中，他就存在各种各样的音频格式，比如采样大小，有的是32位的，有的是16位的，有的是浮点的，有的是非浮点的。最终放到我们的音频设备中，统一的播放出来，我们应该对音频进行重采样。将我们见到的所有的音频格式统一到一个格式中，也就是我们打开音频设备时定义的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;音视频同步&#34;&gt;音视频同步&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;时间戳&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;PTS (Presentation timestamp)&lt;/code&gt;
：表示在解码视频时应该在特定时间显示帧的时间戳。PTS告诉解码器何时将帧呈现给用户，以确保视频按照正确的顺序和时间显示。PTS通常以时间基为单位（例如，以毫秒为单位）进行表示。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DTS (Decoding timestamp)&lt;/code&gt;：指解码器开始解码帧的时间戳。它指示视频帧何时应该开始解码，以确保在正确的时间呈现帧。DTS通常以时间基为单位（例如，以毫秒为单位）进行表示。
DTS和PTS之间的差异可以表示解码器需要多长时间来解码视频帧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;I (intra) / B (bidirectional) / P (predicted) 帧&lt;/code&gt;
：视频编码中常见的帧类型。它们用于表示视频序列中的不同类型的帧。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;I帧（Intra
Frame）：I帧是视频序列中的关键帧或帧间隔。每个I帧都是独立的，不依赖于其他帧。它包含完整的图像信息，可以作为其他帧的参考点。通常，视频序列的开始和切换点（例如场景变化）会包含I帧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P帧（Predicted
Frame）：P帧是通过对前向参考帧（通常是前一个I帧或P帧）进行运动补偿来编码的。它只包含自身与前一帧之间的差异信息。P帧依赖于之前的帧进行解码，并且可以用来预测未来帧的内容。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B帧（Bidirectional
Frame）：B帧是通过对前后两个参考帧（通常是前一个和后一个I帧或P帧）进行运动补偿来编码的。它包含自身与前后两个参考帧之间的差异信息。B帧通常具有最高的压缩率，因为它可以利用未来和过去帧之间的关联来减少信息冗余。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些帧类型通常在视频编码标准（如H.264 / AVC或H.265 /
HEVC）中使用，并且在压缩视频时起着重要作用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;时间戳顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际帧顺序： &lt;code&gt;I B B P&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;存放帧顺序： &lt;code&gt;I P B B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解码时间戳： &lt;code&gt;1 4 2 3&lt;/code&gt; &lt;code&gt;DTS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;展示时间戳： &lt;code&gt;1 2 3 4&lt;/code&gt; &lt;code&gt;PTS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从哪里获得PTS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AVPacket PTS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AVFrame PTS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;av_frame_get_best_effort_timestamp()&lt;/code&gt; 当
&lt;code&gt;PTS&lt;/code&gt; 无效时，我们可以调用推算出合适的 &lt;code&gt;PTS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;时间基&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tbr&lt;/code&gt; : 帧率
指在视频中每秒显示的帧数。帧速率决定了视频的流畅度，更高的帧速率通常会产生更加流畅的视频效果。通常，帧速率以每秒帧数（fps）的形式表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tbn (time base of stream)&lt;/code&gt;：指流的时间基准（time base of
stream），它表示流中时间单位的基准。在视频处理中，时间单位通常以分数形式表示，例如1/1000秒。这个时间基准用于确定时间戳的单位，以及在视频流中的时间度量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tbc (time base of codec)&lt;/code&gt;：编解码器的时间基准（time base
of
codec），它是指编解码器内部使用的时间单位的基准。与流的时间基准不同，编解码器的时间基准可能与流的时间基准不同，尤其是在处理不同类型的视频或音频流时。编解码器的时间基准用于确定编码器内部时间单位的度量，通常以分数形式表示，例如1/1000秒。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;计算当前帧的 PTS&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PTS = PTS * &lt;span class=&#34;built_in&#34;&gt;av_q2d&lt;/span&gt;(video_stream-&amp;gt;time_base);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;av_q2d&lt;/span&gt;(AVRotional a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a.num / (&lt;span class=&#34;type&#34;&gt;double&lt;/span&gt;)a.den;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;计算下一帧的 PTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;video_clock&lt;/code&gt;：预测的下一帧视频的 &lt;code&gt;PTS&lt;/code&gt;
上一帧的 &lt;code&gt;PTS&lt;/code&gt; 加上 &lt;code&gt;frame_delay&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;frame_delay&lt;/code&gt;：&lt;code&gt;1 / tbr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;audio_clock&lt;/code&gt;：音频当前播放的时间戳&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;音视频同步方式&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;视频同步到音频：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音频同步到视频：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音频和视频都同步到系统时钟：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;视频播放的基本思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般的做法，展示第一帧视频帧后，获得要显示的下一个视频帧的
&lt;code&gt;PTS&lt;/code&gt;
，然后设置一个定时器，当定时器超时后，刷新新的视频帧，如此反复操作。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2024/05/05/mysql/</guid>
            <title>mysql</title>
            <link>https://chnhqz.github.io/2024/05/05/mysql/</link>
            <pubDate>Sun, 05 May 2024 12:52:22 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一sql语句&#34;&gt;一、SQL语句&lt;/h2&gt;
&lt;h3 id=&#34;数据库表操作ddl&#34;&gt;1.数据库表操作（DDL）&lt;/h3&gt;
&lt;p&gt;查询所有数据库&lt;code&gt;SHOW DATABASES;&lt;/code&gt;查询当前数据库&lt;code&gt;SELECTDATABASE();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建
&lt;code&gt;CREATE DATABASE [IF NOT EXISTS] 数据库命 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除&lt;code&gt;DROP DATABASE[IF EXISTS] 数据库名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;USE 数据库名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询数据库中的表&lt;code&gt;show tables;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-02 16.52.02.png&#34; alt=&#34;截屏2024-04-02 16.52.02&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查询表结构&lt;code&gt;DESC 表名;&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2019.53.58.png&#34;
alt=&#34;截屏2024-04-02 19.53.58&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-02 19.53.58&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2020.01.47.png&#34;
alt=&#34;截屏2024-04-02 20.01.47&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-02 20.01.47&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2020.08.51.png&#34;
alt=&#34;截屏2024-04-02 20.08.51&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-02 20.08.51&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-02 20.11.50.png&#34; alt=&#34;截屏2024-04-02 20.11.50&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create table emp(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt; int comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;编号&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  workno varchar(10) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;工号&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name varchar(10) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;姓名&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gender char(1) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;性别&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  age tinyint unsigned comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;年龄&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  idcard char(18) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;身份证号&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  entrydate &lt;span class=&#34;built_in&#34;&gt;date&lt;/span&gt; comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;入职时间&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;员工表&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;表结构修改&#34;&gt;&lt;strong&gt;表结构修改&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;添加字段
&lt;code&gt;ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改字段&lt;code&gt;ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改字段名和字段类型
&lt;code&gt;ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除字段&lt;code&gt;ALTER TABLE 表名 DROP 字段名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改表名&lt;code&gt;ALTER TABLE 表名 RENAME TO 新表名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除表&lt;code&gt;DROP TABLE [IF EXISTS] 表名;&lt;/code&gt;
删除指定表，并重新创建该表 &lt;code&gt;TRUNCATE TABLE 表名;&lt;/code&gt;
这种方式删除，是删除掉整张表的数据，再重新创建该表，等于清空表的数据，留下空表。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 19.20.52.png&#34; alt=&#34;截屏2024-04-08 19.20.52&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dml增删改&#34;&gt;2.DML增删改&lt;/h3&gt;
&lt;p&gt;DML英文全称是Data Manipulation
Language(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。&lt;/p&gt;
&lt;h4 id=&#34;添加数据insert&#34;&gt;1.&lt;strong&gt;添加数据INSERT&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.34.50.png&#34;
alt=&#34;截屏2024-04-08 19.34.50&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-08 19.34.50&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.36.19.png&#34;
alt=&#34;截屏2024-04-08 19.36.19&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-08 19.36.19&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.36.59.png&#34;
alt=&#34;截屏2024-04-08 19.36.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-08 19.36.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 19.38.15.png&#34; alt=&#34;截屏2024-04-08 19.38.15&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;修改数据update&#34;&gt;2.&lt;strong&gt;修改数据UPDATE&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.57.37.png&#34;
alt=&#34;截屏2024-04-08 19.57.37&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-08 19.57.37&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;删除数据delete&#34;&gt;&lt;strong&gt;3.删除数据DELETE&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2020.13.36.png&#34;
alt=&#34;截屏2024-04-08 20.13.36&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-08 20.13.36&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;dql-介绍&#34;&gt;3.DQL-介绍&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2012.01.20.png&#34;
alt=&#34;截屏2024-04-10 12.01.20&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-10 12.01.20&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;DOL英文全称是Data Query
Language(数据查询语言人，数据查询语言，用来查询数据库中表的记录。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 20.53.25.png&#34; alt=&#34;截屏2024-04-08 20.53.25&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本查询&#34;&gt;&lt;strong&gt;1.基本查询&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-09%2012.27.04.png&#34;
alt=&#34;截屏2024-04-09 12.27.04&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-09 12.27.04&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;1.查询指定字段 name, workno, age 返回&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; name, workno, age from emp;				 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.查询返回所有字段&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;在开发的时候尽量不要写通配符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.查询所有员工的工作地址，起别名&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; workaddress from emp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; workaddress as &lt;span class=&#34;string&#34;&gt;&amp;#x27;工作地址&amp;#x27;&lt;/span&gt; from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.查询公司员工的上班地址（不要重复）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; distinct workaddress &lt;span class=&#34;string&#34;&gt;&amp;#x27;工作地址&amp;#x27;&lt;/span&gt; from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;条件查询where&#34;&gt;&lt;strong&gt;2.条件查询（WHERE）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 11.58.31.png&#34; alt=&#34;截屏2024-04-10 11.58.31&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.查询年龄等于 88 的员工&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age = 88;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.查询年龄小于 20 的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age &amp;lt; 88;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.查询年龄小于等于 20 的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age &amp;lt;= 88;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.查询没有身份证号的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; idcard is null;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;5.查询有身份证号的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; idcard is not null;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;6.查询年龄不等于 88 的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age != 88;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;7.查询年龄在 15 岁（包含）到 20
岁（包含）之间的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age &amp;gt;= 15 and age &amp;lt;= 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age between 15 and 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# between and 既包含最小值又包含最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;8.查询性别为 女 且年龄小于 25 岁的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; gender = &lt;span class=&#34;string&#34;&gt;&amp;#x27;女&amp;#x27;&lt;/span&gt; and age &amp;lt; 25;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;9.查询年龄等于 18 或 20 或 40 的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age = 10 or age = 20 or age = 40;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;(18, 20, 40);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;10.查询姓名为两个字的员工的信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;select * from emp where name like &amp;#x27;__&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 两个下划线代表来两个个字符&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;11.查询身份证号最后一位是 X 的员工信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; idcard like &lt;span class=&#34;string&#34;&gt;&amp;#x27;%X&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;聚合函数count-max-min-avg-sum&#34;&gt;&lt;strong&gt;3.聚合函数（COUNT, MAX,
MIN, AVG, SUM）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;聚合函数是指将一列数据作为一个整体，进行纵向计算。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 16.44.40.png&#34; alt=&#34;截屏2024-04-10 16.44.40&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2016.46.02.png&#34;
alt=&#34;截屏2024-04-10 16.46.02&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-10 16.46.02&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;1.统计该企业员工数量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; count(*) from emp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; count(&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;) from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.统计该企业员工的平均年龄&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; avg(age) from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.统计该企业员工的最大年龄&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; max(age) from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.统计该企业员工的最小年龄&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; min(age) from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;5.统计西安地区员工的年龄之和&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(age) from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; workaddress = &lt;span class=&#34;string&#34;&gt;&amp;#x27;西安&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;分组查询group-by&#34;&gt;&lt;strong&gt;4.分组查询（GROUP BY）&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 17.05.18.png&#34; alt=&#34;截屏2024-04-10 17.05.18&#34; style=&#34;zoom:%;&#34; /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2017.06.47.png&#34;
alt=&#34;截屏2024-04-10 17.06.47&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-10 17.06.47&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;1.根据性别分组，统计男性员工 和 女性员工的数量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; count(*) from emp group by gender ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; gender, count(*) from emp group by gender;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.根据性别分组，统计男性员工和女性员工的平均年龄&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; gender, avg(age) from emp gruop by gender;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.查询年龄小于 45
的员工，并根据工作地址分组，获取员工数量大于等于 3
的工作地址&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; workaddress, count(*) from emp &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; age &amp;lt; 45 group by workaddress having count(*) &amp;gt;= 3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;排序查询order-by&#34;&gt;&lt;strong&gt;5.排序查询（ORDER BY）&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2021.18.46.png&#34;
alt=&#34;截屏2024-04-10 21.18.46&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-10 21.18.46&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;1.根据年龄对公司的员工进行升序排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp order by age asc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.根据入职时间，对员工进行降序排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp order by entrydate desc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.根据年龄对公司员工进行升序排序，年龄相同，再按照入职时间进行降序排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp order by age asc, entrydate desc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;分页查询limit&#34;&gt;&lt;strong&gt;6.分页查询（LIMIT）&lt;/strong&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.35.25.png&#34;
alt=&#34;截屏2024-04-11 10.35.25&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 10.35.25&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;1.查询第一页员工数据，每页展示 10 条记录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;limit&lt;/span&gt; 0, 10;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.查询第二页员工数据，每页展示 10 条记录 &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp &lt;span class=&#34;built_in&#34;&gt;limit&lt;/span&gt; 10, 10;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;dql语句执行顺序&#34;&gt;7.DQL语句执行顺序&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.44.07.png&#34;
alt=&#34;截屏2024-04-11 10.44.07&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 10.44.07&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;dcl&#34;&gt;4.DCL&lt;/h3&gt;
&lt;p&gt;DCL（Data Control
Language，数据控制语言），用来管理数据库用户、控制数据库的访问权限。&lt;/p&gt;
&lt;h4 id=&#34;用户管理&#34;&gt;1.用户管理&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.49.01.png&#34;
alt=&#34;截屏2024-04-11 10.49.01&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 10.49.01&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：主机名可以使用 % 通配。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;权限控制&#34;&gt;2.权限控制&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.02.56.png&#34;
alt=&#34;截屏2024-04-11 11.02.56&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 11.02.56&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.04.52.png&#34;
alt=&#34;截屏2024-04-11 11.04.52&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 11.04.52&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;二函数&#34;&gt;二、函数&lt;/h2&gt;
&lt;p&gt;函数是指一段可以直接被另一段程序调用的程序或代码。&lt;/p&gt;
&lt;h3 id=&#34;字符串函数&#34;&gt;1.字符串函数&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.33.01.png&#34;
alt=&#34;截屏2024-04-11 11.33.01&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 11.33.01&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;update emp &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; workno = lpad(workno, 5, &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数值函数&#34;&gt;2.数值函数&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2014.23.41.png&#34;
alt=&#34;截屏2024-04-11 14.23.41&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 14.23.41&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;通过数据库的函数，生成一个六位数的随机验证码。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; rand()*1000000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; round(rand()*1000000, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; lpad(round(rand()*1000000, 0),6, &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;日期函数&#34;&gt;3.日期函数&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.16.40.png&#34;
alt=&#34;截屏2024-04-11 15.16.40&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 15.16.40&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;流程函数&#34;&gt;4.流程函数&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.19.38.png&#34;
alt=&#34;截屏2024-04-11 15.19.38&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 15.19.38&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;查询 emp 表的员工姓名和工作地址（北京/上海-&amp;gt;&amp;gt;&amp;gt; 一线城市，
其它-&amp;gt;&amp;gt;&amp;gt;&amp;gt;二线城市）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; name, （&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; workaddress when &lt;span class=&#34;string&#34;&gt;&amp;#x27;北京&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;一线城市&amp;#x27;&lt;/span&gt; when &lt;span class=&#34;string&#34;&gt;&amp;#x27;上海&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;一线城市&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;二线城市&amp;#x27;&lt;/span&gt; end） as &lt;span class=&#34;string&#34;&gt;&amp;#x27;工作地址&amp;#x27;&lt;/span&gt; from emp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;统计班级各个学员的成绩，展示规则：&amp;gt;=85,展示优秀，&amp;gt;=60展示及格，否则，展示不合格。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.47.51.png&#34;
alt=&#34;截屏2024-04-11 15.47.51&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 15.47.51&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;三约束&#34;&gt;三、约束&lt;/h2&gt;
&lt;p&gt;约束是作用于表中字段上的规则，用于限制存储在表中的数据。保证数据库中数据的正确、有效性和完整性。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.57.06.png&#34;
alt=&#34;截屏2024-04-11 15.57.06&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 15.57.06&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;约束演示&#34;&gt;1.约束演示&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2019.29.38.png&#34;
alt=&#34;截屏2024-04-11 19.29.38&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 19.29.38&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;create table user (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt; int primary key auto_increment,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name varchar(10) not null unique,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  age int check (age &amp;gt; 0 &amp;amp;&amp;amp; age &amp;lt;= 120),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  status char(1) default &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gender char(1),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) comment &lt;span class=&#34;string&#34;&gt;&amp;#x27;用户表&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;外键约束&#34;&gt;2.外键约束&lt;/h3&gt;
&lt;p&gt;外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2020.01.23.png&#34;
alt=&#34;截屏2024-04-11 20.01.23&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-11 20.01.23&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：目前上述的两张表，在数据库层面，并未建立外键关联，所以是无法保证数据的一致性和完整性的&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.34.53.png&#34;
alt=&#34;截屏2024-04-12 10.34.53&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 10.34.53&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.38.36.png&#34;
alt=&#34;截屏2024-04-12 10.38.36&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 10.38.36&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.40.46.png&#34;
alt=&#34;截屏2024-04-12 10.40.46&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 10.40.46&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.43.17.png&#34;
alt=&#34;截屏2024-04-12 10.43.17&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 10.43.17&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;四多表查询&#34;&gt;四、多表查询&lt;/h2&gt;
&lt;h3 id=&#34;多表关系&#34;&gt;1.多表关系&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.52.50.png&#34;
alt=&#34;截屏2024-04-12 10.52.50&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 10.52.50&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.04.18.png&#34;
alt=&#34;截屏2024-04-12 11.04.18&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.04.18&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.06.00.png&#34;
alt=&#34;截屏2024-04-12 11.06.00&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.06.00&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.10.06.png&#34;
alt=&#34;截屏2024-04-12 11.10.06&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.10.06&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.10.28.png&#34;
alt=&#34;截屏2024-04-12 11.10.28&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.10.28&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.12.40.png&#34;
alt=&#34;截屏2024-04-12 11.12.40&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.12.40&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;多表查询概述&#34;&gt;2.多表查询概述&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.19.20.png&#34;
alt=&#34;截屏2024-04-12 11.19.20&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.19.20&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; * from emp, dept &lt;span class=&#34;built_in&#34;&gt;where&lt;/span&gt; emp.dept_id = dept.id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.23.24.png&#34;
alt=&#34;截屏2024-04-12 11.23.24&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.23.24&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;内连接&#34;&gt;3.内连接&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.26.45.png&#34;
alt=&#34;截屏2024-04-12 11.26.45&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.26.45&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.32.17.png&#34;
alt=&#34;截屏2024-04-12 11.32.17&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.32.17&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.33.49.png&#34;
alt=&#34;截屏2024-04-12 11.33.49&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.33.49&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;外连接&#34;&gt;4.外连接&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.35.58.png&#34;
alt=&#34;截屏2024-04-12 11.35.58&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.35.58&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.38.59.png&#34;
alt=&#34;截屏2024-04-12 11.38.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.38.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.41.30.png&#34;
alt=&#34;截屏2024-04-12 11.41.30&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.41.30&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;自连接&#34;&gt;5.自连接&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.49.48.png&#34;
alt=&#34;截屏2024-04-12 11.49.48&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.49.48&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.53.21.png&#34;
alt=&#34;截屏2024-04-12 11.53.21&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.53.21&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.57.09.png&#34;
alt=&#34;截屏2024-04-12 11.57.09&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 11.57.09&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;联合查询&#34;&gt;6.联合查询&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.18.17.png&#34;
alt=&#34;截屏2024-04-12 14.18.17&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 14.18.17&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.20.51.png&#34;
alt=&#34;截屏2024-04-12 14.20.51&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 14.20.51&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;会出现重复结果， 可以直接删除 all &lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.23.43.png&#34;
alt=&#34;截屏2024-04-12 14.23.43&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 14.23.43&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;子查询&#34;&gt;7.子查询&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.25.35.png&#34;
alt=&#34;截屏2024-04-12 14.25.35&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 14.25.35&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。&lt;/p&gt;
&lt;h4 id=&#34;标量子查询&#34;&gt;标量子查询&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.31.52.png&#34;
alt=&#34;截屏2024-04-12 15.31.52&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.31.52&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.34.59.png&#34;
alt=&#34;截屏2024-04-12 15.34.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.34.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.36.59.png&#34;
alt=&#34;截屏2024-04-12 15.36.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.36.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.37.35.png&#34;
alt=&#34;截屏2024-04-12 15.37.35&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.37.35&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;列子查询&#34;&gt;列子查询&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.40.18.png&#34;
alt=&#34;截屏2024-04-12 15.40.18&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.40.18&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.43.23.png&#34;
alt=&#34;截屏2024-04-12 15.43.23&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.43.23&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.46.48.png&#34;
alt=&#34;截屏2024-04-12 15.46.48&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.46.48&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.49.46.png&#34;
alt=&#34;截屏2024-04-12 15.49.46&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 15.49.46&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;行子查询&#34;&gt;行子查询&lt;/h4&gt;
&lt;p&gt;&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.04.38.png&#34;
alt=&#34;截屏2024-04-12 16.04.38&#34; /&gt; &lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.10.30.png&#34;
alt=&#34;截屏2024-04-12 16.10.30&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;表子查询&#34;&gt;表子查询&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.16.11.png&#34;
alt=&#34;截屏2024-04-12 16.16.11&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 16.16.11&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.19.22.png&#34;
alt=&#34;截屏2024-04-12 16.19.22&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 16.19.22&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.27.04.png&#34;
alt=&#34;截屏2024-04-12 16.27.04&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 16.27.04&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;五事务&#34;&gt;五、事务&lt;/h2&gt;
&lt;p&gt;事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。典型案例是银行转账。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.37.59.png&#34;
alt=&#34;截屏2024-04-12 16.37.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 16.37.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意⚠️：默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务操作&#34;&gt;1.事务操作&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.53.43.png&#34;
alt=&#34;截屏2024-04-12 16.53.43&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 16.53.43&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SELECT @@autocommit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# @@autocommit = 1 : 自动提交；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 控制事务，将 @@autocommit 设置为 0 ；当前语句不会直接提交，而是等待 COMMIT 指令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select @@autocommit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set @@autocommit = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 1.查询张三账户余额&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select * from account where name = &amp;#x27;张三&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 2.将张三账户余额-1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;update account set money = money - 1000 where name = &amp;#x27;张三&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 3.将李四账户余额+1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;update account set money = money + 1000 where name = &amp;#x27;张三&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 提交事务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;commit;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2017.21.37.png&#34;
alt=&#34;截屏2024-04-12 17.21.37&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 17.21.37&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;事务四大特性&#34;&gt;2.事务四大特性&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2020.29.10.png&#34;
alt=&#34;截屏2024-04-12 20.29.10&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 20.29.10&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;并发事务问题&#34;&gt;3.并发事务问题&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2020.41.36.png&#34;
alt=&#34;截屏2024-04-12 20.41.36&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-12 20.41.36&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;事务隔离级别&#34;&gt;4.事务隔离级别&lt;/h3&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-13%2010.48.59.png&#34;
alt=&#34;截屏2024-04-13 10.48.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-13 10.48.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-13%2010.52.56.png&#34;
alt=&#34;截屏2024-04-13 10.52.56&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-04-13 10.52.56&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;SESSION 仅仅设置当前会话的的级别，GLOBAL
设置为全部的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;别担心，有一天我们地球的光会到达遥远的星系，在每个星系我们都会再次年轻，我们将永远在一起。&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2024/05/05/linux/linux-md/</guid>
            <title>linux.md</title>
            <link>https://chnhqz.github.io/2024/05/05/linux/linux-md/</link>
            <pubDate>Sun, 05 May 2024 12:26:02 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;linux学习笔记&#34;&gt;Linux学习笔记&lt;/h3&gt;
&lt;p&gt;以下是lInux设备添加v6的脚本&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl -s https://install.zerotier.com | sudo bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd /var/lib/zerotier-one&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rm -rf planet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wget http://blog.nomao.top/planet -O planet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;service zerotier-one restart&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo zerotier-cli join 93caa675b035c9d7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo zerotier-cli set 93caa675b035c9d7 allowGlobal=true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo zerotier-cli set 93caa675b035c9d7 allowDefault=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;linux命令&#34;&gt;2.Linux命令&lt;/h3&gt;
&lt;h4 id=&#34;linux系统的目录结构&#34;&gt;2.1Linux系统的目录结构&lt;/h4&gt;
&lt;p&gt;Linux的目录结构是一个型结构，没有盘符的概念，只有一个根目录/，所有的文件都在它下面。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 11.50.33.png&#34; alt=&#34;截屏2023-12-26 11.50.33&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在Linux系统中，路径之间的层级关系，使用
&lt;code&gt;:/&lt;/code&gt;来表示。Windows则是 &lt;code&gt;:\&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;linux命令入门&#34;&gt;2.2Linux命令入门&lt;/h4&gt;
&lt;h5 id=&#34;linux命令基础&#34;&gt;2.2.1Linux命令基础&lt;/h5&gt;
&lt;p&gt;命令行：即Linux终端（Terminal），是一种命令提示符页面。以春“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令。&lt;/p&gt;
&lt;p&gt;命令：即Linux程序。一个命令就是一个Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化反馈&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 13.16.32.png&#34; alt=&#34;截屏2023-12-26 13.16.32&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;学习Linux就是在命令行界面去熟练的使用Linux的各类命令。&lt;/p&gt;
&lt;p&gt;无论是什么命令，用于什么用途，在Linux中，命令有其通用的形式：&lt;code&gt;command [-options] [parameter]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;comman:d&lt;/code&gt; 命令本身&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-options:&lt;/code&gt;
【可选，非必填】命令的一些选项，可以通过选项控制命令的行为细节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameter:&lt;/code&gt;
【可选，非必填】命令的参数，多数用于命令的指向目标等&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ls -l /home/itheima&lt;/code&gt; ls是命令本身，-l是选项，
/home/itheima是参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;ls命令入门&#34;&gt;2.2.2ls命令入门&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;
命令的作用是列出目录下的内容，语法细节:&lt;code&gt;ls [-a -l -h] [linux路径]&lt;/code&gt;
。当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 14.59.20.png&#34; alt=&#34;截屏2023-12-26 14.59.20&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Linux系统的命令行终端，在启动的时候，默认会加载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的是HOME目录的内容&lt;/li&gt;
&lt;li&gt;HOME目录：每个Linux操作用户在Linux系统的个人账户目录，路径在
:&lt;code&gt;/home/用户名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;ls命令的参数和选项&#34;&gt;2.2.3ls命令的参数和选项&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;
选项，表示：all的意思，即列出全部文件（包含隐藏的文件/文件夹）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;
选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;
选项，表示：以易于阅读的形式，列出文件大小，如K、M、G。注意：&lt;code&gt;-h&lt;/code&gt;
选项必须搭配 &lt;code&gt;-l&lt;/code&gt;一起使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ls命令选项的组合使用 &lt;code&gt;ls -a -l&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;目录切换相关命令cdpwd&#34;&gt;2.3目录切换相关命令（cd/pwd）&lt;/h4&gt;
&lt;h5 id=&#34;cd-切换工作目录&#34;&gt;2.3.1cd 切换工作目录&lt;/h5&gt;
&lt;p&gt;当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工像目录&lt;/p&gt;
&lt;p&gt;我们可以通过cd命令，更改当前所在的工作目录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;命令来自英文：Change Directory&lt;/p&gt;
&lt;p&gt;浯法：cd[Linux路径］&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿&lt;code&gt;cd&lt;/code&gt;命令无需选项，只有参数，表示要切换到哪个目录下&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿cd&lt;/code&gt;命令直接执行，不写参数，表示回到用户的HOME目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;pwd-查看当前工作目录&#34;&gt;2.3.2pwd 查看当前工作目录&lt;/h5&gt;
&lt;p&gt;通过&lt;code&gt;ls&lt;/code&gt;来验证当前的工作目录，其实是不恰当的。&lt;/p&gt;
&lt;p&gt;我们可以通过&lt;code&gt;pwd&lt;/code&gt;命令，来查看当前所在的工作目录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt;命令来自：Print work Directory&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;pwd&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;命令，无选项，无参数，直接输入&lt;code&gt;pwd&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h4
id=&#34;相对路径绝对路径和特殊路径符&#34;&gt;2.4相对路径、绝对路径和特殊路径符&lt;/h4&gt;
&lt;h5 id=&#34;相对路径和绝对路径&#34;&gt;2.4.1相对路径和绝对路径&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;绝对路径：以根目录为起点，描述路径的一种写法，路径描述以&lt;code&gt;/&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以&lt;code&gt;/&lt;/code&gt;开头&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;特殊路径符&#34;&gt;2.4.2特殊路径符&lt;/h5&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.03.10.png&#34; alt=&#34;截屏2023-12-26 17.03.10&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图，当前工作目录处于：&lt;code&gt;/home/itheima/Desktop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;向上回退一级，切换目录到&lt;code&gt;/home/itheima&lt;/code&gt;中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接通过&lt;code&gt;cd&lt;/code&gt;，即可回到HOME目录&lt;/li&gt;
&lt;li&gt;也可以通过特殊路径符来完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊路径符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 表示当前目录，比如：&lt;code&gt;cd ./Desktop&lt;/code&gt;
表示切换到当前目录下的&lt;code&gt;Desktop&lt;/code&gt; 目录内，和
&lt;code&gt;cd Desktop&lt;/code&gt; 效果一致&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt; 表示上一级目录，比如：&lt;code&gt;cd..&lt;/code&gt;
即可切换到上一级目录，&lt;code&gt;cd ../..&lt;/code&gt; 切换到上二级的目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; 表示HOME目录，比如：&lt;code&gt;cd~&lt;/code&gt;
即可切换到HOME目录或&lt;code&gt;cd ~/Desktop&lt;/code&gt;
，切换到HOME内的&lt;code&gt;Desktop&lt;/code&gt; 目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mkdir-命令&#34;&gt;2.5&lt;code&gt;mkdir&lt;/code&gt; 命令&lt;/h4&gt;
&lt;p&gt;通过 &lt;code&gt;mkdir&lt;/code&gt; 命令可以创建新的目录（文件夹）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; 来自英文：Make Directory&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;mkdir [-p] Linux路径&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;
选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️：创建文件夹需要修改权限，确保操作均在HOME目录内，不要在HOME外操作。涉及到权限问题，HOME外无法成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;文件操作命令&#34;&gt;2.6文件操作命令&lt;/h4&gt;
&lt;h5 id=&#34;touch-创建文件&#34;&gt;2.6.1&lt;code&gt;touch&lt;/code&gt; 创建文件&lt;/h5&gt;
&lt;p&gt;可以通过&lt;code&gt;touch&lt;/code&gt; 命令创建文件&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;touch Linux路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt;
命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.46.02.png&#34; alt=&#34;截屏2023-12-26 17.46.02&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文件夹与文件的区别，使用&lt;code&gt;ls -l&lt;/code&gt;
命令，发现文件夹是&lt;code&gt;d&lt;/code&gt;开头，文件是&lt;code&gt;-&lt;/code&gt;开头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;cat-命令查看文件内容&#34;&gt;2.6.2&lt;code&gt;cat&lt;/code&gt;
命令查看文件内容&lt;/h5&gt;
&lt;p&gt;可以通过&lt;code&gt;cat&lt;/code&gt; 查看内容&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;cat Linux路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;
同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.55.17.png&#34; alt=&#34;截屏2023-12-26 17.55.17&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;more-命令查看文件内容&#34;&gt;2.6.3&lt;code&gt;more&lt;/code&gt;
命令查看文件内容&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;more&lt;/code&gt; 命令同样可以查看文件内容，同&lt;code&gt;cat&lt;/code&gt;
不同的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; 是直接将内容全部显示出来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;more&lt;/code&gt; 支持翻页，如果文件内容过多，可以一页页的展示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法：&lt;code&gt;more Linux路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;more&lt;/code&gt;
同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径都可以使用&lt;/p&gt;
&lt;h5 id=&#34;cp-复制文件文件夹&#34;&gt;2.6.4 &lt;code&gt;cp&lt;/code&gt; 复制文件、文件夹&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;cp&lt;/code&gt;
命令可以用于复制文件，&lt;code&gt;cp&lt;/code&gt;命令来自英文单词：copy&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;cp [-r] 参数1 参数2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿&lt;code&gt;-r&lt;/code&gt;选项，可选，用于复制文件夹使用，表示递归&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿参数1&lt;/code&gt;，Linux路径，表示被复制的文件或文件夹&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿参数2&lt;/code&gt;，Linux路径，表示要复制去的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;mv-移动文件文件夹&#34;&gt;2.6.5&lt;code&gt;mv&lt;/code&gt; 移动文件、文件夹&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;mv&lt;/code&gt;命令可以用于移动文件，&lt;code&gt;mv&lt;/code&gt;命令来自英文单词：move&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;mv 参数1 参数2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿&lt;code&gt;参数1&lt;/code&gt;，Linux路径，表示被移动的文件或文件夹&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿参数2&lt;/code&gt;，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;rm-删除文件文件夹&#34;&gt;2.6.6&lt;code&gt;rm&lt;/code&gt; 删除文件、文件夹&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;命令可用于删除文件、文件夹。&lt;code&gt;rm&lt;/code&gt;命令来自英文单词：remove&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;rm [-r -f] 参数1 参数2 . . . . . 参数N&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿同&lt;code&gt;cp&lt;/code&gt;命令一样，&lt;code&gt;-r&lt;/code&gt;选项用于删除文件夹&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;-f&lt;/code&gt;表示force，强制删除（不会弹出提示确认信息）
&lt;ul&gt;
&lt;li&gt;﻿普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示&lt;/li&gt;
&lt;li&gt;﻿所以一般普通用户用不到-选项&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;﻿参数1、参数2、………参数N
表示要州除的文件或文件夹路径，按照空格隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;命令支持通配符&lt;code&gt;*&lt;/code&gt;，用来做模糊匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿符号&lt;code&gt;*&lt;/code&gt; 表示通配符，即匹配任意内容（包含空），示例：&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿test*&lt;/code&gt;，表示匹配任何以&lt;code&gt;test&lt;/code&gt;开头的内容&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;*test&lt;/code&gt;，表示匹配任何以&lt;code&gt;test&lt;/code&gt;结尾的内容&lt;/li&gt;
&lt;li&gt;﻿&lt;code&gt;﻿*test*&lt;/code&gt;，表示匹配任何包含&lt;code&gt;test&lt;/code&gt;的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;
可以通过&lt;code&gt;su -root&lt;/code&gt;，并输入密码&lt;code&gt;123456&lt;/code&gt;
临时切换到&lt;code&gt;root&lt;/code&gt; 用户体验。&lt;/p&gt;
&lt;h5 id=&#34;which-查找命令的程序文件&#34;&gt;2.6.7&lt;code&gt;which&lt;/code&gt;
查找命令的程序文件&lt;/h5&gt;
&lt;p&gt;我们在前面学习到的Linux命令，起始它们的本体就是一个个的二进制可执行程序。和Windows系统中的.exe文件，是一个意思。&lt;/p&gt;
&lt;p&gt;我们可以通过&lt;code&gt;which&lt;/code&gt;命令，查看所使用的一系列命令的程序文件存放在哪里。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;which 要查找的命令&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;find-查找指定文件&#34;&gt;2.6.8&lt;code&gt;find&lt;/code&gt; 查找指定文件&lt;/h5&gt;
&lt;p&gt;语法：&lt;code&gt;find 起始路径 -name “被查找文件名”&lt;/code&gt;
这里查找文件也可以使用通配符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 可以按文件大小查找文件&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;find 起始路径 -size +｜-n [kMG]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+、-&lt;/code&gt; 表示大于和小于&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 表示大小数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kMG&lt;/code&gt;
表示大小单位，&lt;code&gt;k&lt;/code&gt;（小写字母）表示&lt;code&gt;kb&lt;/code&gt;，&lt;code&gt;M&lt;/code&gt;
表示 &lt;code&gt;MB&lt;/code&gt; ，&lt;code&gt;G&lt;/code&gt;表示&lt;code&gt;GB&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 20.14.03.png&#34; alt=&#34;截屏2023-12-27 20.14.03&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;grep-过滤文件内容&#34;&gt;2.6.8&lt;code&gt;grep&lt;/code&gt; 过滤文件内容&lt;/h5&gt;
&lt;p&gt;可以通过&lt;code&gt;grep&lt;/code&gt; 命令，从文件中通过关键字过滤文件行。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;grep [-n] 关键字 文件路径&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项&lt;code&gt;-n&lt;/code&gt;，可选，表示在结果中显示匹配的行的行号&lt;/li&gt;
&lt;li&gt;参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用“”将关键字包围起来。&lt;/li&gt;
&lt;li&gt;参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;wc-统计内容数量&#34;&gt;2.6.9&lt;code&gt;wc&lt;/code&gt; 统计内容数量&lt;/h5&gt;
&lt;p&gt;可以通过&lt;code&gt;wc&lt;/code&gt; 命令统计文件的行数、单词数量等&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;wc [-c -m -l -w] 文件路径&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项，&lt;code&gt;-c&lt;/code&gt;，统计bytes数量&lt;/li&gt;
&lt;li&gt;选项，&lt;code&gt;-m&lt;/code&gt;，统计字符数量&lt;/li&gt;
&lt;li&gt;选项，&lt;code&gt;-l&lt;/code&gt;，统计行数&lt;/li&gt;
&lt;li&gt;选项，&lt;code&gt;-w&lt;/code&gt;，统计单词数量&lt;/li&gt;
&lt;li&gt;参数，&lt;code&gt;文件路径&lt;/code&gt;，被统计的文件，可作为内容输入端口&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;管道符&#34;&gt;2.6.10 &lt;code&gt;管道符&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;管道符的含义是：将管道符左边命令的结果，作为右边命令的输入&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 20.42.07.png&#34; alt=&#34;截屏2023-12-27 20.42.07&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat itheima.txt&lt;/code&gt; 的输出结果（文件内容）&lt;/li&gt;
&lt;li&gt;作为右边&lt;code&gt;grep&lt;/code&gt;命令的输入（被过滤文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;echo-输出内容&#34;&gt;2.6.11 &lt;code&gt;echo&lt;/code&gt; 输出内容&lt;/h5&gt;
&lt;p&gt;可以使用&lt;code&gt;echo&lt;/code&gt;命令在命令行内输出制定内容&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;echo 输出的内容&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需选项，又有一个参试，表示要输出的内容，复杂内容可以用&#34;&#34;包围&lt;/li&gt;
&lt;li&gt;&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-27%2021.06.13.png&#34;
alt=&#34;截屏2023-12-27 21.06.13&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-27 21.06.13&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反引号的作用，我们可以通过将命令用反引号（通常也称之为飘号）`将其包围&lt;/p&gt;
&lt;p&gt;被`包围的内容，会被作为命令执行，而非普通字符。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 21.11.32.png&#34; alt=&#34;截屏2023-12-27 21.11.32&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;tail-跟踪文件更改&#34;&gt;2.6.12 &lt;code&gt;tail&lt;/code&gt; 跟踪文件更改&lt;/h5&gt;
&lt;p&gt;使用&lt;code&gt;tail&lt;/code&gt;命令，可以查看文件尾部内容，跟踪文件的最新更改，&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;tail [-f -num] Linux路径&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数，Linux路径，表示被跟踪的文件路径&lt;/li&gt;
&lt;li&gt;选项，&lt;code&gt;-f&lt;/code&gt;，表示持续跟踪&lt;/li&gt;
&lt;li&gt;选项，&lt;code&gt;-num&lt;/code&gt;，表示查看尾部多少行，不填默认10行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;重定向符使用&#34;&gt;2.6.13 重定向符使用&lt;/h5&gt;
&lt;p&gt;重定向符：&lt;code&gt;&amp;gt;和&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;，将左侧命令的结果，覆盖写入到符号右侧指定的文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;，将左侧命令的结果，追加写入到符号右侧指定的文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 17.08.09.png&#34; alt=&#34;截屏2023-12-28 17.08.09&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;vivim编辑器&#34;&gt;2.7 &lt;code&gt;vi\vim&lt;/code&gt;编辑器&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;vi\vim&lt;/code&gt;是
&lt;code&gt;visual interface&lt;/code&gt;的简称，是Linux中最经典的文本编辑器，同图形化界面中的文本编辑器一样，&lt;code&gt;vi&lt;/code&gt;是命令行下对文本文件进行编辑的绝佳选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim&lt;/code&gt;是&lt;code&gt;vi&lt;/code&gt;的加强版本，兼容&lt;code&gt;vi&lt;/code&gt;的所有指令，不仅能编辑文本，而且还具有&lt;code&gt;shell&lt;/code&gt;程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;vi\vim&lt;/code&gt;编辑器的三种工作模式&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2017.35.03.png&#34;
alt=&#34;截屏2023-12-28 17.35.03&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-28 17.35.03&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;命令：&lt;code&gt;vim 文件路径&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果文件路径表示的文件不存在，那么此命令会用于编辑新文件&lt;/li&gt;
&lt;li&gt;如果文件路径表示的文件存在，那么此命令用于编辑已有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2019.50.59.png&#34;
alt=&#34;截屏2023-12-28 19.50.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-28 19.50.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;通过&lt;code&gt;vi\vim&lt;/code&gt;命令编辑文件，会打开一个新的窗口，此时这个窗口就是，命令窗口，命令模式是&lt;code&gt;vim&lt;/code&gt;编辑器的入口和出口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入&lt;code&gt;vim&lt;/code&gt;编辑器会进入命令模式&lt;/li&gt;
&lt;li&gt;通过命令模式输入键盘指令，可以进入输入模式&lt;/li&gt;
&lt;li&gt;输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;在当前光标位置进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;在当前光标位置 之后 进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;在当前行的开头，进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;在当前行的结尾，进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;在当前光标下一行进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;命令模式&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;在当前光标上一行进入输入模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;输入模式&lt;/td&gt;
&lt;td&gt;esc&lt;/td&gt;
&lt;td&gt;任何情况下输入esc 都能回到命令模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2021.17.03.png&#34;
alt=&#34;截屏2023-12-28 21.17.03&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-28 21.17.03&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2022.19.15.png&#34;
alt=&#34;截屏2023-12-28 22.19.15&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-28 22.19.15&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;linux用户和权限&#34;&gt;3.Linux用户和权限&lt;/h3&gt;
&lt;h4 id=&#34;linux的root用户&#34;&gt;3.1.Linux的root用户&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;root用户（超级管理员）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Linux系统中，拥有最大权限的账户名为：&lt;code&gt;root&lt;/code&gt;（超级管理员）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 22.53.06.png&#34; alt=&#34;截屏2023-12-28 22.53.06&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;切换root用户&lt;/p&gt;
&lt;p&gt;命令：&lt;code&gt;su - root&lt;/code&gt; 本机 root 密码 与 开机密码一致。&lt;/p&gt;
&lt;p&gt;普通用户的权限，一般在其HOME目录内是不受限的，一旦出了
HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;su&lt;/code&gt; 和 &lt;code&gt;exit&lt;/code&gt; 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;su [-] [用户名]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-符号是可选的，表示是否在切换用户后加载环境变量（后续讲解），建议带上&lt;/li&gt;
&lt;li&gt;参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root&lt;/li&gt;
&lt;li&gt;切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl+d&lt;/li&gt;
&lt;li&gt;使用普通用户，切换到其它用户需要输入密码，如切换到root用户&lt;/li&gt;
&lt;li&gt;使用root用户切换到其它用户，无需密码，可以直接切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sudo&lt;/code&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我们得知root密码的时候，可以通过&lt;code&gt;su&lt;/code&gt;
命令切换到root得到最大权限，但是不建议长期使用root用户，避免带来系统损坏。&lt;/p&gt;
&lt;p&gt;我们可以使用&lt;code&gt;sudo&lt;/code&gt;命令，为普通的命令授权，临时以root身份执行。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;sudo 其他命令&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在其他命令之前，带上 &lt;code&gt;sudo&lt;/code&gt;
，既可为这一条命令临时赋予root授权&lt;/li&gt;
&lt;li&gt;但是并不是所有用户，都有权利使用 &lt;code&gt;sudo&lt;/code&gt;
，我们需要为普通用户配置&lt;code&gt;sudo&lt;/code&gt;认证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为普通用户配置sudo认证&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;切换到root用户，执行&lt;code&gt;visudo&lt;/code&gt;命令，会自动通过&lt;code&gt;vi&lt;/code&gt;编辑器打开，&lt;code&gt;/etc/sudoers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在文件的最后添加：&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 23.16.24.png&#34; alt=&#34;截屏2023-12-28 23.16.24&#34; style=&#34;zoom:50%;&#34; /&gt;其中最后的&lt;code&gt;NOPASSWD:ALL&lt;/code&gt;
表示使用&lt;code&gt;sudo&lt;/code&gt;命令，无需输入密码&lt;/li&gt;
&lt;li&gt;最后通过 &lt;code&gt;wq&lt;/code&gt;保存&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;用户用户组&#34;&gt;3.2.用户、用户组&lt;/h4&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2023.29.43.png&#34;
alt=&#34;截屏2023-12-28 23.29.43&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-28 23.29.43&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Linux中关于权限的管控级别有2个级别，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对用户的权限控制&lt;/li&gt;
&lt;li&gt;针对用户组的权限控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。所以，我们需要学习在Linux中进行用户、用户组管理的基础命令，为后面学习权限控制打下基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户组管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下命令需root用户执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建用户组 &lt;code&gt;groupadd 用户组名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除用户组&lt;code&gt;groupdel 用户组名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下命令需root用户执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建用户 &lt;code&gt;useradd [-g -d] 用户名&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;﻿选项：&lt;code&gt;-g&lt;/code&gt;指定用户的组，不指定&lt;code&gt;-g&lt;/code&gt;，会创建同名组并自动加入，指定&lt;code&gt;-g&lt;/code&gt;需要组己经存在，如己存在同名组，必须使用&lt;code&gt;-g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;﻿选项：&lt;code&gt;-d&lt;/code&gt;指定用户&lt;code&gt;HOME路径&lt;/code&gt;，不指定，&lt;code&gt;HOME&lt;/code&gt;目录默认在：&lt;code&gt;/home/用户名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;删除用户 &lt;code&gt;userdel [-r] 用户名&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;选项：&lt;code&gt;-r&lt;/code&gt;，删除用户的&lt;code&gt;HOME&lt;/code&gt;目录，不使用
&lt;code&gt;-r&lt;/code&gt;，删除用户时，&lt;code&gt;HOME&lt;/code&gt;目录保留&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;查看用户所属组 &lt;code&gt;id [用户名]&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;参数：用户名，被查看的用户，如果不提供则查看自身&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修改用户所属组&lt;code&gt;usermod -aG 用户组 用户名&lt;/code&gt;
，将指定用户加入指定用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;getent&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;getent&lt;/code&gt; 命令，可以查看当前系统中有哪些用户。&lt;/p&gt;
&lt;p&gt;语法 &lt;code&gt;getent passwd&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2000.20.13.png&#34;
alt=&#34;截屏2023-12-29 00.20.13&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 00.20.13&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-29 00.21.25.png&#34; alt=&#34;截屏2023-12-29 00.21.25&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;查看权限控制信息&#34;&gt;3.3.查看权限控制信息&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;认知权限信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;ls -l&lt;/code&gt;可以以列表形式查看内容，并显示权限细节&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-29 00.24.17.png&#34; alt=&#34;截屏2023-12-29 00.24.17&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序号1，表示文件、文件夹的权限控制信息&lt;/li&gt;
&lt;li&gt;序号2，表示文件、文件夹所属用户&lt;/li&gt;
&lt;li&gt;序号3，表示文件、文件夹所属用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解析序号1，权限细节，权限细节总共分为10个槽位&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2000.31.57.png&#34;
alt=&#34;截屏2023-12-29 00.31.57&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 00.31.57&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;rwx&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r表示读权限&lt;/li&gt;
&lt;li&gt;w表示写权限&lt;/li&gt;
&lt;li&gt;x表示执行权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对文件、文件夹的不同，rwx的含义有细微差别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r，针对文件可以查看文件内容
&lt;ul&gt;
&lt;li&gt;针对文件夹，可以查看文件夹内容，如&lt;code&gt;ls&lt;/code&gt;命令&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;w，针对文件表示可以修改此文件
&lt;ul&gt;
&lt;li&gt;针对文件夹，可以在文件夹内：创建、删除、改名等操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;x，针对文件表示可以将文件作为程序执行
&lt;ul&gt;
&lt;li&gt;针对文件夹，表示可以更改工作目录到此文件夹，即&lt;code&gt;cd&lt;/code&gt;进入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;chmod命令&#34;&gt;3.4.&lt;code&gt;chmod&lt;/code&gt;命令&lt;/h4&gt;
&lt;p&gt;我们可以使用&lt;code&gt;chmod&lt;/code&gt;命令，修改文件、文件夹的权限信息。&lt;/p&gt;
&lt;p&gt;注意⚠️，只有文件、文件夹的所属用户或root用户可以修改&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;chmod [-R] 权限 文件或文件夹&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项：&lt;code&gt;-R&lt;/code&gt; ，对文件夹内的全部内容应用同样的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.13.16.png&#34;
alt=&#34;截屏2023-12-29 01.13.16&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 01.13.16&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.25.39.png&#34;
alt=&#34;截屏2023-12-29 01.25.39&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 01.25.39&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;命令：&lt;code&gt;chmod [-R] *** 文件、文件夹&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;chown-命令&#34;&gt;3.5.&lt;code&gt;chown&lt;/code&gt; 命令&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;chown&lt;/code&gt;
命令，可以修改文件、文件夹的所属用户和用户组&lt;/p&gt;
&lt;p&gt;普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;chown [-R] [用户][:][用户组] 文件或文件夹&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项，&lt;code&gt;-R&lt;/code&gt;
，同&lt;code&gt;chmod&lt;/code&gt;，对文件夹内全部内容应用相同规则&lt;/li&gt;
&lt;li&gt;选项，用户，修改所属用户&lt;/li&gt;
&lt;li&gt;选项，用户组，修改所属用户组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt; 用于分隔用户和用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.35.41.png&#34;
alt=&#34;截屏2023-12-29 01.35.41&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 01.35.41&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;linux操作&#34;&gt;4.Linux操作&lt;/h3&gt;
&lt;h4 id=&#34;各类小技巧快捷键&#34;&gt;4.1.各类小技巧快捷键&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ctrl+c&lt;/code&gt;强制停止&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux某些程序的运行，如果想要强制停止它，可以使用快捷键&lt;code&gt;ctrl+c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令输入错误，也可以通过快捷键&lt;code&gt;ctrl+c&lt;/code&gt;，退出当前输入，重新输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ctrl+d&lt;/code&gt;退出或登出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过快捷键：&lt;code&gt;ctrl+d&lt;/code&gt;，退出账户的登录&lt;/li&gt;
&lt;li&gt;或者退出某些特定程序的专属页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⚠️：不能用于退出&lt;code&gt;vi/vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;history&lt;/code&gt;历史命令搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过&lt;code&gt;history&lt;/code&gt;命令，查看历史输入过的命令&lt;/li&gt;
&lt;li&gt;可以通过：&lt;code&gt;!&lt;/code&gt;命令前缀，自动执行上一次匹配前缀的命令&lt;/li&gt;
&lt;li&gt;可以通过快捷键：&lt;code&gt;ctrl+r&lt;/code&gt;，输入内容去匹配历史命令
&lt;ul&gt;
&lt;li&gt;如果搜索到的内容是你需要的，那么：
&lt;ul&gt;
&lt;li&gt;回车键可以直接执行&lt;/li&gt;
&lt;li&gt;键盘左右键，可以得到此命令（不执行）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;光标移动快捷键&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl+a&lt;/code&gt;，跳到命令开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+e&lt;/code&gt;，跳到命令结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+键盘左键&lt;/code&gt; ，向左跳一个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+键盘右键&lt;/code&gt;，向右跳一个单词&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软件安装&#34;&gt;4.2.软件安装&lt;/h4&gt;
&lt;h5 id=&#34;yum为centos系统安装软件&#34;&gt;4.2.1.
&lt;code&gt;yum&lt;/code&gt;为CentOS系统安装软件&lt;/h5&gt;
&lt;p&gt;操作系统安装软件有许多方式，一般分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载安装包自行安装&lt;/li&gt;
&lt;li&gt;系统内应用商店安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yum命令&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum&lt;/code&gt;:RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;yum [-y] [install | remove | search] 软件名称&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项：&lt;code&gt;-y&lt;/code&gt;，自动确认，无需手动确认安装或卸载过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install&lt;/code&gt;：安装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt;：卸载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;：搜素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yum&lt;/code&gt;命令需要root权限，可以&lt;code&gt;su&lt;/code&gt;切换到root，或使用&lt;code&gt;sudo&lt;/code&gt;提权。&lt;code&gt;yum&lt;/code&gt;命令需要联网。&lt;/p&gt;
&lt;h5 id=&#34;apt为ubuntu安装软件&#34;&gt;4.2.2.&lt;code&gt;apt&lt;/code&gt;为Ubuntu安装软件&lt;/h5&gt;
&lt;p&gt;前面学习的各类Linux命令，都是通用的。但是软件安装，CentOs系统和Ubuntu是使用不同的包管理器。centos使用yum管理器，Ubuntu使用apt管理器通过前面学习的WSL环境，我们可以得到Ubuntu运行环境。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;apt [-y] [install | remove | search] 软件名称&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用法和&lt;code&gt;yum&lt;/code&gt;一致，同样需要root杈限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿&lt;code&gt;apt install wget&lt;/code&gt;, 安装wget&lt;/li&gt;
&lt;li&gt;﻿﻿&lt;code&gt;apt remove wget&lt;/code&gt;,移除wget&lt;/li&gt;
&lt;li&gt;﻿﻿&lt;code&gt;apt search wget&lt;/code&gt;,搜索wget&lt;/li&gt;
&lt;/ul&gt;
&lt;h4
id=&#34;systemctl控制软件启动关闭&#34;&gt;4.3.&lt;code&gt;systemctl&lt;/code&gt;控制软件启动关闭&lt;/h4&gt;
&lt;p&gt;Linux系统很多软件(内置或第三方）均支持使用systemct命令控制：启动、停止、开机自启。能够被systemctl管理的软件，一般也称之为：服务。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;systemctl start | stop | status | enable | disable 服务名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start 启动&lt;/li&gt;
&lt;li&gt;stop 关闭&lt;/li&gt;
&lt;li&gt;status 查看状态&lt;/li&gt;
&lt;li&gt;enable 开启开机自启&lt;/li&gt;
&lt;li&gt;disable 关闭开机自启&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了内置的服务外，部分第三方软件安装后，如果它们内部有服务，也可以通过&lt;code&gt;systemctl&lt;/code&gt;进行控制。&lt;/p&gt;
&lt;h4 id=&#34;ln命令创建软链接&#34;&gt;4.4.&lt;code&gt;ln&lt;/code&gt;命令创建软链接&lt;/h4&gt;
&lt;p&gt;在系统中创建软链接，可以将文件、文件夹链接到其它位置。&lt;/p&gt;
&lt;p&gt;类似Windows系统中的《快捷方式》&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;In -s 参数1 参数2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;﻿-s&lt;/code&gt;选项，创建软连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;﻿参数1&lt;/code&gt;：被链接的文件或文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;﻿参数2&lt;/code&gt;：要链接去的目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿&lt;code&gt;In -s /etc/yum.conf ~/yum.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;﻿﻿&lt;code&gt;﻿﻿In -s /etc/yum ~/yum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.10.21.png&#34;
alt=&#34;截屏2023-12-29 15.10.21&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 15.10.21&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;ip地址和主机名&#34;&gt;4.5.IP地址和主机名&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯&lt;/p&gt;
&lt;p&gt;IP地址主要有2个版本，V4版本和V6版本（V5很少用，课程暂不涉及）&lt;/p&gt;
&lt;p&gt;IPV4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址&lt;/p&gt;
&lt;p&gt;可以通过命令：&lt;code&gt;ifconfig&lt;/code&gt;，
查看本机的ip地址，如无法使用&lt;code&gt;ifconfig&lt;/code&gt;命令，可以安装：&lt;code&gt;yum-y install net-tools&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.23.44.png&#34;
alt=&#34;截屏2023-12-29 15.23.44&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 15.23.44&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;特殊IP地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; ，这个IP地址用于指代本机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;，特殊IP地址
&lt;ul&gt;
&lt;li&gt;可以用来指代本机&lt;/li&gt;
&lt;li&gt;可以在端口绑定中用来确定绑定关系&lt;/li&gt;
&lt;li&gt;在一些IP地址限制中，表示所有IP的意思，如放行规则设置为&lt;code&gt;0.0.0.0&lt;/code&gt;，表示允许任意IP访问。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;域名解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IP地址实在是难以记忆，有没有什么办法可以通过主机名或替代的字符地址去代替数宇化的IP地址呢？&lt;/p&gt;
&lt;p&gt;实际上，我们一直都是通过宇符化的地址去访问服务器，很少指定IP地址&lt;/p&gt;
&lt;p&gt;比如，我们在浏览器内打开：www.baidu.com，会打开百度的网址&lt;/p&gt;
&lt;p&gt;其中，www.baidu.com，是百度的网址，我们称之为：域名&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.50.17.png&#34;
alt=&#34;截屏2023-12-29 15.50.17&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 15.50.17&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;固定IP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当前我们虛拟机的Linux操作系统，其1P地址是通过DHGP服务获取的。&lt;/p&gt;
&lt;p&gt;DHCP：动态获取(P地址，即每汉重启设备后都会获取一次，可能导致1卩地址频繁变更&lt;/p&gt;
&lt;p&gt;原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变化我们就要频繁修改适配很麻&lt;/p&gt;
&lt;p&gt;烦&lt;/p&gt;
&lt;p&gt;原因2：在刚刚我们配置了虚拟机IP地址和主机名的映射，如果1P频繁更改，我们也需要频繁更新映射关系&lt;/p&gt;
&lt;p&gt;综上所述，我们需要1P地址固定下来，不要变化了。&lt;/p&gt;
&lt;h4 id=&#34;网络请求和下载&#34;&gt;4.6.网络请求和下载&lt;/h4&gt;
&lt;p&gt;可以通过&lt;code&gt;ping&lt;/code&gt;命令，检查指定的网络服务器是否是可连通状态&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;ping [-c num] ip或主机名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项：&lt;code&gt;-c&lt;/code&gt;，检查的次数，不使用&lt;code&gt;-c&lt;/code&gt;选项，将无限次数持续检查&lt;/li&gt;
&lt;li&gt;参数：&lt;code&gt;-ip或主机名&lt;/code&gt;
，被检查的服务器的ip地址或主机名地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wget是非交互式的文件下载器，可以在命令行内下载网络文件&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;wget [-b] url&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿选项：&lt;code&gt;-b&lt;/code&gt;，可选，后台下载，会将日志写入到当前工作目录的wget-log文件&lt;/li&gt;
&lt;li&gt;﻿参数：&lt;code&gt;url&lt;/code&gt;，下载链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载apache-hadoop
3.3.0版本：&lt;code&gt;wget http://archive.apache.org/ dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2016.50.51.png&#34;
alt=&#34;截屏2023-12-29 16.50.51&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 16.50.51&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在后台下载：&lt;code&gt;wget -b http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;tail&lt;/code&gt;命令可以监控后台下载进度：&lt;code&gt;tail -f wget-log&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;可以发送&lt;code&gt;http&lt;/code&gt;网络请求，可用于：下载文件、获取信息等&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;curl [-O] url&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选项：&lt;code&gt;-O&lt;/code&gt;，用于下载文件，当&lt;code&gt;url&lt;/code&gt;是下载链接时，可以使用此选项保存文件&lt;/li&gt;
&lt;li&gt;参数：&lt;code&gt;url&lt;/code&gt;，要发起请求的网络地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网络传输&#34;&gt;4.7.网络传输&lt;/h4&gt;
&lt;p&gt;端口&lt;/p&gt;
&lt;p&gt;端口，是设备与外界通讯交流的出入口。端口可以分为：物理端口和虛拟端口两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理端口：叉可称之为接口，是可见的端口，如USB接口，尺J45网口，HDM端口等&lt;/li&gt;
&lt;li&gt;虛拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.01.09.png&#34;
alt=&#34;截屏2023-12-29 20.01.09&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 20.01.09&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;端口（虚拟）&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.03.36.png&#34;
alt=&#34;截屏2023-12-29 20.03.36&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 20.03.36&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;如上图所示，两台计算机可以通过IP地址来进行互相之间的访问，但是，两台计算机之间的服务之间如何进行互相访问？如果只通过IP地址，那么就不太精确，所以我们可以通过虚拟出来的端口来进行访问。&lt;/p&gt;
&lt;p&gt;Linux系统是一个超大号小区，可以支持65535个端口，这6万多个端口分为3类进行使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公认端口：1～1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不要占用这个范围的端口&lt;/li&gt;
&lt;li&gt;注册端口：1024～49151，通常可以随意使用，用于松散的绑定一些程序、服务&lt;/li&gt;
&lt;li&gt;动态端口：49152～65535，通常不会固定绑定程序，二十当程序对外进行网络链接时，用于临时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看端口占用&lt;/p&gt;
&lt;p&gt;可以通过Linux命令去查看端口的占用情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;nmap&lt;/code&gt;命令，安装&lt;code&gt;nmap:yum -y install nmap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法：&lt;code&gt;nmap 被查看的IP地址&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;netstat&lt;/code&gt;命令，查看指定端口的占用情况&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;netstat -anp|grep 端口号&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.31.34.png&#34;
alt=&#34;截屏2023-12-29 20.31.34&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 20.31.34&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;进程管理&#34;&gt;4.8.进程管理&lt;/h4&gt;
&lt;p&gt;程序运行在操作系统中，是被操作系统所管理的。&lt;/p&gt;
&lt;p&gt;为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程&lt;/p&gt;
&lt;p&gt;并会为每一个进程都分配一个独有的：进程1D（进程号）&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2021.51.55.png&#34;
alt=&#34;截屏2023-12-29 21.51.55&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 21.51.55&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.07.06.png&#34;
alt=&#34;截屏2023-12-29 22.07.06&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.07.06&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在Linux中，可以通过&lt;code&gt;kill&lt;/code&gt;命令关闭进程。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;kill [-9] 进程ID&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选项：&lt;code&gt;-9&lt;/code&gt;，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。&lt;/p&gt;
&lt;h4 id=&#34;主机状态监控&#34;&gt;4.9.主机状态监控&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;查看系统资源占用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;top&lt;/code&gt;命令查看CPU、内存使用情况，类似Windows的任务管理器。默认每5秒刷新一次，语法：直接输入&lt;code&gt;top&lt;/code&gt;即可。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.24.51.png&#34;
alt=&#34;截屏2023-12-29 22.24.51&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.24.51&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.30.16.png&#34;
alt=&#34;截屏2023-12-29 22.30.16&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.30.16&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.32.06.png&#34;
alt=&#34;截屏2023-12-29 22.32.06&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.32.06&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.37.39.png&#34;
alt=&#34;截屏2023-12-29 22.37.39&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.37.39&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;磁盘信息监控&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;df&lt;/code&gt;命令，可以查看磁盘的使用情况&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;df [-h]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选项：&lt;code&gt;-h&lt;/code&gt; ，以更加人性化的单位显示&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.48.24.png&#34;
alt=&#34;截屏2023-12-29 22.48.24&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.48.24&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.49.59.png&#34;
alt=&#34;截屏2023-12-29 22.49.59&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.49.59&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;网络状态监控&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;sar&lt;/code&gt;命令查看网络的相关统计（&lt;code&gt;sar&lt;/code&gt;命令非常复杂，这里仅简单用于统计网络）&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;sar -n DEV nums1 num2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选项：&lt;code&gt;-n&lt;/code&gt;，查看网络，&lt;code&gt;DEV&lt;/code&gt;表示查看网络接口，&lt;code&gt;num1&lt;/code&gt;：刷新间隔（不填就查看一次结束）,&lt;code&gt;num2&lt;/code&gt;：查看次数（不填无限次数）&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.55.30.png&#34;
alt=&#34;截屏2023-12-29 22.55.30&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2023-12-29 22.55.30&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&#34;环境变量&#34;&gt;4.10.环境变量&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;环境变量的作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在讲解which命令的时候，我们知道使用的一系列命令其实本质上就是一个个的可执行程序。比如，cd命令的本体就是：&lt;code&gt;/usr/bin/cd&lt;/code&gt;
这个程序文件。&lt;/p&gt;
&lt;p&gt;那么为什么，无论当前工作目录在哪里，都能够执行:&lt;code&gt;/usr/bin/cd&lt;/code&gt;
这个程序呢？这就是环境变量的作用。&lt;/p&gt;
&lt;p&gt;环境变量是操作系统(windows、Linux、Mac)在运行的时候，记录的一些关键性信息，用以辅助系统运行。在Linux系统中执行：env命令即可查看当前系统中记录的环境变量环境变量是一种Keyvalue型结构，即名称和值，如下图：&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.03.30.png&#34;
alt=&#34;截屏2024-01-01 14.03.30&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-01-01 14.03.30&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;无论当前工作目录是什么，都能执行&lt;code&gt;/usr/bin/cd&lt;/code&gt;这个程序，这个就是借助环境变量中&lt;code&gt;PATH&lt;/code&gt;这个项目的值来做到的。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.06.32.png&#34;
alt=&#34;截屏2024-01-01 14.06.32&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-01-01 14.06.32&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt;记录了系统中执行任何命令的搜索路径，如上图记录了（路径之间以&lt;code&gt;:&lt;/code&gt;隔开）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/sbin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/sbin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/itheima/.local/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/itheima/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体。比如要执行&lt;code&gt;cd&lt;/code&gt;命令，就从第二个目录&lt;code&gt;/usr/bin&lt;/code&gt;中搜索到了&lt;code&gt;cd&lt;/code&gt;命令，并执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$&lt;/code&gt;符号的作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Linux系统中，&lt;code&gt;$&lt;/code&gt;符号被用于取&#34;变量&#34;的值。环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。取得环境变量的值就可以通过语法：&lt;code&gt;$环境变量名&lt;/code&gt;来取得。&lt;/p&gt;
&lt;p&gt;比如：&lt;code&gt;echo $PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就可以取得&lt;code&gt;PATH&lt;/code&gt;这个环境变量的值，并通过&lt;code&gt;echo&lt;/code&gt;语句输出出来。&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.18.49.png&#34;
alt=&#34;截屏2024-01-01 14.18.49&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-01-01 14.18.49&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;又或者：&lt;code&gt;echo $&amp;#123;PATH&amp;#125;ABC&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.19.22.png&#34;
alt=&#34;截屏2024-01-01 14.19.22&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-01-01 14.19.22&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;当和其他内容混合在一起的时候，可以通过&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;来标注取的变量是谁。
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.26.56.png&#34;
alt=&#34;截屏2024-01-01 14.26.56&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义环境变量PATH&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;环境变量PATH这个项目里面记录了系统执行命令的搜索路径。这些搜索路径我们也可以自行添加到PATH中去。&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿在当前HOME目录内创建文件夹，myenv，在文件夹内创建文件mkhaha&lt;/li&gt;
&lt;li&gt;﻿通过vim编辑器，在mkhaha文件内填入：echo 哈哈哈哈哈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行&lt;/p&gt;
&lt;p&gt;修改PATH的值&lt;/p&gt;
&lt;p&gt;临时修改PATH:export
PATH=$PATH：/home/itheima/myenv，再次执行mkhaha，无论在哪里都能执行或格expotPATI=PATH:/om管里面退录的邊氁瑞的瘦缘路径文件中去&lt;/p&gt;
&lt;h4 id=&#34;linux文件的压缩和解压&#34;&gt;4.11.Linux文件的压缩和解压&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;压缩格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;市面上有非常多的压缩格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zip格式：Linux、Windows、macOS，常用&lt;/li&gt;
&lt;li&gt;7zip：Windows系统常用&lt;/li&gt;
&lt;li&gt;rar：Windows系统常用&lt;/li&gt;
&lt;li&gt;tar：Linux、MacOS常用&lt;/li&gt;
&lt;li&gt;gzip：Linux、MacOS常用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;tar&lt;/code&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux和Mac系统常用有2种压缩格式，后级名分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar&lt;/code&gt;，称之为&lt;code&gt;tarball&lt;/code&gt;，归档文件，即简单的将文件组装到一个&lt;code&gt;.tar&lt;/code&gt;的文件内，并没有太多文件体积的减少，仅仅是简单的封装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gz&lt;/code&gt;,也常见为,&lt;code&gt;.tar.gz&lt;/code&gt;,&lt;code&gt;gzip&lt;/code&gt;格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这两种格式，使用&lt;code&gt;tar&lt;/code&gt;命令均可以进行压缩和解压缩的操作&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;tar [-c -v -x -f -z -C〕参数1参数2 ... 参数N&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;-c&lt;/code&gt;，创建压缩文件，用于压缩模式&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;﻿-v&lt;/code&gt;,显示压缩、解压过程，用于查看进度&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;-x&lt;/code&gt;，解压模式&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;-f&lt;/code&gt;，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;-z,gzip&lt;/code&gt;模式，不使用-z就是普通的tarball格式&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;﻿&lt;code&gt;-C&lt;/code&gt; 选择解压的目的地，用于解压模式&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;tar命令压缩&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar&lt;/code&gt;的常用组合为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar -cvf test.tar 1 1.txt 2.txt 3.txt&lt;/code&gt;
将&lt;code&gt;1.txt 2.txt 3.txt&lt;/code&gt;压缩到&lt;code&gt;test.tar&lt;/code&gt;文件内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -zcvf test.tar.gz 1.txt 2.txt 3.txt&lt;/code&gt;将&lt;code&gt;1.txt 2.txt 3.txt&lt;/code&gt;压缩到&lt;code&gt;test.tar.gz&lt;/code&gt;文件内，使用&lt;code&gt;gzip&lt;/code&gt;模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⚠️注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;选项如果使用，一般处于选项的第一位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;则必须在最后一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;tar&lt;/code&gt;解压&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用的&lt;code&gt;tar&lt;/code&gt;解压组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar -xvf test.tar&lt;/code&gt; 解压&lt;code&gt;test.tar&lt;/code&gt;
，将文件解压至当前目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -xvf test.tar -C /home/itheima&lt;/code&gt;
解压&lt;code&gt;test.tar&lt;/code&gt;，将文件解压至指定目录
(&lt;code&gt;/home/itheima&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -zxvf test.tar.gz -C /home/itheima&lt;/code&gt;
以&lt;code&gt;Gzip&lt;/code&gt; 模式解压
&lt;code&gt;test.tar.gz&lt;/code&gt;，将文件解压至指定目录内(&lt;code&gt;/home/itheima&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;zip&lt;/code&gt;命令压缩文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;zip&lt;/code&gt;命令，压缩文件为&lt;code&gt;zip&lt;/code&gt;压缩包&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;zip [-r] 参数1 参数2 ... 参数N&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;•&lt;code&gt;-r&lt;/code&gt;，被压缩的包含文件夹的时候，需要使用&lt;code&gt;-r&lt;/code&gt;选项，和&lt;code&gt;rm&lt;/code&gt;、&lt;code&gt;cp&lt;/code&gt;等命令的&lt;code&gt;-r&lt;/code&gt;效果一致&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;• &lt;code&gt;zip test.zip a.txt b.txt c.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;a.txt b.txt c.txt&lt;/code&gt;压缩到&lt;code&gt;test.zip&lt;/code&gt;文件内&lt;/p&gt;
&lt;p&gt;•&lt;code&gt;zip -r test.zip test itheima a.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;test、itheima&lt;/code&gt;两个文件夹和&lt;code&gt;a.tx&lt;/code&gt;t文件，压缩到&lt;code&gt;test.zip&lt;/code&gt;文件内&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&#34;/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2019.57.45.png&#34;
alt=&#34;截屏2024-01-01 19.57.45&#34; /&gt;
&lt;figcaption aria-hidden=&#34;true&#34;&gt;截屏2024-01-01 19.57.45&lt;/figcaption&gt;
&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2023/06/08/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-1/</guid>
            <title>论文阅读</title>
            <link>https://chnhqz.github.io/2023/06/08/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-1/</link>
            <pubDate>Thu, 08 Jun 2023 14:26:00 +0800</pubDate>
            <description><![CDATA[ 
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2023/06/07/test/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</guid>
            <title>我的第一篇博客文章</title>
            <link>https://chnhqz.github.io/2023/06/07/test/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</link>
            <pubDate>Wed, 07 Jun 2023 18:34:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;morning&lt;/li&gt;
&lt;li&gt;niha&lt;/li&gt;
&lt;li&gt;hell&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[a_1\]&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2023/06/07/test/hello-world/</guid>
            <title>Hello World</title>
            <link>https://chnhqz.github.io/2023/06/07/test/hello-world/</link>
            <pubDate>Wed, 07 Jun 2023 18:29:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very
first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for
more info. If you get any problems when using Hexo, you can find the
answer in &lt;a
href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or
you can ask me on &lt;a
href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;hello ### Create a new post&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a
href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;run-server&#34;&gt;Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a
href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a
href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://chnhqz.github.io/2023/05/22/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
            <title></title>
            <link>https://chnhqz.github.io/2023/05/22/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
            <pubDate>Mon, 22 May 2023 19:36:53 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;如何读文献&#34;&gt;如何读文献&lt;/h3&gt;
&lt;h4
id=&#34;每一篇文献自带了一份通往同一领域相关论文的地图它叫做参考文献&#34;&gt;每一篇文献自带了一份通往同一领域相关论文的地图，它叫做“参考文献”&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;背景介绍部分的参考文献，告诉你这个领域为什么重要，这个研究问题为什么有意义。&lt;/li&gt;
&lt;li&gt;对于研究问题及相关研究部分的参考文献，告诉你之前都有谁做了什么相似/相关的工作&lt;/li&gt;
&lt;li&gt;实验设计、实验方法部分的参考文献，告诉你这种设计/方法最早来自何处&lt;/li&gt;
&lt;li&gt;数据讨论部分的参考文献，告诉你什么样已知的理论研究支持了这些假设和结论&lt;/li&gt;
&lt;li&gt;总结展望部分的参考文献，告诉你最新的综述有哪些、待解決的问题有哪些、最最近的研究有哪些&lt;/li&gt;
&lt;li&gt;实验部分的参考文献，告诉你这些实验操作最原始的出处在哪里&lt;/li&gt;
&lt;/ul&gt;
&lt;h4
id=&#34;读完文献至少应该能够回答的四个问题&#34;&gt;读完文献，至少应该能够回答的四个问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;这篇文章，到底在解决什么问题？（摘要、前言部分）&lt;/li&gt;
&lt;li&gt;这个问题为什么在这个领域重要？（前言部分）&lt;/li&gt;
&lt;li&gt;这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）&lt;/li&gt;
&lt;li&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意把握核心文献，那些被多次提及以及多次引用的文献。&lt;/p&gt;
&lt;p&gt;还有一点是几乎很多人的读文献视频都没讲过的，但是似乎很多人都知道的事情：&lt;/p&gt;
&lt;p&gt;对于重要的研究性文献，你应该也看看它们的非正文部分，包括注释、脚注、以及supporting&lt;/p&gt;
&lt;p&gt;information（就是包含实验部分的附属文件），因为这些部分往往会包含一些作者不太想告诉你但是又不得不告诉你的关于这篇文章的事实，比如说这篇文章的局限性、缺点、尚且解决不了的一部分问题等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿除了读新文献之外，还有一种文献非常值得读，那就是那些可能与你的研究没有非常直接的关联，但叉有一定关联，一定不算做你研究领域“核心文献〞，而且通常发在那些你看不起的“低影响因子小期
刊〞，通常都是文字很多图很少，你甚至没有听过作者名字的，老文献&lt;/li&gt;
&lt;li&gt;﻿“现在的科研工作者，很多都是挖尸体的人〞 大约等于
“你不站在巨人的肩膀上，如何能够得着夜空中的明月”。&lt;/li&gt;
&lt;li&gt;﻿提供一个有用的思路：你可以通过一篇文章中引用的一篇老文献找到通讯作者，然后看看这个“你没听过名字的〞教授一辈子学术生涯都做了什么，你往往会有意想不到的收获&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文献列表&#34;&gt;文献列表&lt;/h3&gt;
&lt;p&gt;[1]
吴英杰．隐私保护数据发布：模型与算法[M]．北京：清华大学出版社，2016&lt;/p&gt;
&lt;p&gt;[2] &lt;a
href=&#34;https://www.zhihu.com/search?q=周志华&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D&#34;&gt;周志华&lt;/a&gt;．机器学习
[ M]．北京：清华大学出版社 2016&lt;/p&gt;
&lt;p&gt;[3] 刘俊旭 , &lt;a
href=&#34;https://www.zhihu.com/search?q=孟小峰&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D&#34;&gt;孟小峰&lt;/a&gt;
. 机器学习的隐私保护研究综述 [J]. &lt;a
href=&#34;https://www.zhihu.com/search?q=计算机研究与发展&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D&#34;&gt;计算机研究与发展&lt;/a&gt;
, 2020, 57( 2): 346&lt;/p&gt;
&lt;p&gt;[4] 熊平 , &lt;a
href=&#34;https://www.zhihu.com/search?q=朱天清&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D&#34;&gt;朱天清&lt;/a&gt;
, 王晓峰 . 差分隐私保护及其应用 [J]. &lt;a
href=&#34;https://www.zhihu.com/search?q=计算机学报&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D&#34;&gt;计算机学报&lt;/a&gt;
,2014, 37(1): 101 122&lt;/p&gt;
&lt;h4 id=&#34;dp-theory&#34;&gt;DP theory&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gaussian differential privacy &lt;a
href=&#34;https://arxiv.org/pdf/1905.02383&#34;&gt;[paper]&lt;/a&gt; by Jinshuo Dong,
Aaron Roth, Weijie J. Su. 2019&lt;/li&gt;
&lt;li&gt;Average-Case Averages: Private Algorithms for Smooth Sensitivity and
Mean Estimation&lt;a
href=&#34;https://arxiv.org/pdf/1906.02830.pdf&#34;&gt;[paper]&lt;/a&gt; by Mark Bun and
Thomas Steinke. 2019&lt;/li&gt;
&lt;li&gt;New Differentially Private Algorithms for Learning Mixtures of
Well-Separated Gaussians&lt;a
href=&#34;https://arxiv.org/pdf/1909.03951.pdf&#34;&gt;[paper]&lt;/a&gt; by Gautam
Kamath, Or Sheffet, Vikrant Singhal, Jonathan Ullman. 2019&lt;/li&gt;
&lt;li&gt;Private Hypothesis Selection &lt;a
href=&#34;https://arxiv.org/pdf/1905.13229.pdf&#34;&gt;[paper]&lt;/a&gt; by Mark Bun,
Gautam Kamath, Thomas Steinke,Steven Wu. 2019&lt;/li&gt;
&lt;li&gt;Privacy Amplification by Iteration &lt;a
href=&#34;https://arxiv.org/abs/1808.06651&#34;&gt;[paper]&lt;/a&gt; by Vitaly Feldman,
Ilya Mironov, Kunal Talwar, Abhradeep Thakurta. 2018&lt;/li&gt;
&lt;li&gt;pMSE Mechanism: Differentially Private Synthetic Data with Maximal
Distributional Similarity &lt;a
href=&#34;https://arxiv.org/pdf/1805.09392.pdf&#34;&gt;[paper]&lt;/a&gt; by Joshua Snoke
and Aleksandra Slavkovic. 2018&lt;/li&gt;
&lt;li&gt;Differentially Private Continual Learning &lt;a
href=&#34;https://arxiv.org/pdf/1902.06497.pdf&#34;&gt;[paper]&lt;/a&gt; by S.Farquhar
and Yarin Gal. 2018&lt;/li&gt;
&lt;li&gt;Individual Fairness Under Composition &lt;a
href=&#34;http://www.fatml.org/media/documents/individual_fairness_under_composition.pdf&#34;&gt;[paper]&lt;/a&gt;
by Cynthia Dwork and Christina Ilvento. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Differentially Private Fair Learning &lt;a
href=&#34;https://arxiv.org/abs/1812.02696&#34;&gt;[paper]&lt;/a&gt; by Matthew
Jagielski, Michael Kearns, Jieming Mao, Alina Oprea, Aaron Roth, Saeed
Sharifi-Malvajerdi, Jonathan Ullman. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Differentially Private False Discovery Rate Control &lt;a
href=&#34;https://arxiv.org/abs/1807.04209&#34;&gt;[paper]&lt;/a&gt; by Cynthia Dwork,
Weijie J. Su, Li Zhang. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Accuracy First: Selecting a Differential Privacy Level for
Accuracy-Constrained ERM &lt;a
href=&#34;https://arxiv.org/abs/1705.10829&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/steven7woo/Accuracy-First-Differential-Privacy&#34;&gt;[code]&lt;/a&gt;
by Katrina Ligett, Seth Neel, Aaron Roth, Bo Waggoner, Z. Steven Wu.
2017&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Penalizing Unfairness in Binary Classification &lt;a
href=&#34;https://arxiv.org/abs/1707.00044&#34;&gt;[paper]&lt;/a&gt; by Yahav Bechavod,
Katrina Ligett. 2017&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Concentrated Differential Privacy &lt;a
href=&#34;https://arxiv.org/abs/1603.01887&#34;&gt;[paper]&lt;/a&gt; by Cynthia Dwork,
Guy N. Rothblum. 2016&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Protecting Privacy when Disclosing Information: k-Anonymity and Its
Enforcement through Generalization and Suppression &lt;a
href=&#34;https://epic.org/privacy/reidentification/Samarati_Sweeney_paper.pdf&#34;&gt;[paper]&lt;/a&gt;
by Pierangela Samarati and Latanya Sweeney&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;local-differential-privacy&#34;&gt;Local Differential Privacy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Answering multi-dimensional analytical queries under local
differential privacy &lt;a
href=&#34;https://par.nsf.gov/servlets/purl/10194803&#34;&gt;[paper]&lt;/a&gt; by Tianhao
Wang, Bolin Ding, Jingren Zhou, Cheng Hong, Zhicong Huang, Ninghui Li,
Somesh Jha. 2019&lt;/li&gt;
&lt;li&gt;Locally Private Gaussian Estimation &lt;a
href=&#34;https://arxiv.org/abs/1811.08382&#34;&gt;[paper]&lt;/a&gt; by Matthew Joseph,
Janardhan Kulkarni, Jieming Mao, Zhiwei Steven Wu. 2019&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Local Differential Privacy for Evolving Data &lt;a
href=&#34;https://arxiv.org/abs/1802.07128&#34;&gt;[paper]&lt;/a&gt; by Matthew Joseph,
Aaron Roth, Jonathan Ullman, Bo Waggoner. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Privacy at Scale: Local Differential Privacy in Practice &lt;a
href=&#34;http://dimacs.rutgers.edu/~graham/pubs/papers/ldptutorial.pdf&#34;&gt;[paper]&lt;/a&gt;
by Graham Cormode, Somesh Jha, Tejas kulkarni, Ninghui Li, Divesh
Srivastava, Tianhao Wang. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Locally Private Gaussian Estimation &lt;a
href=&#34;https://arxiv.org/abs/1811.08382&#34;&gt;[paper]&lt;/a&gt; by Matthew Joseph,
Janardhan Kulkarni, Jieming Mao, Zhiwei Steven Wu. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Locally differentially private protocols for frequency estimation &lt;a
href=&#34;https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-wang-tianhao.pdf&#34;&gt;[paper]&lt;/a&gt;
by Tianhao Wang, Jeremiah Blocki, Ninghui Li, Somesh Jha. 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;image-privacy&#34;&gt;Image Privacy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Learning to Anonymize Faces for Privacy Preserving Action Detection
&lt;a
href=&#34;https://web.cs.ucdavis.edu/~yjlee/projects/eccv2018-privacy.pdf&#34;&gt;[paper]&lt;/a&gt;
by Zhongzheng Ren, Yong Jae Lee and Michael S.Ryoo. 2019&lt;/li&gt;
&lt;li&gt;Image Privacy Prediction Using Deep Neural Networks &lt;a
href=&#34;https://arxiv.org/pdf/1903.03695.pdf&#34;&gt;[paper]&lt;/a&gt; by Ashwini
Tonge, Cornelia Caragea. 2019&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;adversarial-examples-and-robustness&#34;&gt;Adversarial Examples and
Robustness&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A unified view on differential privacy and robustness to adversarial
examples &lt;a href=&#34;https://arxiv.org/abs/1906.07982&#34;&gt;[paper]&lt;/a&gt; by
Rafael Pinot, et al. 2019&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Certified Robustness to Adversarial Examples with Differential
Privacy &lt;a href=&#34;https://arxiv.org/abs/1802.03471&#34;&gt;[paper]&lt;/a&gt; by
Mathias Lecuyer, Vaggelis Atlidakis, Roxana Geambasu, Daniel Hsu, Suman
Jana. 2018&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;privacy-and-generative-model&#34;&gt;Privacy and Generative Model&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Generalization in Generative Adversarial Networks:A Novel
Perspective from Privacy Protection &lt;a
href=&#34;https://arxiv.org/pdf/1908.07882.pdf&#34;&gt;[paper]&lt;/a&gt; by Bingzhe Wu
etc. 2019&lt;/li&gt;
&lt;li&gt;DP-CGAN : Differentially Private Synthetic Data and Label Generation
&lt;a
href=&#34;http://openaccess.thecvf.com/content_CVPRW_2019/papers/CV-COPS/Torkzadehmahani_DP-CGAN_Differentially_Private_Synthetic_Data_and_Label_Generation_CVPRW_2019_paper.pdf&#34;&gt;[paper]&lt;/a&gt;
by Peter Kairouz etc. 2019&lt;/li&gt;
&lt;li&gt;Siamese Generative Adversarial Privatizer for Biometric Data &lt;a
href=&#34;https://arxiv.org/pdf/1804.08757.pdf&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/WUT-ML/privacy&#34;&gt;[code]&lt;/a&gt; by WUT and peter
kairouz. 2018&lt;/li&gt;
&lt;li&gt;Generative Adversarial Models for Learning Private and Fair
Representations(GAPF) &lt;a
href=&#34;https://arxiv.org/abs/1807.05306&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/cabreraalex/private-fair-GAN&#34;&gt;[code]&lt;/a&gt; by
Chong Huang, Peter Kairouz, Lalitha Sankar. 2018&lt;/li&gt;
&lt;li&gt;Context-Aware Generative Adversarial Privacy(GAP) &lt;a
href=&#34;https://arxiv.org/abs/1710.09549&#34;&gt;[paper]&lt;/a&gt; by Chong Huang,
Peter Kairouz, Xiao Chen, Lalitha Sankar, Ram Rajagopal. 2017&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Differentially Private Generative Adversarial Networks for Time
Series, Continuous, and Discrete Open Data &lt;a
href=&#34;https://arxiv.org/abs/1901.02477&#34;&gt;[paper]&lt;/a&gt; by Lorenzo Frigerio,
Anderson Santana de Oliveira, Laurent Gomez, Patrick Duverger.
2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Generative Adversarial Nets &lt;a
href=&#34;https://arxiv.org/abs/1406.2661&#34;&gt;[paper]&lt;/a&gt; by Ian J. Goodfellow,
Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
Ozair, Aaron Courville, Yoshua Bengio. 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;privacy-in-federated-learning&#34;&gt;Privacy in Federated
Learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Beyond Inferring Class Representatives: User-Level Privacy Leakage
From Federated Learning &lt;a
href=&#34;https://arxiv.org/pdf/1812.00535.pdf&#34;&gt;[paper]&lt;/a&gt; by Zhibo Wang,
etc. 2019&lt;/li&gt;
&lt;li&gt;Exploiting Unintended Feature Leakage in Collaborative Learning &lt;a
href=&#34;https://arxiv.org/pdf/1805.04049.pdf&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/csong27/property-inference-collaborative-ml&#34;&gt;[code]&lt;/a&gt;
by Vitaly&#39;s group. 2019&lt;/li&gt;
&lt;li&gt;How To Backdoor Federated Learning &lt;a
href=&#34;https://arxiv.org/abs/1807.00459&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/ebagdasa/backdoor_federated_learning&#34;&gt;[code]&lt;/a&gt;
by Vitaly&#39;s group. 2018&lt;/li&gt;
&lt;li&gt;Deep Models Under the GAN: Information Leakage from Collaborative
Deep Learning &lt;a href=&#34;https://arxiv.org/abs/1702.07464&#34;&gt;[paper]&lt;/a&gt; by
Briland Hitaj, Giuseppe Ateniese, Fernando Perez-Cruz. 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;private-ml&#34;&gt;Private ML&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Towards practical differentially private convex optimization &lt;a
href=&#34;http://www.omthakkar.com/papers/TPDPCO.pdf&#34;&gt;[paper]&lt;/a&gt; by Roger
Iyengar, Joseph P Near, Dawn Song, Om Thakkar, Abhradeep Thakurta, Lun
Wang. 2019&lt;/li&gt;
&lt;li&gt;Bolt-on Differential Privacy for Scalable Stochastic Gradient
Descent-based Analytics &lt;a
href=&#34;https://dl.acm.org/doi/pdf/10.1145/3035918.3064047&#34;&gt;[paper]&lt;/a&gt; by
Xi Wu, Fengan Li, Arun Kumar, Kamalika Chaudhuri, Somesh Jha, Jeffrey F
Naughton. 2017&lt;/li&gt;
&lt;li&gt;Deep learning with differential privacy &lt;a
href=&#34;https://arxiv.org/pdf/1607.00133.pdf%20&#34;&gt;[paper]&lt;/a&gt; by Martin
Abadi, Andy Chu, Ian Goodfellow, H Brendan McMahan, Ilya Mironov, Kunal
Talwar, Li Zhang. 2016&lt;/li&gt;
&lt;li&gt;Learning with differential privacy: stability, learnability and the
sufficiency and necessity of ERM principle &lt;a
href=&#34;https://dl.acm.org/citation.cfm?id=3053465&#34;&gt;[paper]&lt;/a&gt; by
Yu-Xiang Wang, Jing Lei, Stephen E.Fienberg. 2016&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Privacy-Preserving Deep Learning &lt;a
href=&#34;https://www.cs.cornell.edu/~shmat/shmat_ccs15.pdf&#34;&gt;[paper]&lt;/a&gt; by
Reza Shokri and Vitaly Shmatikov.2015&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Differential Privacy and Machine Learning: a Survey and Review &lt;a
href=&#34;https://arxiv.org/abs/1412.7584&#34;&gt;[paper]&lt;/a&gt; by Zhanglong Ji,
Zachary C. Lipton, Charles Elkan. 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;privacy-in-mab&#34;&gt;Privacy in MAB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Privacy-Preserving Contextual Bandits &lt;a
href=&#34;https://arxiv.org/pdf/1910.05299.pdf&#34;&gt;[paper]&lt;/a&gt; by Facebook AI
Research. 2019&lt;/li&gt;
&lt;li&gt;Differentially Private Contextual Linear Bandits &lt;a
href=&#34;https://arxiv.org/pdf/1810.00068.pdf&#34;&gt;[paper]&lt;/a&gt; by Roshan
Shariff and Or Sheffet. 2018&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Achieving Privacy in the Adversarial Multi-Armed Bandit &lt;a
href=&#34;https://arxiv.org/abs/1701.04222&#34;&gt;[paper]&lt;/a&gt; by Aristide C. Y.
Tossou, Christos Dimitrakakis. 2017&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Differentially Private Policy Evaluation &lt;a
href=&#34;https://arxiv.org/abs/1603.02010&#34;&gt;[paper]&lt;/a&gt; by Borja Balle,
Maziar Gomrokchi, Doina Precup. 2016&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms for Differentially Private Multi-Armed Bandits &lt;a
href=&#34;https://arxiv.org/abs/1511.08681&#34;&gt;[paper]&lt;/a&gt; by Aristide Tossou,
Christos Dimitrakakis. 2015&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;MAB problems &lt;a
href=&#34;http://web.eecs.umich.edu/faculty/teneketzis/papers/MAB-Survey.pdf&#34;&gt;[paper]&lt;/a&gt;
by Aditya Mahajan and D.teneketzis&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;(Nearly) Optimal Differentially Private Stochastic Multi-Arm Bandits
&lt;a href=&#34;http://auai.org/uai2015/proceedings/papers/58.pdf&#34;&gt;[paper]&lt;/a&gt;
by Nikita Mishra and Abhradeep Thakurta&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Taming the Monster: A Fast and Simple Algorithm for Contextual
Bandits &lt;a
href=&#34;http://proceedings.mlr.press/v32/agarwalb14.pdf&#34;&gt;[paper]&lt;/a&gt; by
A.A, D.H, S.K, J.L, L.L, R.E.S&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;privacy-preserving-encrypted-neural-network&#34;&gt;Privacy-preserving
Encrypted Neural Network&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SHE: A Fast and Accurate Deep Neural Network for Encrypted Data &lt;a
href=&#34;https://arxiv.org/abs/1906.00148&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/safednn/SHE&#34;&gt;[code]&lt;/a&gt; by Qian Lou, Lei Jiang.
2019&lt;/li&gt;
&lt;li&gt;2P-DNN : Privacy-Preserving Deep Neural Networks Based on
Homomorphic Cryptosystem &lt;a
href=&#34;https://arxiv.org/abs/1807.08459&#34;&gt;[paper]&lt;/a&gt; &lt;a
href=&#34;https://github.com/zhustrong/pigstrong/tree/master/pigstrong&#34;&gt;[code]&lt;/a&gt;
by Qiang Zhu, Xixiang Lv. 2018&lt;/li&gt;
&lt;li&gt;ABY3 A Mixed Protocol Framework for Machine Learning &lt;a
href=&#34;https://eprint.iacr.org/2018/403.pdf&#34;&gt;[paper]&lt;/a&gt; by Payman
Mohassel, Peter Rindal . 2018&lt;/li&gt;
&lt;li&gt;Secureml: A system for scalable privacy-preserving machine learning
&lt;a
href=&#34;http://web.eecs.umich.edu/~mosharaf/Readings/SecureML.pdf&#34;&gt;[paper]&lt;/a&gt;
by Payman Mohassel, Yupeng Zhang. 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;differential-privacy-tutorial&#34;&gt;Differential Privacy
Tutorial&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For dummies &lt;a
href=&#34;https://robertovitillo.com/2016/07/29/differential-privacy-for-dummies/&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emory University CS 573 Data Privacy and Security, Fall 2018 &lt;a
href=&#34;http://www.cs.emory.edu/~lxiong/cs573/&#34;&gt;[course website]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;KDD 2018 Privacy tutorial &lt;a
href=&#34;https://sites.google.com/view/kdd2018privacytutorial&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;KDD 2018 Privacy at scale: Local Differential Privacy in Practice
[[link]](&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;年6月份文献阅读&#34;&gt;2023年6月份文献阅读&lt;/h3&gt;
&lt;h4
id=&#34;differential-privacy-protection-on-weighted-graph-in-wireless-networks&#34;&gt;Differential
privacy protection on weighted graph in wireless networks&lt;/h4&gt;
&lt;p&gt;无线网络中加权图差分隐私保护&lt;/p&gt;
&lt;p&gt;差分隐私（differential
privacy）是一种隐私保护框架，可以在涉及个人数据的情况下，对敏感信息进行保护。差分隐私的基本思想是，对于输入数据中的任何一条记录，其存在或不存在对最终输出结果的影响应该很小。因此，在加噪声时使用随机化技术来保护数据隐私，同时通过引入随机扰动等方法来减少攻击者获取敏感信息的概率。差分隐私已被广泛应用于数据挖掘、机器学习、社交网络和隐私保护等领域。差分隐私是一种隐私保护的概念和技术，旨在对个体的敏感数据进行隐私保护，同时保持对整体数据的有意义的统计分析。差分隐私的核心思想是通过向个体数据添加噪声来保护隐私，确保即使在具有所有其他数据的情况下，个体的隐私仍然得到保护。具体而言，差分隐私通过引入随机性和噪声来模糊个体数据，使得任何单个个体的贡献都无法被准确地确定。这样，即使攻击者具有访问和分析整体数据集的能力，也无法推断出个体的准确信息。通过在计算或数据发布过程中应用差分隐私，可以确保数据的隐私性，防止个人身份的泄露以及敏感信息的暴露。差分隐私的实现方法通常涉及添加噪声、扰动数据或限制查询等技术手段。它可以应用于各种场景，包括数据挖掘、机器学习、统计分析等领域，以保护个人隐私并促进数据共享和研究。同时，差分隐私也涉及一些数学理论和算法，用于量化隐私保护的强度以及在保护和分析之间取得平衡的方法。&lt;/p&gt;
&lt;p&gt;网络图数据包含着大量的用户信息。（如何包含？）&lt;/p&gt;
&lt;p&gt;网络图数据包含着大量的用户信息，主要是因为网络图记录了用户之间的连接和交互关系。这些关系可以包括社交网络中的朋友关系、通信网络中的通话记录、互联网上的浏览历史等。通过分析网络图数据，可以获得用户的社交圈子、兴趣爱好、交流频率、行为模式等信息。例如，通过分析社交网络图，可以了解一个用户的朋友数量、朋友之间的联系强度，甚至可以推断出用户的兴趣爱好和社交影响力。在通信网络中，通过分析通话图可以了解用户之间的通话频率、通话时长、通话时间段等，这些信息可以用于用户行为分析、社交推荐、广告定向等应用。此外，网络图数据还可以包含用户的位置信息、IP地址、设备信息等。这些附加信息可以与网络图中的连接关系结合起来，进一步揭示用户的行为模式、偏好和用户群体特征。因此，网络图数据对于了解用户行为、社交关系和个人特征具有重要意义，同时也带来了隐私保护的挑战，需要采取适当的隐私保护措施来保护用户的个人隐私。&lt;/p&gt;
&lt;p&gt;只是简单的删除或者替换图中的节点ID，这种简单的隐藏节点信息仍然会有隐私泄漏的风险，因为结构数据仍然能够推导出用户的隐私。更多的在加权网络图中，权值也有&lt;/p&gt;
&lt;p&gt;hierarchical random graph：层次随机图（hierarchical random
graph）是一种具有层级结构的随机图模型，它可以用于描述复杂系统中的层次结构特征。在这个模型中，每个节点都被划分为不同的层级，并且每个层级中的节点之间存在不同的概率连接。这种模型在网络科学、社会学、生物学等领域有广泛的应用。&lt;/p&gt;
&lt;p&gt;Markov Monte Carlo：马尔可夫蒙特卡罗（Markov Monte
Carlo，简称MCMC）是一种常用的随机采样方法，它可以用于从复杂的概率分布中采样得到样本。它基于马尔可夫链的性质，通过在状态空间中进行转移来达到采样的目的。MCMC可以应用于很多领域，比如贝叶斯统计、机器学习等。&lt;/p&gt;
&lt;p&gt;k-anonymity
method：k-匿名（k-anonymity）是一种隐私保护方法，它可以在传输数据时保证数据中的每个个体都至少有k个相似的邻居，从而实现个体身份的隐私保护。具体来说，在k-匿名中，通过对原始数据进行通用化、泛化等操作，将具有相同属性值的记录合并为一个组，从而达到隐藏个体身份的目的。该方法在数据挖掘、隐私保护等领域得到了广泛的应用。在使用k-匿名保护方法时，由于需要对数据进行通用化、泛化等处理，因此会存在一定的背景知识假设。如果攻击者能够获取到更多的背景知识，则可能会推断出原始数据中的一些敏感信息。因此，k-匿名方法的相对有效性可能不是非常强，需要针对具体场景采用不同的隐私保护方法。&lt;/p&gt;
&lt;p&gt;本文通过结合边权重值和图结构设计了一种隐私保护算法。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;𝜀&lt;/em&gt;- differential privacy：𝜀-差分隐私 (epsilon-differential
privacy)
是一种差分隐私的度量方式之一，用于衡量随机化算法的隐私保护强度。表示在相同的输入数据集中，可能输出不同的结果（比如添加了随机噪声），但每个结果的隐私保护程度都保持一致。𝜀-差分隐私是指对于任意两个互相独立的数据集
S 和 S&#39;，它们只有微小的区别（比如只有一个记录不同），随机化算法保证以 𝜀
的概率输出的结果具有相似的隐私保护程度。𝜀
越小则表示隐私保护程度越高，但可能会降低数据实用性和准确性。&lt;/p&gt;
&lt;p&gt;本文主要贡献：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;根据边的频率，在图形生成过程中使用差分隐私的拉普拉斯噪声扰动，并设计合理的图形生成规则。&lt;/li&gt;
&lt;li&gt;在获取扰动图形集之后，设计了边权重保护算法，包括合理的隐私预算分配策略。&lt;/li&gt;
&lt;li&gt;然后，将扰动边权重集成到图形的编码过程中，并挖掘图谱的频繁子图。在挖掘过程中，使用差分隐私的拉普拉斯机制和指数机制来保护图形结构，从而提高数据效用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Definition
2.1&lt;/strong&gt;给定一个随机算法𝑀，𝑅𝑎𝑛𝑔𝑒(𝑀)表示算法𝑀的所有可能输出结果的集合。对于任意两个相邻的数据集𝐷和𝐷′以及任意子集𝑆⊆𝑅𝑎𝑛𝑔𝑒(𝑀)，如果满足𝑃𝑟(𝑀(𝐷)∈𝑆)≤𝑃𝑟(𝑀(𝐷′)∈𝑆)×exp(𝜀)，则算法𝑀就满足𝜀-差分隐私。此外，差分隐私有两种常见的机制，拉普拉斯机制和指数机制
[25]。拉普拉斯机制用于数值隐私保护，而指数机制用于非数值隐私保护。两种机制定义如下。噪声机制的选择决定了查询的准确性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 2.2&lt;/strong&gt; (&lt;em&gt;Laplace
Mechanism&lt;/em&gt;)给定数据集𝐷，函数𝑓∶𝐷&lt;span
class=&#34;math inline&#34;&gt;\(→r_d\)&lt;/span&gt;
满足灵敏度，记为△𝑓，那么随机算法𝑀(𝐷)=𝐹(𝐷)+𝐿𝑎𝑝(△𝑓/𝜀)满足𝜀-差分隐私。其中，𝐿𝑎𝑝(△𝑓/𝜀)是随机噪声，是拉普拉斯分布，其比例因子为△𝑓/𝜀。噪声的大小直接与△𝑓成正比，与𝜀成反比。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 2.3&lt;/strong&gt; (&lt;em&gt;Global
Sensitivity&lt;/em&gt;)给定函数𝑓∶𝐷→ &lt;span
class=&#34;math inline&#34;&gt;\(r_d\)&lt;/span&gt;，输入为数据集𝐷，输出为一个𝑑维实数向量。对于任意相邻的数据集𝐷和𝐷′，△𝑓
= &lt;span
class=&#34;math inline&#34;&gt;\(max_{D,D&amp;#39;}\)&lt;/span&gt;‖𝑓(𝐷)−𝐹(𝐷′)‖是𝑓的全局灵敏度。其中，𝑅代表映射的实数空间，𝐿1距离表示𝑓(𝐷)和𝑓(𝐷′)之间的距离。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 2.4&lt;/strong&gt; (&lt;em&gt;Exponential Mechanism&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;差分隐私还具有序列组合和并行组合两个属性[10]。序列组合强调隐私预算可以在方法的不同步骤中分配，而并行组合确保算法在其数据集的非重叠子集中满足差分隐私的隐私性。&lt;/p&gt;
&lt;p&gt;在本文中，我们提出了一种隐私保护算法，以保护物联网中的加权图，主要采用差分隐私保护模型来保护边权重和图结构。首先，我们扰乱整个图集并在图生成过程中添加噪声；其次，我们为扰乱的图集设计了边权重保护算法，然后对图进行编码并将扰乱的边权重整合到其中。然后，我们挖掘和保护图集中的频繁图结构，在挖掘过程中使用差分隐私。最后，我们在真实数据集上进行实验证明，我们的方法是可行和有效的。&lt;/p&gt;
&lt;h4
id=&#34;a-survey-of-dummy-based-location-privacy-protection-techniques-for-location-based-services&#34;&gt;A
Survey of Dummy-Based Location Privacy Protection Techniques for
Location-Based Services&lt;/h4&gt;
&lt;p&gt;《基于虚假数据的位置隐私保护技术在基于位置的服务中的调查》是一篇研究论文或文章，提供了对基于位置的服务（LBS）中用于保护位置隐私的各种技术的概述和分析。&lt;/p&gt;
&lt;p&gt;在这项调查中，重点关注基于虚假数据的技术，这些技术涉及生成和利用虚假或伪造的位置信息，以在保护用户隐私的同时允许提供LBS。这些技术旨在防止或减轻可能危及使用LBS应用程序的个人隐私的位置跟踪和推断攻击。&lt;/p&gt;
&lt;p&gt;调查可能涵盖一系列基于虚假数据的技术，例如：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;虚假注入：将伪造或虚假的位置更新与用户的真实位置一起引入，以困惑对手并使其难以准确追踪用户。&lt;/li&gt;
&lt;li&gt;虚假选择：从预定义的集合中选择合适的虚假位置，或基于特定标准选择虚假位置，以确保隐私保护同时保持LBS的效用。&lt;/li&gt;
&lt;li&gt;虚假移动：通过生成逼真的虚假位置更新来模拟用户的移动模式或轨迹，从而混淆用户的实际移动。&lt;/li&gt;
&lt;li&gt;虚假更新策略：确定虚假位置更新的频率、时间和特征，以增强隐私保护并尽量减少对LBS功能的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调查可能讨论不同基于虚假数据技术的优点、局限性和权衡，考虑隐私保护、LBS的效用、计算开销和通信成本等因素。&lt;/p&gt;
&lt;p&gt;总的来说，这项调查是了解基于虚假数据的位置隐私保护技术在基于位置的服务中的现状的全面资源。它可以提供对这一研究领域的挑战、进展和未来方向的洞察。&lt;/p&gt;
&lt;p&gt;Dummy-based location privacy protection：基于虚假位置的隐私保护&lt;/p&gt;
&lt;p&gt;基于虚假数据的位置隐私保护是一种技术方法，旨在保护个人在使用位置相关服务时的位置隐私。该方法通过引入虚假或伪造的位置信息，使得攻击者难以确定用户的真实位置，从而保护用户的隐私。&lt;/p&gt;
&lt;p&gt;在基于虚假数据的位置隐私保护中，主要的思想是在用户的真实位置信息中添加一些虚假的位置数据，使得攻击者无法准确追踪用户的位置。这些虚假数据可以包括虚假位置坐标、虚假位置更新时间或者虚假移动轨迹。&lt;/p&gt;
&lt;p&gt;使用虚假数据的好处是可以提供一定的隐私保护，同时仍然可以享受位置相关服务的便利性。通过引入虚假数据，用户的真实位置更难以被追踪或推断出来，从而保护用户的隐私。&lt;/p&gt;
&lt;p&gt;虽然基于虚假数据的位置隐私保护可以提供一定程度的隐私保护，但也存在一些限制和挑战。其中一项挑战是如何选择合适的虚假数据以平衡隐私保护和服务的实用性。虚假数据的选择需要考虑用户的行为模式、位置需求以及攻击者的推断能力。另外，虚假数据的生成和管理也需要考虑计算和通信开销等方面的因素。&lt;/p&gt;
&lt;p&gt;因此，基于虚假数据的位置隐私保护是一种重要的技术手段，用于在位置相关服务中保护用户的隐私。它通过引入虚假数据来混淆用户的真实位置，从而提高用户的位置隐私保护水平。&lt;/p&gt;
&lt;p&gt;Level of privacy (LoP):&#34;Level of
privacy&#34;（隐私水平）指的是个人或组织在其个人信息或数据处理过程中所期望的或实现的隐私保护程度。&lt;/p&gt;
&lt;p&gt;&#34;Quality of Service&#34;（服务质量）通常缩写为
QoS，指的是在计算机网络和通信领域中，用于描述网络或通信系统所提供的服务的质量水平。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这篇文章，到底在解决什么问题？（摘要、前言部分）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个问题为什么在这个领域重要？（前言部分）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4
id=&#34;dp-ltod-differential-privacy-latent-trajectory-community-discovering-services-over-location-based-social-networks&#34;&gt;DP-LTOD:
Differential Privacy Latent Trajectory Community Discovering Services
over Location-Based Social Networks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这篇文章，到底在解决什么问题？（摘要、前言部分）&lt;/p&gt;
&lt;p&gt;这篇论文解决了两个问题：&lt;/p&gt;
&lt;p&gt;1、根据用户的轨迹，将用户分类&lt;/p&gt;
&lt;p&gt;2、设计了一个新的模糊轨迹的方法&lt;/p&gt;
&lt;p&gt;首先，由于大规模无线通信网络的应用，基于位置的社交网络也大规模出现并应用。但是很多应用在使用用户的位置权限时。会存在泄漏用户位置隐私的可能。这些位置信息包含用户的位置轨迹。&lt;/p&gt;
&lt;p&gt;所以本篇文章提出了一种差分隐私潜在轨迹团发现方案（DP-
LTOD，Differential Privacy Latent Trajectory Community Discovering
）。通过将原始轨迹序列模糊化为符合差分隐私的轨迹序列来保护轨迹隐私。&lt;/p&gt;
&lt;p&gt;还开发了一种轨迹聚类算法，根据语义距离和地理距离将轨迹分类到不同类型的聚类中。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个问题为什么在这个领域重要？（前言部分）&lt;/p&gt;
&lt;p&gt;1、历史轨迹反应了用户的随时间的位置变化。通过分析收集大量用户的历史轨迹，可以把有相似爱好、兴趣、行为的用户聚类在一起。&lt;/p&gt;
&lt;p&gt;2、轨迹信息可以为许多应用软件提供支持。&lt;/p&gt;
&lt;p&gt;那么问题就来了，有些不被信任的第三方泄漏用户信息来做一些恶意事件。或者攻击者得到数据后分析用户数据做一些恶意事件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）&lt;/p&gt;
&lt;p&gt;对于用户轨迹分类问题：&lt;/p&gt;
&lt;p&gt;该论文考虑了两方面：语义分类，地理位置分类。综合这两种方法，可以有效的将用户轨迹分类。&lt;/p&gt;
&lt;p&gt;对于用户轨迹信息的保护，该论文设计了一个挑选模糊位置的方法。这个方法可以挑选出最接近真实位置的模糊位置。之后设计了两种攻击方式。贝叶斯、马尔可夫。并针对这两种攻击分别进行了拉普拉斯噪声、指数噪声的添加。使得之后的扰乱矩阵既能保护隐私又能兼顾数据的使用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本文中，我们研究了在严格的差分隐私模型下的潜在轨迹社区发现问题。首先，我们介绍了考虑用户兴趣和偏好的潜在轨迹社区发现（LTOD）方法。然后，我们探讨了设计差分隐私潜在轨迹社区发现（DP-LTOD）方案的可能性，以确保隐私和数据效用的良好性能。我们发现，在DP-LTOD中，模糊化轨迹序列的特征对于提高LTOD的准确性至关重要。如果我们能够有效地选择最优的模糊化轨迹，可以显著改善效用和隐私的权衡。为此，我们制定了一个轨迹模糊化问题，选择与原始轨迹差异最小的最优轨迹。我们证明了这个问题是NP难问题，并提出了一种启发式的轨迹模糊化算法来解决该问题。在我们的DP-LTOD方案中，另一个核心是在轨迹模糊化阶段添加差分隐私所需的噪声。为了防止贝叶斯攻击和马尔可夫攻击，我们在位置模糊化矩阵生成和轨迹序列函数生成阶段分别添加基于拉普拉斯分布和指数分布的噪声。通过形式化的隐私分析，我们证明了DP-LTOD方案满足-差分隐私。通过实验证明，我们的DP-LTOD方案能够以高准确性私密地发现潜在轨迹社区。&lt;/p&gt;
&lt;p&gt;对于未来的工作，我们将进一步完善攻击模型，考虑社交连接图或内容文本等因素。将利用深度学习技术训练位置模糊化矩阵，以智能感知用户的实际位置并选择模糊化位置。此外，我们将考虑更多的维度（例如时间或速度等）来发现潜在轨迹社区。将发现的潜在轨迹社区应用于LBSNs中为用户推荐个性化服务将是一个有趣的研究方向。&lt;/p&gt;
&lt;h4
id=&#34;privacy-attitudes-and-privacy-behaviour-a-review-of-current-research-on-the-privacy-paradox-phenomenon&#34;&gt;Privacy
attitudes and privacy behaviour: A review of current research on the
privacy paradox phenomenon&lt;/h4&gt;
&lt;p&gt;隐私态度和隐私行为：对隐私悖论现象的当前研究进行综述。综述论文。&lt;/p&gt;
&lt;h3 id=&#34;june-5-2023week-1&#34;&gt;1.JUNE 5, 2023(WEEK 1)&lt;/h3&gt;
&lt;h4 id=&#34;decision-tree&#34;&gt;Decision tree&lt;/h4&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;col style=&#34;width: 1%&#34; /&gt;
&lt;col style=&#34;width: 6%&#34; /&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;col style=&#34;width: 15%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Publication&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Authors&lt;/th&gt;
&lt;th&gt;Area&lt;/th&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Main Method&lt;/th&gt;
&lt;th&gt;Datasets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;LSTM-TrajGAN: A Deep Learning Approach to Trajectory Privacy
Protection&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ACM Subject Classification Security and privacy&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;Jinmen Rao &lt;br /&gt;Song Gao&lt;/td&gt;
&lt;td&gt;Deep Learning Trajectory Privacy Protection&lt;/td&gt;
&lt;td&gt;如何生成与原始数据相似度大的伪造轨迹，从而保护原始轨迹隐私并使得原始数据的使用影响降到最小。&lt;/td&gt;
&lt;td&gt;使用一种深度学习模型来训练生成伪造轨迹&lt;/td&gt;
&lt;td&gt;Foursquare weekly trajectory dataset in New York City&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;trajGANs: Using generative adversarial networks for
geo-privacy protection of trajectory data (Vision paper)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Differentially Private Triangle and 4-Cycle Counting in the
Shuffle Model&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CCS&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;Jacob Imola Takao Murakami&lt;/td&gt;
&lt;td&gt;&lt;a
href=&#34;https://dl.acm.org/doi/proceedings/10.1145/3548606&#34;&gt;Computer and
Communications Security&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;https://github.com/Triangle4CycleShuffle/Triangle4CycleShuffle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;Personalized Differential Privacy Preservation Method for
Trajectory Based on Regional Density Analysis&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2023 2nd International Conference on Big Data, Information and
Computer Network (BDICN)&lt;/td&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;Weicheng zhi&lt;/td&gt;
&lt;td&gt;差分隐私 轨迹隐私&lt;/td&gt;
&lt;td&gt;如何平衡虚假轨迹的轨迹隐私保护和轨迹的服务利用率&lt;/td&gt;
&lt;td&gt;通过将轨迹中比较集中的点用一个点来代替，生成一个新的轨迹，之后再对这个点添加噪声&lt;/td&gt;
&lt;td&gt;Geolife&lt;br /&gt;T-drive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5
id=&#34;lstm-trajgan-a-deep-learning-approach-to-trajectory-privacy-protection&#34;&gt;&lt;strong&gt;LSTM-TrajGAN:
A Deep Learning Approach to Trajectory Privacy Protection&lt;/strong&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇论文在解决什么问题？（摘要、前言）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着位置服务的兴起，如何保护用户的位置、轨迹隐私？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题为什么重要？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现如今通用的方法是从用户轨迹数据中移除一些敏感数据（用户名字、ID）。但是这些数据可能能通过空间、时间、地理位置的语义信息被推断出。而另一种把用户数据整合进地理位置的方法不仅不能保护用户隐私，反而也造成空间分析的低效。因此，为了平衡用户隐私保护和用户数据在应用中的使用，作者提出了&lt;strong&gt;LSTM-
TrajGAN&lt;/strong&gt;模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者是如何解决这个问题？（具体的实验设计、优化部分）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;大体思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.41.13.png&#34; alt=&#34;截屏2023-06-07 22.41.13&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将轨迹信息（空间、时间、语义信息）编码，之后送入LSTM- TrajGAN
模型，之后利用伪造轨迹数据进行应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轨迹编码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;轨迹的编码主要分为location、time、user id 、trajectory id、other
optional attributes。&lt;/p&gt;
&lt;p&gt;location：标准化经纬度（具体的方法是，得到数据集中所有位置点的质心点，然后所有的位置的经纬度跟这个质心的偏差来作为位置经纬度的标准化）这样的方法可以使得模型更好的学习到两个不同的轨迹点的空间偏差。&lt;/p&gt;
&lt;p&gt;time：使用one-hot encoders 去编码。具体编码为周、小时这两种。&lt;/p&gt;
&lt;p&gt;other optional attributes：编码为10维的二进制向量&lt;/p&gt;
&lt;p&gt;不对用户ID和轨迹ID编码。因为它们仅用于指示点所属的用户和轨迹。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.55.30.png&#34; alt=&#34;截屏2023-06-07 22.55.30&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轨迹填充：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;填0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LSTM-TrajGAN Model:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.57.27.png&#34; alt=&#34;截屏2023-06-07 22.57.27&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主要是两部分，轨迹生成器和轨迹分辨器。在轨迹生成器中，首先是将噪声和经过多层感知机的真实的轨迹数据组合在一起（这里起到添加噪声的作用），然后经过全连接层再经过LSTM，之后经过全连结层和3个softmax生成了伪造轨迹。之后将真实轨迹和伪造数据一起送入轨迹分辨器中，进行分辨。在进行对抗训练中，本文的一大亮点，重新设计了损失函数（&lt;strong&gt;TrajLoss
for Measuring Trajectory Similarity Losses&lt;/strong&gt;） &lt;span
class=&#34;math display&#34;&gt;\[
TrajLoss(y^r,y^p,t^r,t^s)=\alpha L_{BCE}(y^r,y^p)+\beta
L_{s}(t^r,t^s)+\gamma L_{t}(t^r,t^s)+cL_{c}(t^r,t^s)
\]&lt;/span&gt; 其中 &lt;span class=&#34;math inline&#34;&gt;\(y^r\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(y^p\)&lt;/span&gt;
表示真实的标签和通过分类器预测的结果。 &lt;span
class=&#34;math inline&#34;&gt;\(t^r\)&lt;/span&gt; 和 &lt;span
class=&#34;math inline&#34;&gt;\(t^s\)&lt;/span&gt; 则表示真实轨迹和伪造轨迹。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5
id=&#34;personalized-differential-privacy-preservation-method-for-trajectory-based-on-regional-density-analysis&#34;&gt;&lt;strong&gt;Personalized
Differential Privacy Preservation Method for Trajectory Based on
Regional Density Analysis&lt;/strong&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;将基于区域密度分析的个性化差分隐私保护方法应用于轨迹数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这篇文章，到底在解决什么问题？（摘要、前言部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目前大部分方法都对轨迹中的所有点进行噪声的添加，同时对轨迹中的点分配同样的隐私预算。这样不能对轨迹中的用户的特征进行个性化的轨迹隐私保护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这个问题为什么在这个领域重要？（前言部分）&lt;/li&gt;
&lt;li&gt;这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;针对这个问题，提出了一种基于区域密度分析的轨迹保护方法。分析每个用户的停留区域，计算停留点，并根据时间和距离阈值重构轨迹集。使用基于局部密度峰值的最小生成树聚类算法获取用户轨迹的隐私敏感位置点和活动热点区域。根据设计的隐私重要程度表达式，计算每个敏感位置点的隐私得分，并为其分配适当的隐私预算值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;主要的亮点在于，使用经纬度和时间，找到了一个密度最高区域。并将其重构，然后根据设计的隐私重要程度表达式，计算每个敏感位置的隐私得分，并为其分配适当的隐私预算值。这其实算是将轨迹中的重要的点找出来（毕竟轨迹中的的点有很多，每一个点其实所包含的信息是不一样的。比如在街道上的一些点和在餐厅的点，它们包含的信息当然不同），为其分配不同的隐私预算值。其实这个的隐私预算值可以视为权重值。含有信息不同的轨迹的点自然需要不同的权重值。然后根据隐私预算为这个重构的轨迹图添加噪声。&lt;/p&gt;
&lt;p&gt;我觉得这个问题的解决还有一个点可以考虑进去，首先作者只是考虑了经纬度、时间。一些点所处位置的语义信息并没有被考虑进去。是否可以将这个语义信息考虑进去？不同的点他们所处的位置可能是咖啡店、书店等等。这个信息其实也有较大的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章，到底在解决什么问题？（摘要、前言部分）&lt;/p&gt;
&lt;p&gt;这个问题为什么在这个领域重要？（前言部分）&lt;/p&gt;
&lt;p&gt;这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）&lt;/p&gt;
&lt;p&gt;这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
