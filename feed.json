{
    "version": "https://jsonfeed.org/version/1",
    "title": "刀刀博客",
    "description": "欢迎来到刀刀的笔记空间(^_^)",
    "home_page_url": "https://chnhqz.github.io",
    "items": [
        {
            "id": "https://chnhqz.github.io/2024/05/06/%E5%8A%9B%E6%89%A3/",
            "url": "https://chnhqz.github.io/2024/05/06/%E5%8A%9B%E6%89%A3/",
            "title": "力扣",
            "date_published": "2024-05-06T02:20:46.000Z",
            "content_html": "<h2 id=\"哈希\">1.哈希</h2>\n<h4 id=\"两数之和\">1.两数之和</h4>\n<p>如果直接暴力很简单，但是时间复杂度为 <span\nclass=\"math inline\">\\(O(n)\\)</span>\n。这里其实时间的复杂度主要来自于内层循环的复杂度，外层循环，的 <span\nclass=\"math inline\">\\(O(n)\\)</span> 时间复杂度是不可避免的，对于 <span\nclass=\"math inline\">\\(nums[i]\\)</span> 来说，我们在数组中找到一个数等于\n<span class=\"math inline\">\\(target - nums[i]\\)</span>\n。只是循环的话，还是 <span class=\"math inline\">\\(O(n)\\)</span>\n的时间复杂度，我们可以使用哈希的方法，直接用 <span\nclass=\"math inline\">\\(O(1)\\)</span> 的时间复杂度找到 <span\nclass=\"math inline\">\\(target - nums[i]\\)</span> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找一个键值为 target - nums[i] 的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it  = mp.<span class=\"built_in\">find</span>(target - nums[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 如果找到了键值为 target - nums[i] 的索引，那么返回答案</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != mp.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mp[nums[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字母异位词分组\">49.字母异位词分组</h4>\n<p>我们可以选择将排序后的字符串作为键，无序的字符串作为键值\n<code>unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</code>\n这样遍历一边字符串，就可以筛选出所有的答案。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;string&gt;&gt; <span class=\"built_in\">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class=\"line\">        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (string&amp; str : strs) &#123;</span><br><span class=\"line\">            string key = str;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(key.<span class=\"built_in\">begin</span>(), key.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            mp[key].<span class=\"built_in\">emplace_back</span>(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = mp.<span class=\"built_in\">begin</span>(); it != mp.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">            res.<span class=\"built_in\">emplace_back</span>(it-&gt;second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最长连续序列\">128.最长连续序列</h4>\n<p>首先我们考虑枚举数组中的每个数 <span class=\"math inline\">\\(x\\)</span>\n。考虑不断尝试 <span class=\"math inline\">\\(x+1,x+2,x+3,...\\)</span>\n是否存在。对于匹配的过程，直接的方法是 <span\nclass=\"math inline\">\\(O(n)\\)</span>\n遍历数组去看是否存在这个数，但是我们可以使用更高效的方法，用一个哈希表存储数组中的数，这样查看一个数是否存在能优化至\n<span class=\"math inline\">\\(O(1)\\)</span> 的时间复杂度。</p>\n<p>但是仅仅这样，我们的算法时间复杂度最坏情况还是会达到 <span\nclass=\"math inline\">\\(O(n^2)\\)</span> （即外层需要枚举 <span\nclass=\"math inline\">\\(n\\)</span> 个数，内层也需要暴力匹配 <span\nclass=\"math inline\">\\(n\\)</span> 次）。这样无法满足题目时间复杂度 <span\nclass=\"math inline\">\\(O(n)\\)</span>\n的要求。但是我们仔细分析这个枚举的过程，我们会发现其实我们进行了很多不必要的枚举，如果已知有一个\n<span class=\"math inline\">\\(x, x+1, x+2, ..., x+y\\)</span>\n的连续序列，而我们在下一个数字 <span class=\"math inline\">\\(x+ 2\\)</span>\n的时候仍然一个一个的枚举，这样得到的结果是一定不会优于以 <span\nclass=\"math inline\">\\(x\\)</span>\n为起点的的答案的。所以我们需要在外层判断 <code>x - 1</code>\n是否在数组中存在，如果存在，那么他就是已经判断过的，不需要在判断，直接跳过即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">longestConsecutive</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; num_set;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : nums) &#123;</span><br><span class=\"line\">            num_set.<span class=\"built_in\">insert</span>(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> longestStreak = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> num : num_set) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!num_set.<span class=\"built_in\">count</span>(num - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> currentNum = num;</span><br><span class=\"line\">                <span class=\"type\">int</span> currentStreak = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (num_set.<span class=\"built_in\">count</span>(currentNum + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    currentNum += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    currentStreak += <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                longestStreak = <span class=\"built_in\">max</span>(longestStreak, currentStreak);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longestStreak;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"双指针\">2.双指针</h2>\n<h4 id=\"移动零\">283.移动零</h4>\n<p>双指针，<code>left</code> 和 <code>right</code> 当<code>left</code>\n为0时，<code>right</code>找到<code>left</code>后边第一个不为零的数字进行交换。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">1</span>; left &lt; right &amp;&amp; right &lt; nums.<span class=\"built_in\">size</span>(); ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[left] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (right &lt; nums.<span class=\"built_in\">size</span>() &amp;&amp; nums[right] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    right ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (right == nums.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                nums[left] = nums[right];</span><br><span class=\"line\">                nums[right] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            left ++;</span><br><span class=\"line\">            right ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"盛最多水的容器\">11.盛最多水的容器</h4>\n<p>这道题目，观察数据的规模，如果采用暴力的双层<code>for</code>循环进行枚举，那么时间复杂度一定超标。这里我们观察，是解决两条线之间的面积最大的问题，那么自然而然想到可以使用双指针来解决，我们接下来注意如何解决指针的移动，首先在<code>height[0]</code>\n和 <code>height[8]</code>之间指针如何移动呢？此时指针\n<code>height[0] &lt; height[8]</code> 那就是说我们此时找到比\n<code>height[0]</code>大的值即可。可以照样理解，我们此时在数组中寻找只要比\n<code>height[8]</code>小的值，那么面积一定比此时面积小，所以我们选择移动两个数值之间较小的数字，这样才有可能出现比现在大的面积。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = height.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, <span class=\"built_in\">min</span>(height[left], height[right]) * (right - left));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (height[left] &gt; height[right]) right --;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> left ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三数之和\">15.三数之和</h4>\n<p>利用双指针进行时间复杂度的压缩，首先我们对数组进行排序，这样可以方便后续进行左右指针的移动。排序后，我们要对数组中一样的数字进行去重，<code>if (i - 1 &gt;= 0 &amp;&amp; nums[i] == nums[i - 1]) continue</code>\n这句代码就是进行去重的代码。之后我们定义左指针指向<code>nums[i]</code>\n的下一个数字，右指针指向最后一个数字。定义 <code>target</code>\n为目标数字，这样我们就可以用二分查找的方法进行时间复杂度的压缩，我们将三数之和问题转化为两个数字的和等于\n<code>-nums[i]</code> 。我们计算这个和<code>sum</code>。如果这个和\n<code>sum &gt; 0</code> <code>right--</code> 否则 <code>left++</code>\n。但是这里有个问题，就是会有一样的数字造成答案数组重复。所以我们要进行一样的数字跳过的操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">threeSum</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = i + <span class=\"number\">1</span>, right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> target = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> sum = target + nums[left] + nums[right];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">0</span>) right--;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) left++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.<span class=\"built_in\">push_back</span>(&#123;target, nums[left], nums[right]&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (left ++; left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>]; left++);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (right--; left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>]; right--);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"接雨水\">42.接雨水</h4>\n<figure>\n<img loading=\"lazy\" data-src=\"截屏2024-05-06%2010.21.59.png\"\nalt=\"截屏2024-05-06 10.21.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-06 10.21.59</figcaption>\n</figure>\n<p>这里我们将每一块区域都视为一个底边长度为<code>1</code>\n的木桶，这是木桶的容水量为\n<code>min(左边最高的木板，右边最高的木板)- height[i]</code>\n那么如何求对于一个位置的左边最高木板和右边最高木板呢？这里我们用到前后缀的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0 1 1 2 2 2 2 3 3 3 3 3</span></span><br><span class=\"line\"><span class=\"comment\">// 3 3 3 3 3 3 3 3 2 2 2 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0 0 1 0 1 2 1 0 0 1 0 0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">trap</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre_max</span><span class=\"params\">(height.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">suf_max</span><span class=\"params\">(height.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        pre_max[<span class=\"number\">0</span>] = height[<span class=\"number\">0</span>];</span><br><span class=\"line\">        suf_max[height.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>] = height[height.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; height.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            pre_max[i] = <span class=\"built_in\">max</span>(pre_max[i - <span class=\"number\">1</span>], height[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = height.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            suf_max[i] = <span class=\"built_in\">max</span>(suf_max[i + <span class=\"number\">1</span>], height[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; height.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            res += <span class=\"built_in\">min</span>(pre_max[i], suf_max[i]) - height[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>相向双指针的做法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">trap</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>, right = height.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, pre_max = <span class=\"number\">0</span>, suf_max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            pre_max = <span class=\"built_in\">max</span>(pre_max, height[left]);</span><br><span class=\"line\">            suf_max = <span class=\"built_in\">max</span>(suf_max, height[right]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre_max &lt; suf_max) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 左边木桶的容量就知道了</span></span><br><span class=\"line\">                res += pre_max - height[left];</span><br><span class=\"line\">                left ++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res += suf_max - height[right];</span><br><span class=\"line\">                right --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"滑动窗口\">3.滑动窗口</h2>\n<h4 id=\"无重复字符的最长字串\">3.无重复字符的最长字串</h4>\n<p>滑动窗口，利用集合维护一个没有重复字符的字符串，不断枚举右指针指向的字符，并在集合中判断它在所维护的字符串中是否出现过，如果出现过，就不断移动所维护的字符串的左边界，使得所维护的字符串中没有与此时右指针指向的字符串重复的字符。然后插入右指针指向的字符，更新答案。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">char</span>&gt; st;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>; right &lt; s.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不断滑动右指针，直到当前右指针指向的字符没有重复</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (st.<span class=\"built_in\">count</span>(s[right])) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前右指针指向的字符在st中有重复的，所以不断滑动左指针，并擦去st中的左指针字符</span></span><br><span class=\"line\">                st.<span class=\"built_in\">erase</span>(s[left++]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当滑动完成，此时右指针指向的字符在st中没有重复的，插入右指针的字符 更新答案</span></span><br><span class=\"line\">            st.<span class=\"built_in\">insert</span>(s[right]);</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"找到字符串中所有字母异位词\">438.找到字符串中所有字母异位词</h4>\n<p>首先我想到的是暴力解法，利用每次在<code>s</code>中截取一段长度等于<code>p</code>的子字符串。然后比较两个字符串是否是异位字符串。这种方法比较直接，实现起来也没有难度。我用的是字典来比较字符串是否是异位字符串，但是时间复杂度很高。不出意料的超时了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">findAnagrams</span><span class=\"params\">(string s, string p)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map &lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp_1;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            mp_1[p[i]] ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector &lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">        unordered_map &lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp_2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = p.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; right &lt; s.<span class=\"built_in\">size</span>();left++, right++) &#123;</span><br><span class=\"line\">            mp_2.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">                mp_2[s[i]]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> mp_1_ : mp_1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp_2[mp_1_.first] != mp_1_.second) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                res.<span class=\"built_in\">push_back</span>(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接着想，这个解法中可以优化的点在哪里？首先分析时间复杂度，一个最外层的循环，内部是有两个循环，一个循环记录当前的子字符串的字典集合，另外一个循环进行比较两个字符串。最坏的情况就是\n<span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\n<p>此时其实有一个可以优化的点，就是不需要每次重复循环计算<code>mp_2</code>，我们只需要减去上次的左端点，在加上这次的右端点即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">findAnagrams</span><span class=\"params\">(string s, string p)</span> </span>&#123;</span><br><span class=\"line\">        vector &lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() &lt; p.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        unordered_map &lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp_1;</span><br><span class=\"line\">        unordered_map &lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp_2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            mp_1[p[i]] ++;</span><br><span class=\"line\">            mp_2[s[i]] ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = p.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; right &lt; s.<span class=\"built_in\">size</span>();left++, right++) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                mp_2[s[left - <span class=\"number\">1</span>]] --;</span><br><span class=\"line\">                mp_2[s[right]] ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> mp_1_ : mp_1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mp_2[mp_1_.first] != mp_1_.second) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                res.<span class=\"built_in\">push_back</span>(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>经过这次优化，就通过了。</p>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2024/05/06/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/",
            "url": "https://chnhqz.github.io/2024/05/06/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/",
            "title": "论文阅读",
            "date_published": "2024-05-06T02:19:12.000Z",
            "content_html": "<h3\nid=\"selective-hourglass-mapping-for-universal-image-restoration-based-on-diffusion-model\">19.Selective\nHourglass Mapping for Universal Image Restoration Based on Diffusion\nModel</h3>\n<p><strong>基于扩散模型的全局图像恢复的选择性沙漏映射</strong></p>\n<p><strong>摘要：</strong>\n\"通用图像恢复是实际和潜在的计算机视觉任务，适用于现实世界的应用。该任务的主要挑战是同时处理不同的退化分布。现有方法主要利用任务特定条件（例如，提示）来引导模型分别学习不同的分布，称为多部分映射。然而，这对于通用模型学习并不适用，因为它忽略了不同任务之间的共享信息。在这项工作中，我们提出了一种基于扩散模型的先进选择性沙漏映射策略，称为DiffUIR。两个新颖的考虑使我们的DiffUIR非常规。首先，我们为模型配备了强大的条件指导，以获得扩散模型的准确生成方向（选择性）。更重要的是，DiffUIR将灵活的共享分布项（SDT）优雅而自然地整合到扩散算法中，逐渐将不同的分布映射到共享分布中。在反向过程中，结合SDT和强条件指导，DiffUIR迭代地将共享分布引导到具有高图像质量的任务特定分布（沙漏）。没有花哨的东西，仅通过修改映射策略，我们在五个图像恢复任务中取得了最先进的性能，在通用设置和零次通用化设置中有22个基准。令人惊讶的是，仅使用轻量级模型（仅0.89M），我们就能实现出色的性能。源代码和预训练模型可在\nhttps://github.com/iSEE-Laboratory/DiffUIR 找到。\"</p>\n<p><strong>1.Introduction</strong></p>\n<p>通用图像恢复旨在通过单一模型处理不同的图像恢复任务，在现实世界的机器人导航\n[3] 和自动驾驶 [4]\n等领域具有广泛的应用。通过单一模型处理不同的图像恢复任务的主要挑战是同时学习各种分布。现有的通用图像恢复方法\n[24, 31, 33, 40, 57]\n主要利用多编码器架构或提示大规模模型，如图1所示。按照\n[63]，通过这种方式，它们将在一个模型中学习不同的分布映射，通过在满足特定条件时引导模型分别学习不同的分布（即多部分映射）。尽管强大的条件指导能够保持一定的图像质量，但它们忽视了不同任务可能共享信息的事实，这些信息有潜力补充和增强单一任务的性能。例如，在去雨数据集中，雨天和雾天通常同时发生。试图独立学习这两种退化类型可能无法解决这种情况。</p>\n<p><img loading=\"lazy\" data-src=\"截屏2024-05-06 10.48.50.png\" alt=\"截屏2024-05-06 10.48.50\" style=\"zoom:50%;\" /></p>\n<p>图1.\n对比我们的DiffUIR与现有的通用图像恢复方法的示意图，现有方法主要设计任务特定模块来处理不同的分布，这迫使通用模型（橙色模块）同时学习不同的分布，称为多部分映射。相比之下，所提出的DiffUIR将不同的分布映射到一个共享分布中（即注意，这不是纯高斯分布），同时保持强大的条件指导。通过这种方式，DiffUIR使通用模型仅学习一个共享分布，并将共享分布引导到一个任务特定的分布，称为选择性沙漏映射。放大以获得最佳视图。</p>\n<p>在这项工作中，我们旨在捕捉不同任务之间的共享信息，以实现更好的通用图像恢复学习。我们用基于条件扩散模型的新颖选择性沙漏映射策略替换了多部分映射策略，称为DiffUIR。两个新颖的设计使我们的DiffUIR非同寻常。首先，受RDDM\n[28]的启发，我们将条件（即降级图像）明确融合到扩散模型的扩散算法中，并将条件与扩散目标广泛连接起来。通过这种方式，DiffUIR具备了类似于多部分映射方法的强大条件指导能力。其次，为了实现共享分布映射，我们优雅而自然地将一个名为SDT的共享分布项整合到扩散算法中，逐渐调整算法中条件的权重。通过建模这两个问题，在前向扩散过程中，DiffUIR逐渐减小条件的权重，各种分布将接近一个共享分布，使模型能够捕捉不同任务之间的共享信息。<strong>值得注意的是，我们将不同的分布映射到一个不纯的高斯分布中，留下了轻微的条件，正如[10,\n27,\n28]中所述，纯高斯噪声不包含任何任务信息，这不利于良好的生成质量。</strong></p>\n<blockquote>\n<p>这句话的意思是在反向去噪的过程中不直接使用纯高斯噪声？而是选择由分布映射到一个不纯的高斯分布中，留下轻微的条件，在这个不纯的高斯分布的基础上进行去噪？我这样理解有问题吗？</p>\n</blockquote>\n<p>在反向过程中，在强条件和SDT的引导下，DiffUIR将逐渐从共享分布中恢复到任务特定分布。通过仅修改映射策略，没有花里胡哨的，我们在五个图像恢复基准测试中大幅超越了所有现有的通用方法。值得注意的是，我们只使用了参数为36.26M的模型，比现有的基于大规模模型的通用方法少至少5倍，但性能更高。此外，为了满足实际应用的需求，我们提出了几个我们的DiffUIR的轻量级版本，其中微型版本DiffUIR-T仅包含0.89M个参数，但表现出色。为了进一步验证我们通用模型的能力，我们进行了已知任务和未知任务设置下的零次通用化实验，与其他通用方法相比，也实现了最先进的性能。总之，我们的主要贡献如下：</p>\n<ol type=\"1\">\n<li>提出了一种新颖的选择性沙漏映射方法DiffUIR，它可以自由地将各种分布转换为一个共享分布，并使模型学习不同任务之间的共享信息。此外，配备强条件的DiffUIR将共享分布引导到具有高图像质量的任务特定分布中。</li>\n<li>我们通过实证验证，我们的分布映射策略是通用图像恢复任务的更好解决方案。仅通过改变映射策略，我们甚至超越了基于大规模模型的通用图像恢复方法，而参数量仅为1/5。</li>\n<li>我们的DiffUIR符合实际场景的需求。我们在零次通用化设置中超越了其他通用方法。我们的微型版本DiffUIR-T仅包含0.89M个参数，但性能出色。</li>\n</ol>\n<p><strong>2.Related Work</strong></p>\n<p><strong>2.1. Image Restoration</strong></p>\n<p>图像恢复旨在从其降级对应物中恢复出干净的图像，这是一个基础且重要的计算机视觉领域，涵盖了各种任务，如去雨、去雪、低光增强、去模糊和去雾等。现有的作品主要集中在通过独特的模型设计解决一个特定任务。虽然这些方法取得了很大的性能成功，但它们忽视了一个现实中的事实，即在实际应用中，人们更喜欢一个能够处理所有降级类型的模型。最近一些先驱研究了通用图像恢复模型并取得了一些进展。AirNet使用一个模块将不同的分布映射到由对比学习约束的一个共享分布中，这对训练来说是困难的，并且性能受到限制。IDR观察到不同的降级类型可以通过奇异值分解进行划分，并且可以通过重新制定奇异值和向量来重新计算干净的图像。Painter、ProRes和DA-CLIP旨在通过提示学习来整合大规模模型的全部潜力。尽管它们利用了大规模模型的先验知识，但由于使用了多部分映射策略，它们的性能仅有限，并且需要大量的参数。在这项工作中，我们提出了一种基于条件扩散模型的选择性沙漏映射策略，一次装备了模型具有共享分布映射和强条件引导的能力。由于这些能力，我们实现了出色的结果，而无需依赖复杂的训练流水线或大规模模型或预训练。</p>\n<p><strong>2.2.Diffusion Model</strong></p>\n<p>作为密集估计任务的一部分，许多研究人员将扩散模型应用于图像恢复。RainDiffusion\n[62]将循环框架融入条件扩散模型中，在无监督设置中表现良好；DDNM\n[58]构建了一个优雅的身份方程，自然地将条件添加到扩散模型的反向过程中，对线性图像恢复任务效果显著；RDDM\n[28]将扩散方向从目标域改变为输入域，自然地将条件（即降级图像）集成到正向过程中，并在几个图像恢复基准测试中取得了令人印象深刻的性能。以上方法提出了一些关于条件约束的有趣修改，实现了强大的条件指导。然而，它们都不适合通用图像恢复学习。标准条件扩散模型的扩散终点是标准高斯噪声，没有任何特定任务的上下文信息，正如[10,\n27,\n28]中所述，它因为条件是以中介方式添加（即串联）而导致恢复质量不佳；RDDM\n[28]将条件明确融合到扩散算法中，实现了高质量的图像。然而，多元映射问题出现了，因为不同任务的端点是可区分的，并且属于不同的分布。在这项工作中，我们解决了现有条件扩散模型的缺点，并同时实现了共享分布映射和强大的条件建模。</p>\n<p><strong>3.DiffUIR</strong></p>\n<p>在本节中，我们首先受RDDM启发，探索了扩散模型的适当条件机制，然后介绍了我们的选择性沙漏映射策略，该策略具备了共享分布映射和强大的条件引导能力，以实现更好的通用学习效果。</p>\n<p><strong>3.1.Revist the condition mechanism of RDDM</strong></p>\n<p>RDDM [28]遵循标准的T步扩散模型[14,\n48]，其中包含前向过程和反向过程。在前向过程中，单步噪声可以被写成马尔可夫链：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-13 10.18.10.png\" alt=\"截屏2024-05-13 10.18.10\" style=\"zoom:50%;\" /></p>\n<p>其中 <span class=\"math inline\">\\(I_t\\)</span> 是在时间步 <span\nclass=\"math inline\">\\(t\\)</span> 的扩散结果，<span\nclass=\"math inline\">\\(I_{res}\\)</span> 是退化图像 <span\nclass=\"math inline\">\\(I_{in}\\)</span> 和 清晰图像 <span\nclass=\"math inline\">\\(I_0\\)</span> 的残差 ：<span\nclass=\"math inline\">\\(I_{res} = I_{in} - I_0\\)</span> 。<span\nclass=\"math inline\">\\(\\alpha_t,\\beta_t\\)</span> 分别是 <span\nclass=\"math inline\">\\(I_{res}\\)</span>\n噪声系数和高斯噪声系数。他们将噪声目标从<span\nclass=\"math inline\">\\(I_0\\)</span>（即之前图像恢复扩散方法[38,\n62]中使用的）更改为了<span\nclass=\"math inline\">\\(I_{res}\\)</span>，遵循了残差学习的原则[13]。通过马尔可夫链的性质和重新参数化技术[19,\n20]，单步噪声分布可以扩展为任意步骤的噪声形式，如下所示：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513102646412.png\" alt=\"image-20240513102646412\" style=\"zoom:50%;\" /></p>\n<p>其中， <span\nclass=\"math inline\">\\(\\bar{\\alpha}_t=\\sum^t_{i=1}\\alpha_i,\\bar{\\beta}_t=\\sqrt{\\sum^t_{i=1}\\beta^2_i}\\)</span>\n当 <span class=\"math inline\">\\(t\\to T, \\bar{\\alpha}_T=1\\)</span>\n此时，公式可以被写为 <span\nclass=\"math inline\">\\(I_T=I_{in}+\\bar{\\beta}_T\\epsilon\\)</span> 。\n这表明端点仅与退化图像和添加的噪声相关，自然地将条件添加到模型训练中。在反向过程中，RDDM使用\n<span\nclass=\"math inline\">\\(q(I_{t-1}|I_t,I^{\\theta}_0,I^{\\theta}_{res})\\)</span>\n来模拟真实分布 <span\nclass=\"math inline\">\\(p_{\\theta}(I_{t-1}|I_t)\\)</span>\n，并且它可以被写为马尔可夫链：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513103504239.png\" alt=\"image-20240513103504239\" style=\"zoom:50%;\" /></p>\n<p>在这里，θ 代表基于模型输出获得的项，0 代表根据 [48]\n中的确定性隐式采样方程使用的结果。</p>\n<p>作为 RDDM\n的终点包含了条件信息（即，降级图像），它是扩散模型的一个很好的条件机制，我们称之为显式条件；此外，他们广泛地将条件与扩散目标进行连接，从而获得更好的图像质量，称为隐式条件。然而，RDDM\n中的强条件机制并不适合用于通用训练，因为条件始终存在，这意味着他们强迫模型分别学习不同的降级分布，导致多部分映射，无法捕获不同任务之间的共享信息。</p>\n<p><strong>3.2. Selective Hourglass Mapping</strong></p>\n<p>我们方法的目标是同时实现强条件引导和共享分布映射。我们采用了RDDM的条件机制，并将共享分布项（SDT）整合到扩散算法中，实现了两个组件之间的协同效应。我们展示我们的变体扩散过程如下。分布逼近前向过程。在前向过程中，由于我们采用了RDDM的条件机制，一步扩散过程如下：\n<span\nclass=\"math inline\">\\(I_t=I_{t-1}+\\alpha_tI_{res}+\\beta_t\\epsilon_{t-1}\\)</span>\n。为了进一步实现共享分布映射，我们修改前向过程如下：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/论文阅读/image-20240513104339479.png\" alt=\"image-20240513104339479\" style=\"zoom:50%;\" /></p>\n<p>其中，<span class=\"math inline\">\\(\\delta_tI_{in}\\)</span> 是\nSDT，<span class=\"math inline\">\\(\\delta\\)</span> 是共享分布项系数，<span\nclass=\"math inline\">\\(\\bar\\delta_t = \\sum^t_{i=1}\\delta_i\\)</span>\n。我们设置 <span class=\"math inline\">\\(\\bar\\delta_t\\)</span> 从 0 逐渐到\n0.9 。这将逐渐减少条件的影响。当 <span class=\"math inline\">\\(t\\to\nT\\)</span> 时，<span class=\"math inline\">\\(\\bar\\alpha_T = 1\\)</span>\n,公式可以重写为 <span class=\"math inline\">\\(I_T = (1-\\bar\\delta_T)I_{in}\n+ \\bar \\beta_T\\epsilon = 0.1I_{in}+\\bar\\beta_T\\epsilon\\)</span>\n，这接近一个不纯的高斯分布（我们在实验中进一步验证）。请注意，我们采用渐进逼近策略来自然地适应扩散模型的扩散过程。</p>\n<h3\nid=\"structure-matters-tackling-the-semantic-discrepancy-in-diffusion-models-for-image-inpainting\">20.Structure\nMatters: Tackling the Semantic Discrepancy in Diffusion Models for Image\nInpainting</h3>\n<h3\nid=\"condition-aware-neural-network-for-controlled-image-generation\">21.Condition-Aware\nNeural Network for Controlled Image Generation</h3>\n<h3\nid=\"accelerating-diffusion-sampling-with-optimized-time-steps\">22.Accelerating\nDiffusion Sampling with Optimized Time Steps</h3>\n<h3\nid=\"balancing-act-distribution-guided-debiasing-in-diffusion-models\">23.Balancing\nAct: Distribution-Guided Debiasing in Diffusion Models</h3>\n<h3\nid=\"diffir-efficient-diffusion-model-for-image-restoration\">24.DiffIR:\nEfficient Diffusion Model for Image Restoration</h3>\n<h3 id=\"residual-denoising-diffusion-models\">25.Residual Denoising\nDiffusion Models</h3>\n<p><strong>摘要：</strong>\n我们提出了残差去噪扩散模型（RDDM），这是一种新颖的双重扩散过程，将传统的单一去噪扩散过程解耦为残差扩散和噪声扩散。这种双重扩散框架将最初仅用于图像恢复的基于去噪的扩散模型扩展为一个统一且可解释的模型，通过引入残差实现图像生成和恢复的统一。具体来说，我们的残差扩散表示从目标图像到退化输入图像的定向扩散，并明确引导图像恢复的反向生成过程，而噪声扩散表示扩散过程中的随机扰动。残差优先考虑确定性，而噪声强调多样性，使RDDM能够有效地统一具有不同确定性或多样性要求的任务，例如图像生成和恢复。我们通过系数转换证明了我们的采样过程与DDPM和DDIM的一致性，并提出了一个部分路径独立的生成过程，以更好地理解反向过程。值得注意的是，我们的RDDM使得仅通过L1损失和批量大小为1进行训练的通用UNet能够与最先进的图像恢复方法竞争。我们提供了代码和预训练模型，以鼓励对我们创新框架的进一步探索、应用和开发（https://github.com/nachifur/RDDM）。</p>\n<p><strong>1.Introduction</strong></p>\n<p>在现实生活中，扩散通常以涉及多个并发过程的复杂形式发生，例如多种气体的扩散或不同类型的波或场的传播。这让我们思考，基于去噪的扩散模型\n[17, 51] 是否在仅关注去噪方面存在局限性。当前基于扩散的图像恢复方法 [22,\n39, 48, 49, 82]\n通过使用降级图像作为条件输入来将扩散模型扩展到图像恢复任务中，以隐式地指导反向生成过程，而不修改原始的去噪扩散过程\n[17,\n51]。然而，从噪声开始的反向过程似乎是不必要的，因为降级图像已经是已知的。正向过程对于图像恢复来说是不可解释的，因为扩散过程不包含任何关于降级图像的信息，如图1(a)所示。</p>\n<p>在本文中，我们探索了一种新颖的双重扩散过程，并提出了残差去噪扩散模型（RDDM），可以解决单一去噪过程对图像恢复的不可解释性。在RDDM中，我们将先前的扩散过程解耦为残差扩散和噪声扩散。残差扩散优先考虑确定性，并表示从目标图像到条件输入图像的定向扩散，噪声扩散强调多样性，并表示扩散过程中的随机扰动。因此，我们的RDDM可以统一需要不同确定性或多样性的不同任务，例如图像生成和恢复。与基于去噪的扩散模型相比，RDDM中的残差清晰地指示了正向扩散方向，并明确地指导了图像恢复的反向生成过程，如图1(b)所示。</p>\n<figure>\n<img loading=\"lazy\" data-src=\"截屏2024-05-06%2016.02.59.png\"\nalt=\"截屏2024-05-06 16.02.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-06 16.02.59</figcaption>\n</figure>\n<p>具体来说，我们重新定义了一种新的正向过程，允许残差和噪声同时扩散，在其中目标图像逐渐扩散成纯噪声图像用于图像生成，或者扩散成带有噪声的输入图像用于图像恢复。与之前的去噪扩散模型[17,\n51]不同，其使用一个系数表来控制噪声和图像的混合比例，我们的RDDM使用两个独立的系数表来控制残差和噪声的扩散速度。我们发现，这种独立的扩散属性在反向生成过程中也是明显的，例如，在测试过程中在一定范围内调整系数表不会影响图像生成结果，并且首先移除残差，然后去噪（见图2），也可以生成语义一致的图像。我们的RDDM与广泛使用的去噪扩散模型兼容，即，通过转换系数表，我们的采样过程与DDPM[17]和DDIM[51]的采样过程一致。此外，我们的RDDM本身支持条件输入，使得仅使用ℓ1损失和批量大小为1进行训练的网络能够与最先进的图像恢复方法竞争。我们预见我们的模型可以促进统一且可解释的图像分布转换方法，突显了残差和噪声对于扩散模型同样重要的事实，例如，残差优先考虑确定性，而噪声强调多样性。本文的贡献总结如下：\n-\n我们提出了一种新颖的双重扩散框架，通过引入残差来解决单一去噪过程对于图像恢复的不可解释性。我们的残差扩散表示了从目标图像到条件输入图像的定向扩散。\n-\n我们引入了一个部分路径独立的生成过程，将残差和噪声解耦，突出了它们在控制方向性残差偏移（确定性）和随机扰动（多样性）中的作用。\n-\n我们设计了一个自动目标选择算法，用于选择对于未知新任务是否预测残差或噪声。\n-\n大量实验表明，我们的方法可以适用于不同的任务，例如图像生成、恢复、修补和翻译，聚焦于确定性或多样性，并涉及成对或非成对数据。</p>\n<p><strong>2.Related Work</strong></p>\n<p>去噪扩散模型（例如，DDPM [17]、SGM [52, 53] 和 DDIM\n[51]）最初是为图像生成而开发的。基于DDPM和DDIM的后续图像恢复方法 [14,\n39, 48] 将降级图像作为条件输入提供给一个去噪网络，例如DvSR [62]、SR3\n[49] 和 WeatherDiffusion\n[82]，这些方法通常需要较大的采样步长和批量大小。此外，在这些方法中，从噪声开始的反向过程似乎对于图像恢复任务是不必要且低效的。因此，SDEdit\n[41]、ColdDiffusion [2]、InDI [11] 和 I2SB [29]\n提出直接从降级图像或带有噪声的降级图像生成清晰图像。InDI [11] 和 I2SB\n[29]\n还提出了统一的图像生成和恢复框架，与我们提出的RDDM最相关。具体来说，InDI、I2SB\n和我们的RDDM的正向扩散一致地采用了三个术语的混合（即，输入图像Iin、目标图像I0\n和噪声 ϵ），超出了基于去噪的扩散模型 [17,\n51]，该模型包括了两个术语的混合（即，I0 和 ϵ）。然而，InDI 和 I2SB\n选择估计目标图像或其线性变换项来替换噪声估计，类似于我们RDDM的一个特例（SM-Res）。相比之下，我们引入了残差估计，同时为生成和恢复任务采用了噪声。我们的RDDM可以进一步扩展DDPM\n[17]、DDIM [51]、InDI [11] 和 I2SB [29]\n到独立的双重扩散过程，并为多维扩散过程铺平道路。我们强调残差和噪声同样重要，例如，残差优先考虑确定性，而噪声强调多样性。此外，我们的工作与系数表设计\n[44, 48]、方差策略优化 [3, 4, 24, 44]、叠加图像分解 [12, 81]、曲线积分\n[47]、随机微分方程 [53] 和图像恢复 [1, 32, 56, 70, 72, 75] 中的残差学习\n[15] 相关。详细比较请参见附录 A.5。</p>\n<p><strong>4.Residual Denoising Diffusion Models</strong></p>\n<p>我们的目标是发展一种双重扩散过程去统一和融合图像生成和恢复。我们修改了传统DDPM中<span\nclass=\"math inline\">\\(I_T =\nϵ\\)</span>的表示形式，将其改为在我们的RDDM中<span\nclass=\"math inline\">\\(I_T = I_{in} + ϵ\\)</span>，其中<span\nclass=\"math inline\">\\(I_{in}\\)</span>是一个降级图像（例如，阴影、低光或模糊图像）用于图像恢复，对于图像生成则设置为0。这种修改与广泛使用的去噪扩散模型兼容。例如，\n<span class=\"math inline\">\\(I_T = 0 + ϵ\\)</span>\n是完全的噪声，对应生成，对于图像恢复， <span\nclass=\"math inline\">\\(I_T\\)</span> 是一个带有噪声的降级图像（<span\nclass=\"math inline\">\\(I_{in} + ϵ\\)</span>），如图3所示。</p>\n<figure>\n<img loading=\"lazy\" data-src=\"截屏2024-05-06%2020.18.45.png\"\nalt=\"截屏2024-05-06 20.18.45\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-06 20.18.45</figcaption>\n</figure>\n<p>图3:提出的残差去噪扩散模型是一个统一图像生成和修复的框架，我们在RDDM中引入残差（<span\nclass=\"math inline\">\\(I_{res}\\)</span>），重新定义正向扩散过程，使其涉及残差和噪声的同时扩散。残差\n<span class=\"math inline\">\\(I_{res} = I_{in} - I_0\\)</span>\n扩散表示从目标图像 <span class=\"math inline\">\\(I_0\\)</span>\n到输入的退化图像 <span class=\"math inline\">\\(I_{in}\\)</span>\n的直接扩散。而噪声扩散表示扩散过成中的随机扰动。在RDDM中 <span\nclass=\"math inline\">\\(I_0\\)</span> 逐渐扩散到 <span\nclass=\"math inline\">\\(I_T = I_{in} + ϵ  ϵ ∼ N (0, I)\\)</span>\n。在第三列，对于图像生成 <span class=\"math inline\">\\(I_{in} = 0\\)</span>\n此时 <span class=\"math inline\">\\(I_T\\)</span>\n是一个完全的噪声，并且对于图像恢复来说，<span\nclass=\"math inline\">\\(I_T\\)</span> 是一个携带退化图像的噪声， <span\nclass=\"math inline\">\\(I_{in}\\)</span> 是退化图像。</p>\n<p>修正后的正向过程从 <span class=\"math inline\">\\(I_0\\)</span> 到 <span\nclass=\"math inline\">\\(I_{in} + \\epsilon\\)</span> ,涉及将 <span\nclass=\"math inline\">\\(I_0\\)</span> 逐渐降级为 <span\nclass=\"math inline\">\\(I_{in}\\)</span> ，并注入噪声 <span\nclass=\"math inline\">\\(\\epsilon\\)</span>\n。这自然产生了一个双重扩散过程，一个是残差扩散来建模从 <span\nclass=\"math inline\">\\(I_0\\)</span> 到 <span\nclass=\"math inline\">\\(I_{in}\\)</span>\n的过渡，另一个是噪声扩散。例如，从无阴影图像 <span\nclass=\"math inline\">\\(I_0\\)</span> 到带阴影图像的带噪声图像 <span\nclass=\"math inline\">\\(I_T\\)</span>\n的正向扩散过程涉及逐渐添加阴影和噪声。</p>\n<p>在接下来的小节中，我们详细介绍了RDDM背后的基本理论和方法论。受到残差学习的启发，我们重新定义了第4.1节中每个正向扩散过程的步骤。对于反向过程，我们在第4.2节中提出了一个训练目标，用于预测正向过程中注入的残差和噪声。在第4.3节中，我们提出了三种采样方法，即残差预测（SM-Res）、噪声预测（SM-N）和“残差和噪声预测”（SM-Res-N）。</p>\n<p><strong>4.1 Directional Residual Diffusion Process with\nPerturbation</strong></p>\n<p>为了建模图像质量的逐渐降低和噪声的增加，我们定义了RDDM中单个正向过程步骤如下：\n<span class=\"math display\">\\[\nI_t = I_{t-1} + I^t_{res} \\quad \\quad I^t_{res} \\sim\n\\mathcal{N(\\alpha_tI_{res},\\beta^2_{t}I)}\n\\]</span> 其中 <span class=\"math inline\">\\(I^t_{res}\\)</span> 代表从状态\n<span class=\"math inline\">\\(I_{t-1}\\)</span> 到状态 <span\nclass=\"math inline\">\\(I_t\\)</span>\n的方向均值偏移（残差扩散）与随机扰动（噪声扩散），其中 <span\nclass=\"math inline\">\\(I^t_{res}\\)</span> 中的残差 <span\nclass=\"math inline\">\\(I_{res}\\)</span> 是<span\nclass=\"math inline\">\\(I_{in}\\)</span> 和 <span\nclass=\"math inline\">\\(I_0\\)</span> 之间的差异（<span\nclass=\"math inline\">\\(I_{res} = I_{in} - I_{0}\\)</span>）\n，而两个独立的系数调度 <span class=\"math inline\">\\(\\alpha_t\\)</span> 和\n<span class=\"math inline\">\\(\\beta_t\\)</span>\n分别控制残差和噪声扩散。事实上，从 <span\nclass=\"math inline\">\\(I_0\\)</span> 中采样 <span\nclass=\"math inline\">\\(I_t\\)</span> 更简单。 <span\nclass=\"math display\">\\[\nI_t = I_{t-1} + \\alpha_tI_{res} + \\beta_t\\epsilon_{t-1} ,\\\\=I_{t-2} +\n(\\alpha_{t-1} + \\alpha_t)I_{res} +\n(\\sqrt{\\beta^2_{t-1}+\\beta^2_t})\\epsilon_{t-2} \\\\ =\\cdots\\\\=I_0 +\n\\bar{\\alpha_t}I_{res} + \\bar{\\beta_t}\\epsilon, \\tag{7}\n\\]</span> 其中，<span class=\"math inline\">\\(\\epsilon_{t-1},\\dots\n,\\epsilon \\sim \\mathcal{N(0,I)}\\)</span> ， ${}<em>t=^t</em>{i=1}_i ,\n{}_t = $ 如果 <span class=\"math inline\">\\(t= T, \\bar{\\alpha}_T = 1\nI_T=I_{in}+\\bar{\\beta}_T\\epsilon\\)</span> 。<span\nclass=\"math inline\">\\(\\bar{\\beta}_T\\)</span>\n可以控制图像恢复中噪声扰动的强度（例如，<span\nclass=\"math inline\">\\(\\bar{\\beta}^2_T=0.01\\)</span> 用于阴影消除）然而\n<span class=\"math inline\">\\(\\bar{\\beta}^2_T=1\\)</span>\n用于图像生成，从方程6中，可以定义正向过程中的联合概率分布如下： <span\nclass=\"math display\">\\[\nq(I_{1:T}|I_0,I_{res}):=\\Pi^T_{t=1}q(I_t|I_{t-1},I_{res}), \\tag{8} \\\\\nq(I_t|I_{t-1},I_{res}):=\\mathcal{N}(I_t;I_{t-1}+\\alpha_tI_{res},\\beta^2_tI).\n\\]</span> 方程7定义了边缘概率分布 <span\nclass=\"math inline\">\\(q(I_t|I_0,I_{res})=\\mathcal{N}(I_t;I_0+\\bar{\\alpha}_tI_{res},\\bar{\\beta}^2_tI)\\)</span>\n事实上，我们的RDDM的正向扩散是三个项（即<span\nclass=\"math inline\">\\(I_0,I_{res},\\epsilon\\)</span> ）\n的混合，扩展了广泛使用的去噪扩散模型，后者是两个项（即 <span\nclass=\"math inline\">\\(I_0,\\epsilon\\)</span> ）\n的混合，类似的混合形式在几个并行的工作中也可以看到，例如 InDI, I2SB,\nIRSDE, REsShift。</p>\n<p><strong>4.2. Generation Process and Training Objective</strong></p>\n<p>在正向过程中，残差 <span class=\"math inline\">\\(I_{res}\\)</span>\n和噪声 <span class=\"math inline\">\\(\\epsilon\\)</span> 逐渐添加到 <span\nclass=\"math inline\">\\(I_0\\)</span> 中，然后合成为 <span\nclass=\"math inline\">\\(I_t\\)</span> 而从 <span\nclass=\"math inline\">\\(I_T\\)</span> 到 <span\nclass=\"math inline\">\\(I_0\\)</span>\n的逆过程及对在正向过程中注入的残差和噪声的估计。我们可以训练一个残差网络\n<span class=\"math inline\">\\(I^{\\theta}_{res}(I_t,t,I_{in})\\)</span>\n来预测 <span class=\"math inline\">\\(I_{res}\\)</span> ，以及一个噪声网络\n<span class=\"math inline\">\\(\\epsilon_{\\theta}(I_t,t,I_{in})\\)</span>\n来估计 <span class=\"math inline\">\\(\\epsilon\\)</span> 。使用公式 7\n我们获得了估计的目标图像 <span class=\"math inline\">\\(I^{\\theta}_{0} =\nI_t - \\bar{\\alpha}_tI^{\\theta}_{res} -\n\\bar{\\beta}_t\\epsilon_{\\theta}\\)</span> 。如果给定了 <span\nclass=\"math inline\">\\(I^{\\theta}_{0}\\)</span> 和 <span\nclass=\"math inline\">\\(I^{\\theta}_{res}\\)</span> ，则生成过程定义为：\n<span class=\"math display\">\\[\np_{\\theta} (I_{t-1}|I_t) := q_{\\sigma} (I_{t-1}|I_t,\nI^{\\theta}_0,I^{\\theta}_{res}) \\tag{10}\n\\]</span> 其中，从<span class=\"math inline\">\\(I_t\\)</span>到<span\nclass=\"math inline\">\\(I_{t-1}\\)</span>的传递概率. <span\nclass=\"math inline\">\\(q_{\\sigma}(I_{t-1}|I_t, I_0, I_{res})^2\\)</span>\n为：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-11 11.33.28.png\" alt=\"截屏2024-05-11 11.33.28\" style=\"zoom:50%;\" /></p>\n<p>其中，<span class=\"math inline\">\\(\\sigma ^2_t =\n\\eta\\beta^2_t\\bar{\\beta}^2_{t-1} / \\bar{\\beta}^2_t\\)</span> , <span\nclass=\"math inline\">\\(\\eta\\)</span> 控制生成过程是随机的 <span\nclass=\"math inline\">\\((\\eta = 1)\\)</span> 还是确定性的 <span\nclass=\"math inline\">\\(\\eta=0\\)</span> 利用公式 10 和 公式 11\n，可以通过以下方式从 <span class=\"math inline\">\\(I_t\\)</span> 中采样\n<span class=\"math inline\">\\(I_{t-1}\\)</span> 。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/论文阅读/截屏2024-05-11 11.45.49.png\" alt=\"截屏2024-05-11 11.45.49\" style=\"zoom:50%;\" /></p>\n<p>其中， <span class=\"math inline\">\\(\\epsilon_t \\sim\n\\mathcal{N}(0,I)\\)</span> 。当 <span class=\"math inline\">\\(\\eta =\n1\\)</span> ，我们的 RDDM 具有受限制的总方差，而DDPM具有保持方差，当\n<span class=\"math inline\">\\(\\eta = 0\\)</span> 采样过程是确定性的。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/论文阅读/截屏2024-05-11 11.56.46.png\" alt=\"截屏2024-05-11 11.56.46\" style=\"zoom:50%;\" /></p>\n<p>我们推导出以下简化的损失函数用于训练（附录 A.1）：</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-05-11 11.57.45.png\" alt=\"截屏2024-05-11 11.57.45\" style=\"zoom:50%;\" /></p>\n<p>其中，超参数 <span\nclass=\"math inline\">\\(\\lambda_{res},lambda_{\\epsilon}\\in\n\\{0,1\\}\\)</span> ，以及训练输入图像 <span\nclass=\"math inline\">\\(I_t\\)</span> 是通过 <span\nclass=\"math inline\">\\(I_0, I_{res}, \\epsilon\\)</span>\n综合得到的。也可以使用 <span class=\"math inline\">\\(I_{in}\\)</span>\n综合生成 <span class=\"math inline\">\\(I_t\\)</span> <span\nclass=\"math display\">\\[\nI_t = I_{in} + (\\bar{\\alpha}_t  - 1 )I_{res} + \\bar{\\beta}_t\\epsilon\n\\]</span> <strong>5.Decoupled Dual Diffusion\nFramework（解耦双重扩散框架）</strong></p>\n<p>在对RDDM和DDPM进行对比分析后，我们发现DDPM确实涉及到了残差和噪音的同时扩散，这在附录A.3中的方程48等价于方程44时显而易见。我们发现可以将这两种扩散方式解耦。第5.1节介绍了解耦的前向扩散过程。在第5.2节中，我们提出了一种部分路径独立的生成过程，并将同时采样解耦为先移除残差，然后移除噪音（参见图6(d)和图17）。这种解耦的双重扩散框架揭示了DDPM生成过程中残差去除和去噪的作用。</p>\n<p>该模型提出了一种残差去噪模型\n（RDDM）可用于图像生成和图像修复。该文最大的特点是提出一种双扩散模型，在扩散过程中不仅包含噪声\n<span class=\"math inline\">\\(\\epsilon\\)</span> 扩散，还包含残差信息 <span\nclass=\"math inline\">\\(I_{res}\\)</span>\n的扩散，这里的残差信息就是退化图像 <span\nclass=\"math inline\">\\(I_{in}\\)</span> 和 <span\nclass=\"math inline\">\\(I_0\\)</span> 之间的差值 （<span\nclass=\"math inline\">\\(I_{res} = I_{in} - I_0\\)</span>）\n。<strong>接下来我只讨论在引入条件的过程中的图像修复内容。</strong></p>\n<p>首先，在传统的扩散模型中，我们的正向扩散过程是： <span\nclass=\"math display\">\\[\nI_t = \\sqrt{\\bar{\\alpha}_t} I_0+\\sqrt{1-\\bar{\\alpha}_t} \\epsilon \\tag{1}\n\\]</span> 本文中的正向扩散过程： <span class=\"math display\">\\[\nI_t = I_0 + \\bar{\\alpha}_tI_{res} + \\bar{\\beta}_t\\epsilon   \\tag{2}\n\\]</span> 其中，<span class=\"math inline\">\\(1-\\bar{\\alpha}_t =\n\\bar{\\beta}_t\\)</span>\n。这样我们可以看到两个正向扩散的过程十分相近。那么作者这点在代码中的体现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机符合正态分布的噪声</span></span><br><span class=\"line\">noise = default(noise, <span class=\"keyword\">lambda</span>: torch.randn_like(x_start))</span><br><span class=\"line\"><span class=\"comment\"># 残差 为 退化图像和清晰图像的差</span></span><br><span class=\"line\">x_res = x_input - x_start</span><br><span class=\"line\"></span><br><span class=\"line\">x_t = self.q_sample(x_start, x_res, t, noise=noise)</span><br></pre></td></tr></table></figure>\n<p><code>q_sample()</code>\n是封装好的正向扩散过程，这也是与原始<code>DDPM</code>\n不同的点。我们可以列出两者代码对比一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">q_sample</span>(<span class=\"params\">self, x_start, continuous_sqrt_alpha_cumprod, noise=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">\t\tnoise = default(noise, <span class=\"keyword\">lambda</span>: torch.randn_like(x_start))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># random gama</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        continuous_sqrt_alpha_cumprod * x_start +</span><br><span class=\"line\">        (<span class=\"number\">1</span> - continuous_sqrt_alpha_cumprod**<span class=\"number\">2</span>).sqrt() * noise</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">q_sample</span>(<span class=\"params\">self, x_start, x_res, t, noise=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    noise = default(noise, <span class=\"keyword\">lambda</span>: torch.randn_like(x_start))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        x_start+extract(self.alphas_cumsum, t, x_start.shape) * x_res +</span><br><span class=\"line\">        extract(self.betas_cumsum, t, x_start.shape) * noise</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p>可以明显看出两者之间的区别，当然不仅仅是空格缩进的区别（哈哈）</p>\n<p>其次，<code>RDDM</code> 在扩散过程中需要同时训练两个模型 <span\nclass=\"math inline\">\\(I^{\\theta}_{res}(I_t,t,I_{in})\\)</span> 和 <span\nclass=\"math inline\">\\(\\epsilon_{\\theta}(I_t,t,I_{in})\\)</span>\n来分别预测每一步中应该存在的残差 <span\nclass=\"math inline\">\\(I^{\\theta}_{res}\\)</span> 和每一步中添加的噪声\n<span class=\"math inline\">\\(\\epsilon_{\\theta}\\)</span>\n。其中，模型训练的目标函数分别为： <span class=\"math display\">\\[\nL_{res}(\\theta):=\\mathbb{E}[\\lambda_{res}\\|I_{res} -\nI^{\\theta}_{res}(I_t,t,I_{in}) \\|^2]\\\\\nL_{\\epsilon}(\\theta):=\\mathbb{E}[\\lambda_{\\epsilon}\\| \\epsilon -\n\\epsilon_{\\theta}(I_t,t,I_{in}) \\|^2] \\tag{3}\n\\]</span> 这一部分在代码中体现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model_out = self.model(x_in,</span><br><span class=\"line\">                       [self.alphas_cumsum[t]*self.num_timesteps,</span><br><span class=\"line\">                       self.betas_cumsum[t]*self.num_timesteps],</span><br><span class=\"line\">                       x_self_cond)</span><br><span class=\"line\"><span class=\"comment\"># 这里 x_in 是 torch.cat((x_t, x_input, x_input_condition), dim=1) </span></span><br><span class=\"line\"><span class=\"comment\"># 后续是时间步</span></span><br><span class=\"line\"><span class=\"comment\"># x_self_cond 是与自注意力机制有关，目前不太清楚</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的 model_out 是两个张量</span></span><br><span class=\"line\"><span class=\"comment\"># pred_res = model_out[0]</span></span><br><span class=\"line\"><span class=\"comment\"># pred_noise = model_out[1]</span></span><br><span class=\"line\"><span class=\"comment\"># 这里作者是通过创建两个 unet 模型来实现</span></span><br></pre></td></tr></table></figure>\n<p>紧接着是通过模型训练的目标函数进行损失计算，达到训练模型的目的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_u = self.q_posterior_from_res_noise(pred_res, pred_noise, x, t)</span><br><span class=\"line\">u_gt = self.q_posterior_from_res_noise(x_res, noise, x, t)</span><br><span class=\"line\">loss = <span class=\"number\">10000</span>*self.loss_fn(x_u, u_gt, reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这里主要是拆解一下 <code>self.q_posterior_from_res_noise()</code>\n这个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">q_posterior_from_res_noise</span>(<span class=\"params\">self, x_res, noise, x_t, t</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x_t-extract(self.alphas, t, x_t.shape) * x_res -</span><br><span class=\"line\">           (extract(self.betas2, t, x_t.shape)/extract(self.betas_cumsum, t, x_t.shape)) * noise)</span><br></pre></td></tr></table></figure>\n<p>这里先引入一下原始的 <code>DDPM</code> 是如何计算损失的。 <span\nclass=\"math display\">\\[\nL(\\theta):=\\mathbb{E}_{I_0\\sim q(I_0),\\epsilon\\sim\n\\mathcal{N}(0,I)}[\\|\\epsilon - \\epsilon_{\\theta}(I_t,t)  \\|^2] \\tag{4}\n\\]</span> 可以看出，原始<code>DDPM</code>\n的损失计算十分简单，只需要计算模型预测出来的噪声和原始的噪声的差值即可。但是在\n<code>RDDM</code>\n中，引入了一个新的需要计算的损失，即残差之间的损失。<code>DDPM</code>\n的损失计算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_recon = self.denoise_fn(torch.cat([x_in[<span class=\"string\">&#x27;Input&#x27;</span>], x_noisy], dim=<span class=\"number\">1</span>), continuous_sqrt_alpha_cumprod)</span><br><span class=\"line\">loss = self.loss_func(noise, x_recon)</span><br></pre></td></tr></table></figure>\n<p>我们从代码比较中可以看出，<code>RDDM</code>\n并没有采用将两者损失分别计算然后相加的方法进行计算，而是通过函数\n<code>q_posterior_from_res_noise</code>\n计算出一个值，之后计算两个值之间的差值来进行损失计算和模型训练。通过代码分析，<code>q_posterior_from_res_noise</code>\n计算的是 <code>x_t - x_res - noise</code>\n，即应该是当前时间步下添加了残差和噪声的图像 <code>x_t</code>\n去除模型预测的残差和噪声的值。（⚠️这里其实我也不太确定，没有找的依据）</p>\n<p>至此，正向扩散过程和模型训练过程结束。</p>\n<p>后续，我们就可以利用训练好的网络预测得到的 <span\nclass=\"math inline\">\\(I^{\\theta}_{res}\\)</span> 和噪声 <span\nclass=\"math inline\">\\(\\epsilon_{\\theta}\\)</span> 从 <span\nclass=\"math inline\">\\(I_t\\)</span> 中 恢复 <span\nclass=\"math inline\">\\(I_{t-1}\\)</span> 。 <span class=\"math display\">\\[\nI_{t-1} = I_{t} - (\\bar{\\alpha}_t - \\bar{\\alpha}_{t-1})I^{\\theta}_{res}\n-\n(\\bar{\\beta}_{t}-\\sqrt{\\bar{\\beta}^2_{t-1}-\\sigma^2_t})\\epsilon_{\\theta}\n+ \\sigma_t\\epsilon_t,where\\quad \\epsilon_t\\sim \\mathcal{N}(0,I) \\\\\n\\sigma^2_t = \\eta \\beta^2_t \\bar{\\beta}^2_{t-1} / \\bar{\\beta}^2_{t}\n\\tag{5}\n\\]</span></p>\n<blockquote>\n<p>​ <code>RDDM</code> 其实是在正向扩散过程中加入了 <span\nclass=\"math inline\">\\(I_{in} - I_0 = I_{res}\\)</span>\n残差，意味着，原本正向扩散过程中只有 <span\nclass=\"math inline\">\\(I_0\\)</span> 变成了 有 <span\nclass=\"math inline\">\\(I_0,I_{res}\\)</span> 。也就是说网络从只学习 <span\nclass=\"math inline\">\\(I_0\\)</span> 分布变成了现在学习 <span\nclass=\"math inline\">\\(I_0,I_res\\)</span>\n分布。在这之后分别训练两个模型，一个专注于预测 <span\nclass=\"math inline\">\\(I_{res}\\)</span> 另一个专注于预测 <span\nclass=\"math inline\">\\(\\epsilon\\)</span>\n。作者指出，残差扩散代表了从退化图像 <span\nclass=\"math inline\">\\(I_{in}\\)</span> 到 <span\nclass=\"math inline\">\\(I_0\\)</span>\n的过程。代表了确定性。噪声扩散代表了从杂环无序的噪声 <span\nclass=\"math inline\">\\(\\epsilon\\)</span> 到 <span\nclass=\"math inline\">\\(I_0\\)</span> 的过程，代表了多样性。两者统一。</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2024/05/05/%E9%9F%B3%E8%A7%86%E9%A2%91/",
            "url": "https://chnhqz.github.io/2024/05/05/%E9%9F%B3%E8%A7%86%E9%A2%91/",
            "title": "音视频",
            "date_published": "2024-05-05T05:07:50.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"截屏2024-05-05 23.17.47.png\" alt=\"截屏2024-05-05 23.17.47\" style=\"zoom:50%;\" /></p>\n<h4 id=\"将mp4转化为flv格式\">将MP4转化为FLV格式</h4>\n<ul>\n<li><p><code>avformat_alloc_output_context2()</code> 和\n<code>avformat_free_context()</code> 是 FFmpeg\n中用于操作输出格式上下文（output format context）的函数。</p>\n<ul>\n<li><code>avformat_alloc_output_context2()</code>\n用于分配并初始化一个输出格式上下文。</li>\n<li><code>avformat_free_context()</code>\n用于释放一个输出格式上下文及其相关资源。</li>\n</ul></li>\n<li><p><code>avformat_new_stream()</code>\n用于创建新的流（stream）。这个函数允许你在一个封装器（如\nAVFormatContext）中添加一个新的音频或视频流。</p></li>\n<li><p><code>avcodec_parameters_copy()</code>\n是一个函数，用于复制编解码器参数（codec\nparameters）。它可以将源编解码器参数复制到目标编解码器参数，确保目标参数与源参数具有相同的属性和配置。</p></li>\n<li><p><code>avformat_write_header()</code>\n是一个函数，用于向输出容器（output container）写入容器头（container\nheader）。在使用 FFmpeg\n编码或封装媒体文件时，通常需要在写入数据流之前调用此函数。</p></li>\n<li><p><code>av_write_frame()</code> 和\n<code>av_interleaved_write_frame()</code>\n是用于将音视频帧写入输出文件的函数。</p>\n<ul>\n<li><code>av_write_frame()</code>\n用于将音视频帧写入输出文件，但不进行交错写入（interleaved\nwriting）。</li>\n<li><code>av_interleaved_write_frame()</code>\n则是进行交错写入的版本，确保音频和视频帧以交错的方式写入输出文件，以便播放器能够按照正确的顺序解码和播放。</li>\n</ul></li>\n<li><p><code>av_write_trailer()</code>\n是一个函数，用于写入封装器（muxer）的尾部（trailer），完成媒体文件的封装过程。在使用\nFFmpeg\n编码或封装媒体文件时，通常需要在写入所有数据流并关闭文件之前调用此函数。</p></li>\n</ul>\n<blockquote>\n<p>错误记录：</p>\n<p><code>error C2065: “INTMAX_MAX”: 未声明的标识符 (编译源文件 src\\main.cpp)</code></p>\n<p>打开项目属性-&gt; C/C++ -&gt; 预处理器-&gt; 预处理器定义</p>\n<p>添加： **__STDC_LIMIT_MACROS**</p>\n<p>遇到\n<code>不能将 const AVOutputformat * 类型的值分配到 AVOutputformat * 类型的实体</code>\n错误</p>\n<p>这个错误可能是因为试图将一个 <code>const AVOutputFormat</code>\n类型的值分配给一个 <code>AVOutputFormat</code>\n类型的变量，而这两个类型不完全相同。</p>\n<p>通常情况下，可以通过使用类型转换来解决这个问题。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> AVOutputFormat *const_format_ptr = ...; <span class=\"comment\">// 指向常量 AVOutputFormat 的指针</span></span><br><span class=\"line\">AVOutputFormat *format_ptr = (AVOutputFormat *)const_format_ptr; <span class=\"comment\">// 转换为普通 AVOutputFormat 指针</span></span><br></pre></td></tr></table></figure>\n<p>但是，确保应用程序逻辑和安全性不受影响，因为在将常量指针转换为非常量指针时可能会引入潜在的错误。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">log_packet</span><span class=\"params\">(<span class=\"type\">const</span> AVFormatContext* fmt_ctx, <span class=\"type\">const</span> AVPacket* pkt, <span class=\"type\">const</span> <span class=\"type\">char</span>* tag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVRational* time_base = &amp;fmt_ctx-&gt;streams[pkt-&gt;stream_index]-&gt;time_base;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mp42flv</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tAVOutputFormat* ofmt = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tAVFormatContext* ifmt_ctx = <span class=\"literal\">NULL</span>, * ofmt_ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tAVPacket pkt;</span><br><span class=\"line\">\t<span class=\"type\">char</span> src[] = <span class=\"string\">&quot;input.mp4&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> dst[] = <span class=\"string\">&quot;output.flv&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret, i;</span><br><span class=\"line\">\t<span class=\"type\">int</span> stream_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *stream_mapping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> stream_mapping_size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((ret = <span class=\"built_in\">avformat_open_input</span>(&amp;ifmt_ctx, src, <span class=\"number\">0</span>, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 打开输入的多媒体文件，生成多媒体上下文</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Could not open input file &#x27;%s&#x27;.\\n&quot;</span>, src);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((ret = <span class=\"built_in\">avformat_find_stream_info</span>(ifmt_ctx, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Failed to retrieve input stream information.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(ifmt_ctx, <span class=\"number\">0</span>, src, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;ofmt_ctx, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, dst);\t<span class=\"comment\">// 输出的上下文</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ofmt_ctx) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Could not create output context.\\n&quot;</span>);</span><br><span class=\"line\">\t\tret = AVERROR_UNKNOWN;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstream_mapping_size = ifmt_ctx-&gt;nb_streams;</span><br><span class=\"line\">\tstream_mapping = (<span class=\"type\">int</span>*)<span class=\"built_in\">av_malloc_array</span>(stream_mapping_size, <span class=\"built_in\">sizeof</span>(*stream_mapping));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!stream_mapping) &#123;</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">AVERROR</span>(ENOMEM);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tofmt = (AVOutputFormat*)ofmt_ctx-&gt;oformat;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ifmt_ctx-&gt;nb_streams; i++) &#123;</span><br><span class=\"line\">\t\tAVStream* out_stream;</span><br><span class=\"line\">\t\tAVStream* in_stream = ifmt_ctx-&gt;streams[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tAVCodecParameters* in_codecpar = in_stream-&gt;codecpar;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (in_codecpar-&gt;codec_type != AVMEDIA_TYPE_AUDIO &amp;&amp;</span><br><span class=\"line\">\t\t\tin_codecpar-&gt;codec_type != AVMEDIA_TYPE_AUDIO &amp;&amp;</span><br><span class=\"line\">\t\t\tin_codecpar-&gt;codec_type != AVMEDIA_TYPE_SUBTITLE) &#123;</span><br><span class=\"line\">\t\t\tstream_mapping[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstream_mapping[i] = stream_index++;</span><br><span class=\"line\">\t\tout_stream = <span class=\"built_in\">avformat_new_stream</span>(ofmt_ctx, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!out_stream) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Failed allocating output stream.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\tret = AVERROR_UNKNOWN;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = <span class=\"built_in\">avcodec_parameters_copy</span>(out_stream-&gt;codecpar, in_codecpar);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Failed to copy codec parameters.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tout_stream-&gt;codecpar-&gt;codec_tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(ofmt_ctx, <span class=\"number\">0</span>, dst, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(ofmt-&gt;flags &amp; AVFMT_NOFILE)) &#123;</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">avio_open</span>(&amp;ofmt_ctx-&gt;pb, dst, AVIO_FLAG_WRITE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Could not open file &#x27;%s&#x27;.\\n&quot;</span>, dst);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = <span class=\"built_in\">avformat_write_header</span>(ofmt_ctx, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Error occurred when opening output file.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> end;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tAVStream* in_stream, * out_stream;</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">av_read_frame</span>(ifmt_ctx, &amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tin_stream = ifmt_ctx-&gt;streams[pkt.stream_index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkt.stream_index &gt;= stream_mapping_size || stream_mapping[pkt.stream_index] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_unref</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpkt.stream_index = stream_mapping[pkt.stream_index];</span><br><span class=\"line\">\t\tout_stream = ofmt_ctx-&gt;streams[pkt.stream_index];</span><br><span class=\"line\">\t\t<span class=\"built_in\">log_packet</span>(ifmt_ctx, &amp;pkt, <span class=\"string\">&quot;in&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* copy packet*/</span></span><br><span class=\"line\">\t\tpkt.pts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.pts, in_stream-&gt;time_base, out_stream-&gt;time_base,</span><br><span class=\"line\">\t\t\tAV_ROUND_PASS_MINMAX);</span><br><span class=\"line\">\t\tpkt.dts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.dts, in_stream-&gt;time_base, out_stream-&gt;time_base,</span><br><span class=\"line\">\t\t\tAV_ROUND_PASS_MINMAX);</span><br><span class=\"line\">\t\tpkt.duration = <span class=\"built_in\">av_rescale_q</span>(pkt.duration, in_stream-&gt;time_base, out_stream-&gt;time_base);</span><br><span class=\"line\">\t\tpkt.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">log_packet</span>(ofmt_ctx, &amp;pkt, <span class=\"string\">&quot;out&quot;</span>);</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">av_interleaved_write_frame</span>(ofmt_ctx, &amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Error muxing packet.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_unref</span>(&amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">av_write_trailer</span>(ofmt_ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">end:</span><br><span class=\"line\">\t<span class=\"built_in\">avformat_close_input</span>(&amp;ifmt_ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ofmt_ctx &amp;&amp; !(ofmt-&gt;flags &amp; AVFMT_NOFILE)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avio_closep</span>(&amp;ofmt_ctx-&gt;pb);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">avformat_free_context</span>(ofmt_ctx);</span><br><span class=\"line\">\t<span class=\"built_in\">av_freep</span>(&amp;stream_mapping);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"ffmpeg文件与目录操作\">FFmpeg文件与目录操作</h4>\n<p>文件的删除与重命名</p>\n<ul>\n<li><code>avpriv_io_delete()</code> 是 FFmpeg\n中的一个私有函数，用于删除指定的文件或目录。它可以删除本地文件系统上的文件或目录，并提供了一些选项来控制删除操作的行为。由于\n<code>avpriv_io_delete()</code> 是一个私有函数，它并不是 FFmpeg 公共 API\n的一部分，因此在正式的应用程序中使用它可能会有一些风险，因为它的行为和接口可能随时发生变化。通常情况下，您应该尽量避免使用私有函数，而是使用\nFFmpeg 提供的公共 API。</li>\n<li><code>avpriv_io_move()</code> 是 FFmpeg\n中的一个私有函数，用于移动文件或目录。它可以将文件或目录从一个位置移动到另一个位置，并提供了一些选项来控制移动操作的行为。</li>\n</ul>\n<h4 id=\"实现一个简单的小咖秀\">实现一个简单的小咖秀</h4>\n<p>实现步骤：</p>\n<ol type=\"1\">\n<li>从两个媒体文件中分别抽取音频与视频轨</li>\n<li>将音频与视频轨合并成一个新文件</li>\n<li>对音频与视频轨进行裁剪</li>\n</ol>\n<h4 id=\"libavcodecavcodec.h\">libavcodec/avcodec.h</h4>\n<ul>\n<li><p><code>AVCodec</code> 编码器结构体</p></li>\n<li><p><code>AVCodecContext</code> 编码器上下文</p></li>\n<li><p><code>AVFrame</code> 解码后的帧</p></li>\n<li><p><code>av_frame_alloc()</code> 和 <code>av_frame_free()</code> 是\nFFmpeg 中用于操作帧（frame）的函数。</p>\n<ul>\n<li><p><code>av_frame_alloc()</code>\n用于分配一个新的帧，并返回一个指向该帧的指针。您可以使用此函数来创建一个空的帧，然后填充数据。</p></li>\n<li><p><code>av_frame_free()</code>\n用于释放先前分配的帧。当您完成对帧的使用后，应该调用此函数来释放相关的内存，并避免内存泄漏。</p></li>\n</ul>\n<p>这两个函数通常在编解码过程中用于分配和释放帧内存。</p></li>\n<li><p><code>avcodec_alloc_context3()</code>\n分配一个<code>AVCodecContext</code>结构体的实例，用于存储编解码器的参数和状态。</p></li>\n<li><p><code>avcodec_free_context()</code> 释放上下文</p></li>\n</ul>\n<p><strong>解码步骤</strong></p>\n<ol type=\"1\">\n<li>查找解码器 <code>avcodec_find_decoder</code></li>\n<li>打开解码器 <code>avcodec_open2</code></li>\n<li>解码 <code>avcodec_decode_video2</code></li>\n</ol>\n<p><strong>编码步骤</strong></p>\n<ol type=\"1\">\n<li>查找编码器\n<code>avcodec_find_encoder_by_name/avcodec_find_encoder</code> 在 FFmpeg\n中，<code>avcodec_find_encoder_by_name()</code> 和\n<code>avcodec_find_encoder()</code> 都是用于查找编码器的函数。\n<ul>\n<li><p><code>avcodec_find_encoder_by_name()</code>\n根据编码器的名称查找编码器。您需要传递编码器的名称作为参数，函数将返回一个指向\n<code>AVCodec</code> 结构体的指针，该结构体包含了编码器的信息。</p></li>\n<li><p><code>avcodec_find_encoder()</code> 则是根据编码器的\nID（编码器的枚举值）来查找编码器。您需要传递编码器的 ID\n作为参数，函数将返回一个指向 <code>AVCodec</code>\n结构体的指针，该结构体包含了编码器的信息。</p></li>\n</ul></li>\n<li>设置编码参数（分辨率、帧率、...），并打开编码器\n<code>avcodec_open2</code></li>\n<li>编码 <code>avcodec_encode_video2</code></li>\n</ol>\n<p><strong>注意：音频，视频的编解码大概类似，大体都分为三步：找到编解码器、（设置参数）打开编解码器、进行编解码。</strong></p>\n<h4 id=\"从mp4截取一段视频\">从MP4截取一段视频</h4>\n<ul>\n<li><p><code>av_seek_frame</code>\n函数用于在媒体文件中定位到指定的帧。</p>\n<p>参数解释：</p>\n<ul>\n<li><code>AVFormatContext *s</code>：表示输入或输出媒体文件的格式上下文。</li>\n<li><code>int stream_index</code>：表示要寻找的媒体流的索引。</li>\n<li><code>int64_t timestamp</code>：表示要寻找的时间戳，以媒体流的基本时间单位为单位（通常是微秒）。</li>\n<li><code>int flags</code>：表示定位的标志位，可以是\n<code>AVSEEK_FLAG_BACKWARD</code>（向后定位）、<code>AVSEEK_FLAG_BYTE</code>（以字节为单位定位）等。</li>\n</ul>\n<p>该函数将在媒体文件中定位到距离给定时间戳最近的关键帧，并更新\n<code>AVFormatContext</code> 中的信息以反映新的位置。</p></li>\n</ul>\n<blockquote>\n<p>avformat_new_stream 的用法：</p>\n<p>AVStream 即是流通道。例如我们将 H264 和 AAC\n码流存储为MP4文件的时候，就需要在\nMP4文件中增加两个流通道，一个存储Video：H264，一个存储Audio：AAC。（假设H264和AAC只包含单个流通道）。</p>\n<p>AVStream包含很多参数，用于记录通道信息，其中最重要的是 :</p>\n<p>AVCodecParameters * codecpar\n：用于记录编码后的流信息，即通道中存储的流的编码信息。</p>\n<p>AVRational time_base\n：AVStream通道的时间基，时间基是个相当重要的概念。（可参考之后的关于ffmpeg时间的文章）</p>\n<p>需要注意的是：现在的 ffmpeg 3.1.4版本已经使用AVCodecParameters *\ncodecpar替换了原先的CodecContext* codec !</p>\n<p>avformat_new_stream 在 AVFormatContext中创建 Stream 通道</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AVFormatContext:</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> nb_streams; <span class=\"comment\">// 记录stream通道数目</span></span><br><span class=\"line\">AVStream **streams;      <span class=\"comment\">// 存储stream通道</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AVStream</span></span><br><span class=\"line\"><span class=\"type\">int</span> index;\t\t\t\t\t\t\t<span class=\"comment\">// 在AVFormatContext 中所处的通道索引</span></span><br></pre></td></tr></table></figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-07%2016.22.19.png\"\nalt=\"截屏2024-05-07 16.22.19\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-07 16.22.19</figcaption>\n</figure>\n<p><code>avformat_new_stream</code>之后便在<code>AVFormatContext</code>里增加了<code>AVStream</code>增加了<code>AVStream</code>通道（相关的<code>index</code>已经被设置了）。之后我们就可以自行设置<code>AVStream</code>的一些信息。例如\n<code>codec_id,format,bit_rate,width,heoght.....</code></p>\n<p>avformat_new_stream(AVFormatContext * s, const AVCodec * c)</p>\n<p>AVCodec ：s需要通信的视频对应的编码方式。\n在已知codec_id的情况下可以通过\ncodec=avcodec_find_decoder(codec_id)；的方式得到。</p>\n<p>原文：https://blog.csdn.net/u014162133/article/details/82258488</p>\n<p>https://blog.csdn.net/Kami_Jiang/article/details/106784580</p>\n</blockquote>\n<h4 id=\"sdl事件基本原理\">SDL事件基本原理</h4>\n<ol type=\"1\">\n<li>SDL将所有事件都存放在一个队列中</li>\n<li>所有对事件的操作，其实就是对队列的操作</li>\n</ol>\n<p><strong>SDL事件种类</strong></p>\n<ol type=\"1\">\n<li><code>SDL_WindowEvent</code>：窗口事件</li>\n<li><code>SDL_KeyboardEvent</code> ：键盘事件</li>\n<li><code>SDL_MouseMotionEvent</code> ：鼠标事件</li>\n<li>自定义事件</li>\n</ol>\n<p><code>SDL_PollEvent</code> DL\n库中的一个函数，用于检查是否有任何事件发生。它会检查事件队列，并返回队列中的下一个事件（如果有）。轮询操作，要等待一段时间。如果不等待时间，CPU过载</p>\n<p><code>SDL_WaitEvent</code>\n事件触发机制，用于等待事件的发生。如果当前事件队列为空，则该函数将会一直等待，直到有事件发生。</p>\n<p><strong>纹理渲染</strong></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-08%2014.22.58.png\"\nalt=\"截屏2024-05-08 14.22.58\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-08 14.22.58</figcaption>\n</figure>\n<ul>\n<li><code>SDL_CreateTexture()</code>\n<ul>\n<li><code>format:YUV,RGB</code></li>\n<li><code>access:Texture类型,Target,Stream</code></li>\n</ul></li>\n<li><code>SDL_DestroyTexture()</code></li>\n<li><code>SDL_SetRenderTarget()</code>用于设置渲染目标，即指定在哪个渲染器上进行绘制。你可以将渲染目标设置为一个纹理或者窗口。</li>\n<li><code>SDL_RenderClear()</code>用于清除当前渲染目标上的所有内容，将其填充为指定的颜色。</li>\n<li><code>SDL_RenderCopy()</code>用于将纹理复制到当前渲染目标上。</li>\n<li><code>SDL_RenderPresent</code>用于更新窗口显示，将之前所有的渲染操作绘制到窗口上。</li>\n</ul>\n<h4 id=\"yuv播放器\">YUV播放器</h4>\n<p><strong>创建线程</strong></p>\n<ul>\n<li><code>SDL_CreateThread()</code>函数用于创建一个新的线程。它接受两个参数：一个指向函数的指针，这个函数将作为新线程的入口点；以及一个可选的参数，将传递给新线程的入口函数。函数返回一个指向新线程的\n<code>SDL_Thread</code> 结构体的指针。\n<ul>\n<li><code>fn</code> 线程执行函数</li>\n<li><code>name</code> 线程名</li>\n<li><code>data</code> 执行函数参数</li>\n</ul></li>\n</ul>\n<p><strong>更新纹理</strong></p>\n<ul>\n<li><code>SDL_UpdateTexture()</code>\n函数用于更新纹理的像素数据。它接受纹理、矩形区域和像素数据作为参数，以更新纹理的一部分或全部像素。</li>\n<li><code>SDL_UpdateYUVTexture</code>\n函数用于更新YUV格式的纹理像素数据。它接受纹理、矩形区域、Y、U和V平面的像素数据作为参数，以更新纹理的一部分或全部像素。</li>\n</ul>\n<h4 id=\"sdl音频api\">SDL音频API</h4>\n<ul>\n<li><code>SDL_OpenAudio/SDL_CloseAudio</code>\n<code>SDL_OpenAudio()</code>函数用于初始化音频子系统，并打开音频设备以进行音频播放或录制。而<code>SDL_CloseAudio()</code>函数用于关闭音频设备并释放音频子系统的资源。</li>\n<li><code>SDL_PauseAudio</code> <code>SDL_PauseAudio</code>\n用于暂停或继续音频回放。</li>\n<li><code>SDL_MixAudio</code> 用于将音频数据混合到音频缓冲区中。</li>\n</ul>\n<h4 id=\"pcm-音频播放器\">PCM 音频播放器</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_MAIN_HANDLED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SDL2/SDL.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;libavcodec/avcodec.h&quot;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BLOCK_SIZE 4096000</span></span><br><span class=\"line\"><span class=\"type\">static</span> Uint8* audio_buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">size_t</span> buffer_len = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> Uint8* audio_pos = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read_audio_data</span><span class=\"params\">(<span class=\"type\">void</span>* udata, Uint8* stream, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (buffer_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_memset</span>(stream, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\tlen = (len &lt; buffer_len) ? len : buffer_len;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_MixAudio</span>(stream, audio_pos, len, SDL_MIX_MAXVOLUME);</span><br><span class=\"line\"></span><br><span class=\"line\">\taudio_pos += len;</span><br><span class=\"line\">\tbuffer_len -= len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PCM_play</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pcm_player</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// SDL 初始化</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> path[] = <span class=\"string\">&quot;NULL&quot;</span>;</span><br><span class=\"line\">\t\tFILE* audio_fd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_AUDIO)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_Log</span>(<span class=\"string\">&quot;Failed to initial.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\taudio_fd = <span class=\"built_in\">fopen</span>(path, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!audio_fd) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_Log</span>(<span class=\"string\">&quot;Failed to open pcm file!\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 分配内存空间</span></span><br><span class=\"line\">\t\taudio_buf = (Uint8*)<span class=\"built_in\">malloc</span>(BLOCK_SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!audio_buf) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_Log</span>(<span class=\"string\">&quot;Failed to alloc memory!\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// spec 音频参数 采样率</span></span><br><span class=\"line\">\t\tSDL_AudioSpec spec;</span><br><span class=\"line\">\t\tspec.freq = <span class=\"number\">44100</span>;</span><br><span class=\"line\">\t\tspec.channels = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tspec.format = AUDIO_S16SYS;</span><br><span class=\"line\">\t\tspec.silence = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tspec.callback = read_audio_data;</span><br><span class=\"line\">\t\tspec.userdata = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_OpenAudio</span>(&amp;spec, <span class=\"literal\">NULL</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_Log</span>(<span class=\"string\">&quot;Failed to open audio device!\\n&quot;</span>);\\</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_PauseAudio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\tbuffer_len = <span class=\"built_in\">fread</span>(audio_buf, <span class=\"number\">1</span>, BLOCK_SIZE, audio_fd);</span><br><span class=\"line\">\t\t\taudio_pos = audio_buf;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (audio_pos &lt; (audio_buf + buffer_len)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_Delay</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (buffer_len != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_CloseAudio</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__FAIL:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (audio_buf) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">free</span>(audio_buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (audio_fd) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">fclose</span>(audio_fd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简单视频播放器\">简单视频播放器</h4>\n<p>利用<code>FFmpeg</code>\n将<code>h264</code>等数据解码成<code>YUV</code>数据，通过<code>SDL</code>渲染。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sws_ctx = <span class=\"built_in\">sws_getContext</span>(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\tpCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\tAV_PIX_FMT_YUV420P, SWS_BILINEAR,</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码使用了 libswscale 库中的 <code>sws_getContext</code>\n函数来创建一个图像转换上下文（sws_ctx）。这个上下文用于将一个像素格式的图像转换成另一种像素格式的图像，以便在播放或处理视频时进行必要的格式转换。</p>\n<p>具体来说，这段代码的作用是将视频帧从输入编解码器上下文（pCodecCtx）的像素格式（pCodecCtx-&gt;pix_fmt）转换为\nYUV420P 格式。在大多数情况下，YUV420P\n是视频处理中常用的一种格式，因为它包含了亮度（Y）和色度（U、V）信息，而且是压缩视频格式的一种常见格式。</p>\n<p>下面是这段代码的参数解释： - <code>pCodecCtx-&gt;width</code> 和\n<code>pCodecCtx-&gt;height</code>: 输入视频帧的宽度和高度。 -\n<code>pCodecCtx-&gt;pix_fmt</code>: 输入视频帧的像素格式。 -\n<code>pCodecCtx-&gt;width</code> 和 <code>pCodecCtx-&gt;height</code>:\n输出视频帧的宽度和高度，通常与输入视频帧的尺寸相同。 -\n<code>AV_PIX_FMT_YUV420P</code>: 输出视频帧的像素格式，这里选择了\nYUV420P 格式。 - <code>SWS_BILINEAR</code>:\n像素转换的算法，这里选择了双线性插值算法，用于平滑图像。</p>\n<p>最后三个参数是用于设置特殊选项的，通常情况下可以设为 NULL。</p>\n<p>总之，这段代码的目的是创建一个图像转换上下文，以便在播放视频时将输入的像素格式转换为\nYUV420P 格式，以便后续处理或显示。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pict = (AVPicture*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(AVPicture));</span><br><span class=\"line\"><span class=\"built_in\">avpicture_alloc</span>(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码分配了一个大小合适的内存块来存储 YUV420P\n格式的图像数据，并使用 <code>avpicture_alloc</code> 函数来初始化\n<code>pict</code> 指针所指向的内存块，使其可以存储 YUV420P\n格式的图像数据。</p>\n<p>具体来说，<code>avpicture_alloc</code>\n函数会根据指定的像素格式（AV_PIX_FMT_YUV420P）、宽度（pCodecCtx-&gt;width）和高度（pCodecCtx-&gt;height），为\n<code>pict</code>\n指向的内存块分配足够的空间，并根据像素格式的要求对内存块进行初始化，以便后续存储\nYUV420P 格式的图像数据。</p>\n<p>这段代码的目的是为后续的视频解码和处理准备一个用于存储图像数据的缓冲区，以便于在播放或处理视频时使用。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sws_scale</span>(sws_ctx, (<span class=\"type\">uint8_t</span> <span class=\"type\">const</span>* <span class=\"type\">const</span>*)pFrame-&gt;data, pFrame-&gt;linesize, <span class=\"number\">0</span>, pCodecCtx-&gt;height, pict-&gt;data, pict-&gt;linesize);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码使用 <code>sws_scale</code> 函数将解码后的视频帧数据转换为\nYUV420P 格式，并将结果存储在 <code>pict</code> 所指向的内存块中。</p>\n<p>具体来说，<code>sws_scale</code>\n函数会将输入的视频帧数据（<code>pFrame-&gt;data</code>）按照指定的转换参数（<code>sws_ctx</code>）进行转换，转换后的数据存储在输出缓冲区（<code>pict-&gt;data</code>）中。参数\n<code>pFrame-&gt;linesize</code> 表示输入数据每行的字节数，而\n<code>pict-&gt;linesize</code>\n表示输出数据每行的字节数。函数还会根据输入和输出的图像大小进行缩放和裁剪操作，以确保输出数据的正确性和一致性。</p>\n<p>这段代码的作用是将解码后的视频帧数据转换为 YUV420P\n格式，并存储在指定的内存块中，以便后续的视频处理和显示。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">player</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> filepath[] = <span class=\"string\">&quot;input.mp4&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 多媒体文件上下文</span></span><br><span class=\"line\">\tAVFormatContext* pFormatCtx = <span class=\"literal\">NULL</span>;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, videoStream;</span><br><span class=\"line\">\t<span class=\"comment\">// 编解码上下文</span></span><br><span class=\"line\">\tAVCodecContext* pCodecCtxOrig = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tAVCodecContext* pCodecCtx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 图像裁剪上下文</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">SwsContext</span>* sws_ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 编解码器</span></span><br><span class=\"line\">\tAVCodec* pCodec = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 解码后的数据帧</span></span><br><span class=\"line\">\tAVFrame* pFrame = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 解码前的数据包</span></span><br><span class=\"line\">\tAVPacket packet;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameFinished;</span><br><span class=\"line\">\t<span class=\"type\">float</span> aspect_ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 解码出来的YUV数据存放在</span></span><br><span class=\"line\">\tAVPicture* pict = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tUint32 pixformat;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// render</span></span><br><span class=\"line\">\tSDL_Window* win = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tSDL_Renderer* renderer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tSDL_Texture* texture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置默认的窗口大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> w_width = <span class=\"number\">640</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> w_height = <span class=\"number\">480</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Could not initialize SDL - %s.\\n&quot;</span>, <span class=\"built_in\">SDL_GetError</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">av_register_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avformat_open_input</span>(&amp;pFormatCtx, filepath, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Could not open video file\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avformat_find_stream_info</span>(pFormatCtx, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to find stream information.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(pFormatCtx, <span class=\"number\">0</span>, filepath, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 找到第一个视频流</span></span><br><span class=\"line\">\tvideoStream = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class=\"line\">\t\t\tvideoStream = i;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;视频流编号：%d\\n&quot;</span>, i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (videoStream == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Din&#x27;t find a video stream.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 这行代码的目的是获取视频流的编解码上下文（`AVCodecContext`）。</span></span><br><span class=\"line\"><span class=\"comment\">\t`pFormatCtx` 是输入格式上下文，`streams[videoStream]` 表示视频流，</span></span><br><span class=\"line\"><span class=\"comment\">\t然后通过 `codec` 成员获取该流的编解码上下文。*/</span></span><br><span class=\"line\">\tpCodecCtxOrig = pFormatCtx-&gt;streams[videoStream]-&gt;codec;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 找到视频流的解码器</span></span><br><span class=\"line\">\tpCodec = <span class=\"built_in\">avcodec_find_decoder</span>(pCodecCtxOrig-&gt;codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pCodec == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Unsupported codec.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 复制 上下文 为了不破坏原来的流</span></span><br><span class=\"line\">\tpCodecCtx = <span class=\"built_in\">avcodec_alloc_context3</span>(pCodec);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_copy_context</span>(pCodecCtx, pCodecCtxOrig) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Couldn&#x27;t copy codec context.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开解码器</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_open2</span>(pCodecCtx, pCodec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to open decoder!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 分配视频帧</span></span><br><span class=\"line\">\tpFrame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tw_width = pCodecCtx-&gt;width;</span><br><span class=\"line\">\tw_height = pCodecCtx-&gt;height;</span><br><span class=\"line\"></span><br><span class=\"line\">\twin = <span class=\"built_in\">SDL_CreateWindow</span>(<span class=\"string\">&quot;Media Player&quot;</span>,</span><br><span class=\"line\">\t\tSDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\tSDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\tw_width, w_height,</span><br><span class=\"line\">\t\tSDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to create window by SDL&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trenderer = <span class=\"built_in\">SDL_CreateRenderer</span>(win, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!renderer) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to create Renderer by SDL&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpixformat = SDL_PIXELFORMAT_IYUV;</span><br><span class=\"line\">\ttexture = <span class=\"built_in\">SDL_CreateTexture</span>(renderer, pixformat,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING, w_width, w_height);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsws_ctx = <span class=\"built_in\">sws_getContext</span>(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\t\tpCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\t\tAV_PIX_FMT_YUV420P, SWS_BILINEAR,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpict = (AVPicture*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(AVPicture));</span><br><span class=\"line\">\t<span class=\"built_in\">avpicture_alloc</span>(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">av_read_frame</span>(pFormatCtx, &amp;packet) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (packet.stream_index == videoStream) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 解码视频帧</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avcodec_decode_video2</span>(pCodecCtx, pFrame, &amp;frameFinished, &amp;packet);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 得到解码后的视频帧</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (frameFinished) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 将图片转化为 SDL 使用的 YUV 格式</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">sws_scale</span>(sws_ctx, (<span class=\"type\">uint8_t</span> <span class=\"type\">const</span>* <span class=\"type\">const</span>*)pFrame-&gt;data,</span><br><span class=\"line\">\t\t\t\t\tpFrame-&gt;linesize, <span class=\"number\">0</span>, pCodecCtx-&gt;height, pict-&gt;data, pict-&gt;linesize);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_UpdateYUVTexture</span>(texture, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t\t\t\tpict-&gt;data[<span class=\"number\">0</span>], pict-&gt;linesize[<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\tpict-&gt;data[<span class=\"number\">1</span>], pict-&gt;linesize[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\tpict-&gt;data[<span class=\"number\">2</span>], pict-&gt;linesize[<span class=\"number\">2</span>]</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\trect.w = pCodecCtx-&gt;width;</span><br><span class=\"line\">\t\t\t\trect.h = pCodecCtx-&gt;height;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_RenderClear</span>(renderer);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_RenderCopy</span>(renderer, texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_RenderPresent</span>(renderer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_free_packet</span>(&amp;packet);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__FAIL:</span><br><span class=\"line\">\t<span class=\"comment\">// Free the YUV frame</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pFrame) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;pFrame);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Close the codec</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pCodecCtx) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_close</span>(pCodecCtx);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pCodecCtxOrig) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_close</span>(pCodecCtxOrig);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Close the video file</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pFormatCtx) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avformat_close_input</span>(&amp;pFormatCtx);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pict) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avpicture_free</span>(pict);</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(pict);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (win) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyWindow</span>(win);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (renderer) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(renderer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用队列存放音频包-播放器\">使用队列存放音频包-播放器</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_MAIN_HANDLED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SDL2/SDL.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;libavcodec/avcodec.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/log.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/version.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/mem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BLOCK_SIZE 4096000</span></span><br><span class=\"line\"><span class=\"type\">static</span> Uint8* audio_buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">size_t</span> buffer_len = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> Uint8* audio_pos = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LIBAVCODEC_VERSION_INT &lt; AV_VERSION_INT(55, 28, 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> av_frame_alloc avcodec_alloc_frame</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> av_frame_free avcodec_free_frame</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_AUDIO_BUFFER_SIZE 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_AUDIO_FRAME_SIZE 192000</span></span><br><span class=\"line\"><span class=\"type\">int</span> quit = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SwrContext</span>* audio_convert_ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">PacketQueue</span> &#123;</span><br><span class=\"line\">\tAVPacketList* first_pkt, * last_pkt;</span><br><span class=\"line\">\t<span class=\"type\">int</span> nb_packets;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size;</span><br><span class=\"line\">\tSDL_mutex* mutex;</span><br><span class=\"line\">\tSDL_cond* cond;</span><br><span class=\"line\">&#125; PacketQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">PacketQueue audioq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">packet_queue_init</span><span class=\"params\">(PacketQueue* q)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(q, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(PacketQueue));</span><br><span class=\"line\">\tq-&gt;mutex = <span class=\"built_in\">SDL_CreateMutex</span>();</span><br><span class=\"line\">\tq-&gt;cond = <span class=\"built_in\">SDL_CreateCond</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">packet_queue_put</span><span class=\"params\">(PacketQueue* q, AVPacket* pkt)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVPacketList* pkt1;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">av_dup_packet</span>(pkt) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpkt1 = (AVPacketList*)<span class=\"built_in\">av_malloc</span>(<span class=\"built_in\">sizeof</span>(AVPacketList));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt1)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tpkt1-&gt;pkt = *pkt;</span><br><span class=\"line\">\tpkt1-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_LockMutex</span>(q-&gt;mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!q-&gt;last_pkt) &#123;</span><br><span class=\"line\">\t\tq-&gt;first_pkt = pkt1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tq-&gt;last_pkt-&gt;next = pkt1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tq-&gt;last_pkt = pkt1;</span><br><span class=\"line\">\tq-&gt;nb_packets++;</span><br><span class=\"line\">\tq-&gt;size += pkt1-&gt;pkt.size;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_CondSignal</span>(q-&gt;cond);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UnlockMutex</span>(q-&gt;mutex);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">packet_queue_get</span><span class=\"params\">(PacketQueue* q, AVPacket* pkt, <span class=\"type\">int</span> block)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVPacketList* pkt1;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_LockMutex</span>(q-&gt;mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (quit) &#123;</span><br><span class=\"line\">\t\t\tret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpkt1 = q-&gt;first_pkt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkt1) &#123;</span><br><span class=\"line\">\t\t\tq-&gt;first_pkt = pkt1-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!q-&gt;first_pkt)</span><br><span class=\"line\">\t\t\t\tq-&gt;last_pkt = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\tq-&gt;nb_packets--;</span><br><span class=\"line\">\t\t\tq-&gt;size -= pkt1-&gt;pkt.size;</span><br><span class=\"line\">\t\t\t*pkt = pkt1-&gt;pkt;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_free</span>(pkt1);</span><br><span class=\"line\">\t\t\tret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!block) &#123;</span><br><span class=\"line\">\t\t\tret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_CondWait</span>(q-&gt;cond, q-&gt;mutex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UnlockMutex</span>(q-&gt;mutex);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">audio_decode_frame</span><span class=\"params\">(AVCodecContext* aCodecCtx, <span class=\"type\">uint8_t</span>* audio_buf, <span class=\"type\">int</span> buf_size)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> AVPacket pkt;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">uint8_t</span>* audio_pkt_data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> audio_pkt_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> AVFrame frame;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> len1, data_size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (audio_pkt_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> got_frame = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tlen1 = <span class=\"built_in\">avcodec_decode_audio4</span>(aCodecCtx, &amp;frame, &amp;got_frame, &amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (len1 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\taudio_pkt_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taudio_pkt_data += len1;</span><br><span class=\"line\">\t\t\taudio_pkt_size -= len1;</span><br><span class=\"line\">\t\t\tdata_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (got_frame) &#123;</span><br><span class=\"line\">\t\t\t\tdata_size = <span class=\"number\">2</span> * <span class=\"number\">2</span> * frame.nb_samples;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">assert</span>(data_size &lt;= buf_size);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">swr_convert</span>(audio_convert_ctx,</span><br><span class=\"line\">\t\t\t\t\t&amp;audio_buf,</span><br><span class=\"line\">\t\t\t\t\tMAX_AUDIO_FRAME_SIZE * <span class=\"number\">3</span> / <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t(<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>**)frame.data,</span><br><span class=\"line\">\t\t\t\t\tframe.nb_samples);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data_size &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data_size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkt.data)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_free_packet</span>(&amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (quit) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">packet_queue_get</span>(&amp;audioq, &amp;pkt, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\taudio_pkt_data = pkt.data;</span><br><span class=\"line\">\t\taudio_pkt_size = pkt.size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">audio_callback</span><span class=\"params\">(<span class=\"type\">void</span>* userdata, Uint8* stream, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVCodecContext* aCodecCtx = (AVCodecContext*)userdata;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len1, audio_size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">uint8_t</span> audio_buf[(MAX_AUDIO_FRAME_SIZE * <span class=\"number\">3</span>) / <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> audio_buf_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> audio_buf_index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (audio_buf_index &gt;= audio_buf_size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* We have already sent all our data; get more*/</span></span><br><span class=\"line\">\t\t\taudio_size = <span class=\"built_in\">audio_decode_frame</span>(aCodecCtx, audio_buf, <span class=\"built_in\">sizeof</span>(audio_buf));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (audio_size &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\taudio_buf_size = <span class=\"number\">1024</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memset</span>(audio_buf, <span class=\"number\">0</span>, audio_buf_size);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\taudio_buf_size = audio_size;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taudio_buf_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlen1 = audio_buf_size - audio_buf_index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len1 &gt; len) len1 = len;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(stream, (<span class=\"type\">uint8_t</span>*)audio_buf + audio_buf_index, len1);</span><br><span class=\"line\">\t\tlen -= len1;</span><br><span class=\"line\">\t\tstream += len1;</span><br><span class=\"line\">\t\taudio_buf_index += len1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PCM_play</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">player</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> filepath[] = <span class=\"string\">&quot;input.mp4&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 多媒体文件上下文</span></span><br><span class=\"line\">\t\tAVFormatContext* pFormatCtx = <span class=\"literal\">NULL</span>;\t\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i, videoStream, audioStream;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 编解码上下文 视频流</span></span><br><span class=\"line\">\t\tAVCodecContext* pCodecCtxOrig = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tAVCodecContext* pCodecCtx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 图像裁剪上下文</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> <span class=\"title class_\">SwsContext</span>* sws_ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 音频流</span></span><br><span class=\"line\">\t\tAVCodecContext* aCodecCtxtOrig = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tAVCodecContext* aCodecCtx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tAVCodec* aCodec = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int64_t</span> in_channel_layout;</span><br><span class=\"line\">\t\t<span class=\"type\">int64_t</span> out_channel_layout;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 编解码器</span></span><br><span class=\"line\">\t\tAVCodec* pCodec = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 解码后的数据帧</span></span><br><span class=\"line\">\t\tAVFrame* pFrame = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 解码前的数据包</span></span><br><span class=\"line\">\t\tAVPacket packet;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> frameFinished;</span><br><span class=\"line\">\t\t<span class=\"type\">float</span> aspect_ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解码出来的YUV数据存放在</span></span><br><span class=\"line\">\t\tAVPicture* pict = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tSDL_Rect rect;</span><br><span class=\"line\">\t\tUint32 pixformat;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// render</span></span><br><span class=\"line\">\t\tSDL_Window* win = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tSDL_Renderer* renderer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tSDL_Texture* texture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置默认的窗口大小</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> w_width = <span class=\"number\">640</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> w_height = <span class=\"number\">480</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 事件</span></span><br><span class=\"line\">\t\tSDL_Event event;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 音频 指定音频播放的参数</span></span><br><span class=\"line\">\t\tSDL_AudioSpec wanted_spec, spec;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Could not initialize SDL - %s.\\n&quot;</span>, <span class=\"built_in\">SDL_GetError</span>());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_register_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avformat_open_input</span>(&amp;pFormatCtx, filepath, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Could not open video file\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avformat_find_stream_info</span>(pFormatCtx, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to find stream information.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_dump_format</span>(pFormatCtx, <span class=\"number\">0</span>, filepath, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到 视频流 音频流</span></span><br><span class=\"line\">\t\tvideoStream = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\taudioStream = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class=\"line\">\t\t\t\tvideoStream = i;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;视频流编号：%d\\n&quot;</span>, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</span><br><span class=\"line\">\t\t\t\taudioStream = i;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;音频流编号：%d\\n&quot;</span>, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (videoStream == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Din&#x27;t find a video stream.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (audioStream == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Din&#x27;t find a audio stream.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 音频</span></span><br><span class=\"line\">\t\taCodecCtxtOrig = pFormatCtx-&gt;streams[audioStream]-&gt;codec;</span><br><span class=\"line\">\t\taCodec = <span class=\"built_in\">avcodec_find_decoder</span>(aCodecCtxtOrig-&gt;codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!aCodec) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Unsupported codec.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\taCodecCtx = <span class=\"built_in\">avcodec_alloc_context3</span>(aCodec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_copy_context</span>(aCodecCtx, aCodecCtxtOrig) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Couldn&#x27;t copy codec context.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置音频参数</span></span><br><span class=\"line\">\t\twanted_spec.freq = aCodecCtx-&gt;sample_rate;</span><br><span class=\"line\">\t\twanted_spec.format = AUDIO_S16SYS;</span><br><span class=\"line\">\t\twanted_spec.channels = aCodecCtx-&gt;channels;</span><br><span class=\"line\">\t\twanted_spec.silence = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\twanted_spec.samples = SDL_AUDIO_BUFFER_SIZE;</span><br><span class=\"line\">\t\twanted_spec.callback = audio_callback;</span><br><span class=\"line\">\t\twanted_spec.userdata = aCodecCtx;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_OpenAudio</span>(&amp;wanted_spec, &amp;spec) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to open audio device -%s.\\n&quot;</span>, <span class=\"built_in\">SDL_GetError</span>());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 打开音频解码器</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_open2</span>(aCodecCtx, aCodec, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">packet_queue_init</span>(&amp;audioq);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tin_channel_layout = <span class=\"built_in\">av_get_default_channel_layout</span>(aCodecCtx-&gt;channels);</span><br><span class=\"line\">\t\tout_channel_layout = in_channel_layout;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;in layout:%lld, out layout:%lld \\n&quot;</span>, in_channel_layout, out_channel_layout);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\taudio_convert_ctx = <span class=\"built_in\">swr_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (audio_convert_ctx) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swr_alloc_set_opts</span>(audio_convert_ctx,</span><br><span class=\"line\">\t\t\t\tout_channel_layout,</span><br><span class=\"line\">\t\t\t\tAV_SAMPLE_FMT_S16,</span><br><span class=\"line\">\t\t\t\taCodecCtx-&gt;sample_rate,</span><br><span class=\"line\">\t\t\t\tin_channel_layout,</span><br><span class=\"line\">\t\t\t\taCodecCtx-&gt;sample_fmt,</span><br><span class=\"line\">\t\t\t\taCodecCtx-&gt;sample_rate,</span><br><span class=\"line\">\t\t\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">swr_init</span>(audio_convert_ctx);</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_PauseAudio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* 这行代码的目的是获取视频流的编解码上下文（`AVCodecContext`）。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t`pFormatCtx` 是输入格式上下文，`streams[videoStream]` 表示视频流，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t然后通过 `codec` 成员获取该流的编解码上下文。*/</span></span><br><span class=\"line\">\t\tpCodecCtxOrig = pFormatCtx-&gt;streams[videoStream]-&gt;codec;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到视频流的解码器</span></span><br><span class=\"line\">\t\tpCodec = <span class=\"built_in\">avcodec_find_decoder</span>(pCodecCtxOrig-&gt;codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pCodec == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Unsupported codec.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 复制 上下文 为了不破坏原来的流</span></span><br><span class=\"line\">\t\tpCodecCtx = <span class=\"built_in\">avcodec_alloc_context3</span>(pCodec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_copy_context</span>(pCodecCtx, pCodecCtxOrig) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Couldn&#x27;t copy codec context.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 打开解码器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_open2</span>(pCodecCtx, pCodec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to open decoder!\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 分配视频帧</span></span><br><span class=\"line\">\t\tpFrame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tw_width = pCodecCtx-&gt;width;</span><br><span class=\"line\">\t\tw_height = pCodecCtx-&gt;height;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twin = <span class=\"built_in\">SDL_CreateWindow</span>(<span class=\"string\">&quot;Media Player&quot;</span>,</span><br><span class=\"line\">\t\t\tSDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\t\tSDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\t\t<span class=\"number\">500</span>, <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\t\tSDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!win) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION, <span class=\"string\">&quot;Failed to create window by SDL&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trenderer = <span class=\"built_in\">SDL_CreateRenderer</span>(win, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!renderer) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_LogError</span>(SDL_LOG_CATEGORY_APPLICATION , <span class=\"string\">&quot;Failed to create Renderer by SDL&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> __FAIL;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpixformat = SDL_PIXELFORMAT_IYUV;</span><br><span class=\"line\">\t\ttexture = <span class=\"built_in\">SDL_CreateTexture</span>(renderer, pixformat,</span><br><span class=\"line\">\t\t\tSDL_TEXTUREACCESS_STREAMING, w_width, w_height);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsws_ctx = <span class=\"built_in\">sws_getContext</span>(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\t\t\tpCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class=\"line\">\t\t\tAV_PIX_FMT_YUV420P, SWS_BILINEAR,</span><br><span class=\"line\">\t\t\t<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpict = (AVPicture*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(AVPicture));</span><br><span class=\"line\">\t\t<span class=\"built_in\">avpicture_alloc</span>(pict, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">av_read_frame</span>(pFormatCtx, &amp;packet) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (packet.stream_index == videoStream) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 解码视频帧</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">avcodec_decode_video2</span>(pCodecCtx, pFrame, &amp;frameFinished, &amp;packet);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 得到解码后的视频帧</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (frameFinished) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 将图片转化为 SDL 使用的 YUV 格式</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">sws_scale</span>(sws_ctx, (<span class=\"type\">uint8_t</span> <span class=\"type\">const</span>* <span class=\"type\">const</span>*)pFrame-&gt;data,</span><br><span class=\"line\">\t\t\t\t\t\tpFrame-&gt;linesize, <span class=\"number\">0</span>, pCodecCtx-&gt;height, pict-&gt;data, pict-&gt;linesize);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">SDL_UpdateYUVTexture</span>(texture, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t\t\t\t\tpict-&gt;data[<span class=\"number\">0</span>], pict-&gt;linesize[<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\t\tpict-&gt;data[<span class=\"number\">1</span>], pict-&gt;linesize[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\t\tpict-&gt;data[<span class=\"number\">2</span>], pict-&gt;linesize[<span class=\"number\">2</span>]</span><br><span class=\"line\">\t\t\t\t\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\trect.w = pCodecCtx-&gt;width;</span><br><span class=\"line\">\t\t\t\t\trect.h = pCodecCtx-&gt;height;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">SDL_RenderClear</span>(renderer);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">SDL_RenderCopy</span>(renderer, texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">SDL_RenderPresent</span>(renderer);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">SDL_Delay</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">av_free_packet</span>(&amp;packet);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (packet.stream_index == audioStream) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">packet_queue_put</span>(&amp;audioq, &amp;packet);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">av_free_packet</span>(&amp;packet);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_PollEvent</span>(&amp;event);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (event.type) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> SDL_QUIT:</span><br><span class=\"line\">\t\t\t\tquit = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> __QUIT;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">SDL_Log</span>(<span class=\"string\">&quot;event type is %d&quot;</span>, event.type);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__QUIT:</span><br><span class=\"line\">\t\tret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__FAIL:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Free the YUV frame</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pFrame) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;pFrame);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Close the codec</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pCodecCtx) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avcodec_close</span>(pCodecCtx);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pCodecCtxOrig) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avcodec_close</span>(pCodecCtxOrig);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Close the video file</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pFormatCtx) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_close_input</span>(&amp;pFormatCtx);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pict) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avpicture_free</span>(pict);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">free</span>(pict);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (win) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_DestroyWindow</span>(win);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (renderer) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(renderer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (texture) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure>\n<img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/blog/source/_posts/音视频/黄秋钊.jpg\"\nalt=\"黄秋钊\" />\n<figcaption aria-hidden=\"true\">黄秋钊</figcaption>\n</figure>\n<h4 id=\"多线程与锁音视频的同步\">多线程与锁（音视频的同步）</h4>\n<p>实现音视频同步的本质就是多线程之间的同步。</p>\n<ul>\n<li><code>SDL_CreateThread</code>\n用于创建一个新的线程。它接受一个函数指针和一个指向函数参数的指针作为参数，然后创建一个新的线程来执行指定的函数，并将指定的参数传递给该函数。</li>\n<li><code>SDL_WaitThread</code>函数用于等待一个指定线程的结束。它接受一个指向线程的指针作为参数，并在该线程结束后返回。</li>\n<li><code>SDL_CteateMutex/SDL_DestroyMutex</code>\n<code>SDL_CreateMutex</code>函数用于创建一个互斥锁（mutex），用于线程间的同步。而<code>SDL_DestroyMutex</code>函数用于销毁互斥锁。</li>\n<li><code>SDL_LockMutex/SDL_UnlockMutex</code>\n<code>SDL_LockMutex</code>函数用于尝试锁定互斥锁，如果互斥锁已经被锁定，则该函数会阻塞直到锁可用。<code>SDL_UnlockMutex</code>函数用于释放已经锁定的互斥锁。</li>\n<li><code>SDL_CreateCond/SDL_DestroyCond</code>\n<code>SDL_CreateCond</code>函数用于创建条件变量，而<code>SDL_DestroyCond</code>函数用于销毁条件变量。条件变量通常与互斥锁一起使用，用于在线程之间等待某个条件的发生或通知其他线程。</li>\n<li><code>SDL_CondWait/SDL_CondSignal</code>\n<code>SDL_CondWait</code>函数用于等待条件变量的信号。当线程调用该函数时，它会阻塞并等待条件变量的信号。在等待期间，该函数会释放传入的互斥锁，以允许其他线程修改共享数据。一旦条件变量被另一个线程发送信号，当前线程将重新获取互斥锁并继续执行。<code>SDL_CondSignal</code>函数用于向等待某个条件的线程发送信号，通知它们条件已经满足，可以继续执行。这个函数通常与<code>SDL_CondWait</code>配合使用，用于唤醒一个等待该条件的线程。</li>\n</ul>\n<h4 id=\"播放器线程模型\">播放器线程模型</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/blog/source/_posts/音视频/截屏2024-05-11%2016.50.12.png\"\nalt=\"截屏2024-05-11 16.50.12\" />\n<figcaption aria-hidden=\"true\">截屏2024-05-11 16.50.12</figcaption>\n</figure>\n<p>一共有四个线程：</p>\n<ol type=\"1\">\n<li>主线程，主要用于一些参数的检查，事件的处理，视频的渲染，主线程会定时从视频解码队列中取出视频帧。</li>\n<li>第二个线程，解复用线程，在这个线程中会创建一个视频解码线程，紧接着对多媒体文件进行解复用，将视频包存放在视频流队列，将音频包存放在音频流队列中</li>\n<li>第三个线程是视频解码线程，首先去视频流队列中取出一个个视频包，进行解码，解码后的视频帧，存放在解码视频队列。</li>\n<li>最后一个线程是<code>SDL</code>\n在打开音频设备时创建的，在这个线程中，它会调用我们的回调函数，最终时从音频队列中取出一个个音频包，进行解码，解码后就交给声卡。</li>\n</ol>\n<blockquote>\n<p>为什么要进行重采样？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwrContext</span> *audio_swr_ctx;</span><br></pre></td></tr></table></figure>\n<p>这是因为我们的音频设备的音频参数是固定的（采样率、通道数、采样大小等等）。这些都是我们已经固定的。也就是我们一旦初始化音频设备以后，这些参数就不能改变了，而在多媒体文件中，他就存在各种各样的音频格式，比如采样大小，有的是32位的，有的是16位的，有的是浮点的，有的是非浮点的。最终放到我们的音频设备中，统一的播放出来，我们应该对音频进行重采样。将我们见到的所有的音频格式统一到一个格式中，也就是我们打开音频设备时定义的。</p>\n</blockquote>\n<h4 id=\"音视频同步\">音视频同步</h4>\n<p><strong>时间戳</strong></p>\n<ul>\n<li><p><code>PTS (Presentation timestamp)</code>\n：表示在解码视频时应该在特定时间显示帧的时间戳。PTS告诉解码器何时将帧呈现给用户，以确保视频按照正确的顺序和时间显示。PTS通常以时间基为单位（例如，以毫秒为单位）进行表示。</p></li>\n<li><p><code>DTS (Decoding timestamp)</code>：指解码器开始解码帧的时间戳。它指示视频帧何时应该开始解码，以确保在正确的时间呈现帧。DTS通常以时间基为单位（例如，以毫秒为单位）进行表示。\nDTS和PTS之间的差异可以表示解码器需要多长时间来解码视频帧。</p></li>\n<li><p><code>I (intra) / B (bidirectional) / P (predicted) 帧</code>\n：视频编码中常见的帧类型。它们用于表示视频序列中的不同类型的帧。</p>\n<ol type=\"1\">\n<li><p>I帧（Intra\nFrame）：I帧是视频序列中的关键帧或帧间隔。每个I帧都是独立的，不依赖于其他帧。它包含完整的图像信息，可以作为其他帧的参考点。通常，视频序列的开始和切换点（例如场景变化）会包含I帧。</p></li>\n<li><p>P帧（Predicted\nFrame）：P帧是通过对前向参考帧（通常是前一个I帧或P帧）进行运动补偿来编码的。它只包含自身与前一帧之间的差异信息。P帧依赖于之前的帧进行解码，并且可以用来预测未来帧的内容。</p></li>\n<li><p>B帧（Bidirectional\nFrame）：B帧是通过对前后两个参考帧（通常是前一个和后一个I帧或P帧）进行运动补偿来编码的。它包含自身与前后两个参考帧之间的差异信息。B帧通常具有最高的压缩率，因为它可以利用未来和过去帧之间的关联来减少信息冗余。</p></li>\n</ol>\n<p>这些帧类型通常在视频编码标准（如H.264 / AVC或H.265 /\nHEVC）中使用，并且在压缩视频时起着重要作用。</p></li>\n</ul>\n<p><strong>时间戳顺序</strong></p>\n<p>实际帧顺序： <code>I B B P</code></p>\n<p>存放帧顺序： <code>I P B B</code></p>\n<p>解码时间戳： <code>1 4 2 3</code> <code>DTS</code></p>\n<p>展示时间戳： <code>1 2 3 4</code> <code>PTS</code></p>\n<p><strong>从哪里获得PTS</strong></p>\n<ul>\n<li><code>AVPacket PTS</code></li>\n<li><code>AVFrame PTS</code></li>\n<li><code>av_frame_get_best_effort_timestamp()</code> 当\n<code>PTS</code> 无效时，我们可以调用推算出合适的 <code>PTS</code></li>\n</ul>\n<p><strong>时间基</strong></p>\n<ul>\n<li><code>tbr</code> : 帧率\n指在视频中每秒显示的帧数。帧速率决定了视频的流畅度，更高的帧速率通常会产生更加流畅的视频效果。通常，帧速率以每秒帧数（fps）的形式表示。</li>\n<li><code>tbn (time base of stream)</code>：指流的时间基准（time base of\nstream），它表示流中时间单位的基准。在视频处理中，时间单位通常以分数形式表示，例如1/1000秒。这个时间基准用于确定时间戳的单位，以及在视频流中的时间度量。</li>\n<li><code>tbc (time base of codec)</code>：编解码器的时间基准（time base\nof\ncodec），它是指编解码器内部使用的时间单位的基准。与流的时间基准不同，编解码器的时间基准可能与流的时间基准不同，尤其是在处理不同类型的视频或音频流时。编解码器的时间基准用于确定编码器内部时间单位的度量，通常以分数形式表示，例如1/1000秒。</li>\n</ul>\n<p><strong>计算当前帧的 PTS</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PTS = PTS * <span class=\"built_in\">av_q2d</span>(video_stream-&gt;time_base);</span><br><span class=\"line\"><span class=\"built_in\">av_q2d</span>(AVRotional a) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.num / (<span class=\"type\">double</span>)a.den;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>计算下一帧的 PTS</strong></p>\n<p><code>video_clock</code>：预测的下一帧视频的 <code>PTS</code>\n上一帧的 <code>PTS</code> 加上 <code>frame_delay</code></p>\n<p><code>frame_delay</code>：<code>1 / tbr</code></p>\n<p><code>audio_clock</code>：音频当前播放的时间戳</p>\n<p><strong>音视频同步方式</strong></p>\n<ol type=\"1\">\n<li><p>视频同步到音频：</p></li>\n<li><p>音频同步到视频：</p></li>\n<li><p>音频和视频都同步到系统时钟：</p></li>\n</ol>\n<p><strong>视频播放的基本思路</strong></p>\n<p>一般的做法，展示第一帧视频帧后，获得要显示的下一个视频帧的\n<code>PTS</code>\n，然后设置一个定时器，当定时器超时后，刷新新的视频帧，如此反复操作。</p>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2024/05/05/mysql/",
            "url": "https://chnhqz.github.io/2024/05/05/mysql/",
            "title": "mysql",
            "date_published": "2024-05-05T04:52:22.000Z",
            "content_html": "<h2 id=\"一sql语句\">一、SQL语句</h2>\n<h3 id=\"数据库表操作ddl\">1.数据库表操作（DDL）</h3>\n<p>查询所有数据库<code>SHOW DATABASES;</code>查询当前数据库<code>SELECTDATABASE();</code></p>\n<p>创建\n<code>CREATE DATABASE [IF NOT EXISTS] 数据库命 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];</code></p>\n<p>删除<code>DROP DATABASE[IF EXISTS] 数据库名;</code></p>\n<p>使用<code>USE 数据库名;</code></p>\n<p>查询数据库中的表<code>show tables;'</code></p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-02 16.52.02.png\" alt=\"截屏2024-04-02 16.52.02\" style=\"zoom:30%;\" /></p>\n<p>查询表结构<code>DESC 表名;</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2019.53.58.png\"\nalt=\"截屏2024-04-02 19.53.58\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-02 19.53.58</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2020.01.47.png\"\nalt=\"截屏2024-04-02 20.01.47\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-02 20.01.47</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-02%2020.08.51.png\"\nalt=\"截屏2024-04-02 20.08.51\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-02 20.08.51</figcaption>\n</figure>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-02 20.11.50.png\" alt=\"截屏2024-04-02 20.11.50\" style=\"zoom:50%;\" /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table emp(</span><br><span class=\"line\">\t<span class=\"built_in\">id</span> int comment <span class=\"string\">&#x27;编号&#x27;</span>,</span><br><span class=\"line\">  workno varchar(10) comment <span class=\"string\">&#x27;工号&#x27;</span>,</span><br><span class=\"line\">  name varchar(10) comment <span class=\"string\">&#x27;姓名&#x27;</span>,</span><br><span class=\"line\">  gender char(1) comment <span class=\"string\">&#x27;性别&#x27;</span>,</span><br><span class=\"line\">  age tinyint unsigned comment <span class=\"string\">&#x27;年龄&#x27;</span>,</span><br><span class=\"line\">  idcard char(18) comment <span class=\"string\">&#x27;身份证号&#x27;</span>,</span><br><span class=\"line\">  entrydate <span class=\"built_in\">date</span> comment <span class=\"string\">&#x27;入职时间&#x27;</span></span><br><span class=\"line\">) comment <span class=\"string\">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表结构修改\"><strong>表结构修改</strong></h4>\n<p>添加字段\n<code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code></p>\n<p>修改字段<code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code></p>\n<p>修改字段名和字段类型\n<code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code></p>\n<p>删除字段<code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名<code>ALTER TABLE 表名 RENAME TO 新表名;</code></p>\n<p>删除表<code>DROP TABLE [IF EXISTS] 表名;</code>\n删除指定表，并重新创建该表 <code>TRUNCATE TABLE 表名;</code>\n这种方式删除，是删除掉整张表的数据，再重新创建该表，等于清空表的数据，留下空表。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 19.20.52.png\" alt=\"截屏2024-04-08 19.20.52\" style=\"zoom:50%;\" /></p>\n<h3 id=\"dml增删改\">2.DML增删改</h3>\n<p>DML英文全称是Data Manipulation\nLanguage(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。</p>\n<h4 id=\"添加数据insert\">1.<strong>添加数据INSERT</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.34.50.png\"\nalt=\"截屏2024-04-08 19.34.50\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-08 19.34.50</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.36.19.png\"\nalt=\"截屏2024-04-08 19.36.19\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-08 19.36.19</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.36.59.png\"\nalt=\"截屏2024-04-08 19.36.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-08 19.36.59</figcaption>\n</figure>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 19.38.15.png\" alt=\"截屏2024-04-08 19.38.15\" style=\"zoom:50%;\" /></p>\n<hr />\n<h4 id=\"修改数据update\">2.<strong>修改数据UPDATE</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2019.57.37.png\"\nalt=\"截屏2024-04-08 19.57.37\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-08 19.57.37</figcaption>\n</figure>\n<hr />\n<h4 id=\"删除数据delete\"><strong>3.删除数据DELETE</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-08%2020.13.36.png\"\nalt=\"截屏2024-04-08 20.13.36\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-08 20.13.36</figcaption>\n</figure>\n<hr />\n<h3 id=\"dql-介绍\">3.DQL-介绍</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2012.01.20.png\"\nalt=\"截屏2024-04-10 12.01.20\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-10 12.01.20</figcaption>\n</figure>\n<p>DOL英文全称是Data Query\nLanguage(数据查询语言人，数据查询语言，用来查询数据库中表的记录。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-08 20.53.25.png\" alt=\"截屏2024-04-08 20.53.25\" style=\"zoom:50%;\" /></p>\n<h4 id=\"基本查询\"><strong>1.基本查询</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-09%2012.27.04.png\"\nalt=\"截屏2024-04-09 12.27.04\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-09 12.27.04</figcaption>\n</figure>\n<blockquote>\n<p>1.查询指定字段 name, workno, age 返回</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name, workno, age from emp;\t\t\t\t </span><br></pre></td></tr></table></figure>\n<p>2.查询返回所有字段</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp</span><br></pre></td></tr></table></figure>\n<p><strong>在开发的时候尽量不要写通配符</strong></p>\n<p>3.查询所有员工的工作地址，起别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> workaddress from emp;</span><br><span class=\"line\"><span class=\"keyword\">select</span> workaddress as <span class=\"string\">&#x27;工作地址&#x27;</span> from emp;</span><br></pre></td></tr></table></figure>\n<p>4.查询公司员工的上班地址（不要重复）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> distinct workaddress <span class=\"string\">&#x27;工作地址&#x27;</span> from emp;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"条件查询where\"><strong>2.条件查询（WHERE）</strong></h4>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 11.58.31.png\" alt=\"截屏2024-04-10 11.58.31\" style=\"zoom:50%;\" /></p>\n<p><strong>1.查询年龄等于 88 的员工</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age = 88;</span><br></pre></td></tr></table></figure>\n<p><strong>2.查询年龄小于 20 的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age &lt; 88;</span><br></pre></td></tr></table></figure>\n<p><strong>3.查询年龄小于等于 20 的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age &lt;= 88;</span><br></pre></td></tr></table></figure>\n<p><strong>4.查询没有身份证号的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> idcard is null;</span><br></pre></td></tr></table></figure>\n<p><strong>5.查询有身份证号的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> idcard is not null;</span><br></pre></td></tr></table></figure>\n<p><strong>6.查询年龄不等于 88 的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age != 88;</span><br></pre></td></tr></table></figure>\n<p><strong>7.查询年龄在 15 岁（包含）到 20\n岁（包含）之间的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age &gt;= 15 and age &lt;= 20;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age between 15 and 20;</span><br><span class=\"line\"><span class=\"comment\"># between and 既包含最小值又包含最大值</span></span><br></pre></td></tr></table></figure>\n<p><strong>8.查询性别为 女 且年龄小于 25 岁的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> gender = <span class=\"string\">&#x27;女&#x27;</span> and age &lt; 25;</span><br></pre></td></tr></table></figure>\n<p><strong>9.查询年龄等于 18 或 20 或 40 的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age = 10 or age = 20 or age = 40;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> age <span class=\"keyword\">in</span>(18, 20, 40);</span><br></pre></td></tr></table></figure>\n<p><strong>10.查询姓名为两个字的员工的信息</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from emp where name like &#x27;__&#x27;;</span><br><span class=\"line\"># 两个下划线代表来两个个字符</span><br></pre></td></tr></table></figure>\n<p><strong>11.查询身份证号最后一位是 X 的员工信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">where</span> idcard like <span class=\"string\">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"聚合函数count-max-min-avg-sum\"><strong>3.聚合函数（COUNT, MAX,\nMIN, AVG, SUM）</strong></h4>\n<p>聚合函数是指将一列数据作为一个整体，进行纵向计算。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 16.44.40.png\" alt=\"截屏2024-04-10 16.44.40\" style=\"zoom:50%;\" /></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2016.46.02.png\"\nalt=\"截屏2024-04-10 16.46.02\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-10 16.46.02</figcaption>\n</figure>\n<p><strong>1.统计该企业员工数量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> count(*) from emp;</span><br><span class=\"line\"><span class=\"keyword\">select</span> count(<span class=\"built_in\">id</span>) from emp;</span><br></pre></td></tr></table></figure>\n<p><strong>2.统计该企业员工的平均年龄</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> avg(age) from emp;</span><br></pre></td></tr></table></figure>\n<p><strong>3.统计该企业员工的最大年龄</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> max(age) from emp;</span><br></pre></td></tr></table></figure>\n<p><strong>4.统计该企业员工的最小年龄</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> min(age) from emp;</span><br></pre></td></tr></table></figure>\n<p><strong>5.统计西安地区员工的年龄之和</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(age) from emp <span class=\"built_in\">where</span> workaddress = <span class=\"string\">&#x27;西安&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分组查询group-by\"><strong>4.分组查询（GROUP BY）</strong></h4>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2024-04-10 17.05.18.png\" alt=\"截屏2024-04-10 17.05.18\" style=\"zoom:%;\" /></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2017.06.47.png\"\nalt=\"截屏2024-04-10 17.06.47\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-10 17.06.47</figcaption>\n</figure>\n<p><strong>1.根据性别分组，统计男性员工 和 女性员工的数量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> count(*) from emp group by gender ;</span><br><span class=\"line\"><span class=\"keyword\">select</span> gender, count(*) from emp group by gender;</span><br></pre></td></tr></table></figure>\n<p><strong>2.根据性别分组，统计男性员工和女性员工的平均年龄</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> gender, avg(age) from emp gruop by gender;</span><br></pre></td></tr></table></figure>\n<p><strong>3.查询年龄小于 45\n的员工，并根据工作地址分组，获取员工数量大于等于 3\n的工作地址</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> workaddress, count(*) from emp <span class=\"built_in\">where</span> age &lt; 45 group by workaddress having count(*) &gt;= 3;</span><br></pre></td></tr></table></figure>\n<h4 id=\"排序查询order-by\"><strong>5.排序查询（ORDER BY）</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-10%2021.18.46.png\"\nalt=\"截屏2024-04-10 21.18.46\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-10 21.18.46</figcaption>\n</figure>\n<p><strong>1.根据年龄对公司的员工进行升序排序</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp order by age asc;</span><br></pre></td></tr></table></figure>\n<p><strong>2.根据入职时间，对员工进行降序排序</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp order by entrydate desc;</span><br></pre></td></tr></table></figure>\n<p><strong>3.根据年龄对公司员工进行升序排序，年龄相同，再按照入职时间进行降序排序</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp order by age asc, entrydate desc;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分页查询limit\"><strong>6.分页查询（LIMIT）</strong></h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.35.25.png\"\nalt=\"截屏2024-04-11 10.35.25\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 10.35.25</figcaption>\n</figure>\n<p><strong>1.查询第一页员工数据，每页展示 10 条记录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">limit</span> 0, 10;</span><br></pre></td></tr></table></figure>\n<p><strong>2.查询第二页员工数据，每页展示 10 条记录 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp <span class=\"built_in\">limit</span> 10, 10;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dql语句执行顺序\">7.DQL语句执行顺序</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.44.07.png\"\nalt=\"截屏2024-04-11 10.44.07\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 10.44.07</figcaption>\n</figure>\n<h3 id=\"dcl\">4.DCL</h3>\n<p>DCL（Data Control\nLanguage，数据控制语言），用来管理数据库用户、控制数据库的访问权限。</p>\n<h4 id=\"用户管理\">1.用户管理</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2010.49.01.png\"\nalt=\"截屏2024-04-11 10.49.01\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 10.49.01</figcaption>\n</figure>\n<p><strong>注意：主机名可以使用 % 通配。</strong></p>\n<h4 id=\"权限控制\">2.权限控制</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.02.56.png\"\nalt=\"截屏2024-04-11 11.02.56\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 11.02.56</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.04.52.png\"\nalt=\"截屏2024-04-11 11.04.52\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 11.04.52</figcaption>\n</figure>\n<h2 id=\"二函数\">二、函数</h2>\n<p>函数是指一段可以直接被另一段程序调用的程序或代码。</p>\n<h3 id=\"字符串函数\">1.字符串函数</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2011.33.01.png\"\nalt=\"截屏2024-04-11 11.33.01\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 11.33.01</figcaption>\n</figure>\n<p>由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update emp <span class=\"built_in\">set</span> workno = lpad(workno, 5, <span class=\"string\">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值函数\">2.数值函数</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2014.23.41.png\"\nalt=\"截屏2024-04-11 14.23.41\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 14.23.41</figcaption>\n</figure>\n<p>通过数据库的函数，生成一个六位数的随机验证码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> rand()*1000000;</span><br><span class=\"line\"><span class=\"keyword\">select</span> round(rand()*1000000, 0);</span><br><span class=\"line\"><span class=\"keyword\">select</span> lpad(round(rand()*1000000, 0),6, <span class=\"string\">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"日期函数\">3.日期函数</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.16.40.png\"\nalt=\"截屏2024-04-11 15.16.40\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 15.16.40</figcaption>\n</figure>\n<h3 id=\"流程函数\">4.流程函数</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.19.38.png\"\nalt=\"截屏2024-04-11 15.19.38\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 15.19.38</figcaption>\n</figure>\n<p>查询 emp 表的员工姓名和工作地址（北京/上海-&gt;&gt;&gt; 一线城市，\n其它-&gt;&gt;&gt;&gt;二线城市）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name, （<span class=\"keyword\">case</span> workaddress when <span class=\"string\">&#x27;北京&#x27;</span> <span class=\"keyword\">then</span> <span class=\"string\">&#x27;一线城市&#x27;</span> when <span class=\"string\">&#x27;上海&#x27;</span> <span class=\"keyword\">then</span> <span class=\"string\">&#x27;一线城市&#x27;</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;二线城市&#x27;</span> end） as <span class=\"string\">&#x27;工作地址&#x27;</span> from emp;</span><br></pre></td></tr></table></figure>\n<p>统计班级各个学员的成绩，展示规则：&gt;=85,展示优秀，&gt;=60展示及格，否则，展示不合格。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.47.51.png\"\nalt=\"截屏2024-04-11 15.47.51\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 15.47.51</figcaption>\n</figure>\n<h2 id=\"三约束\">三、约束</h2>\n<p>约束是作用于表中字段上的规则，用于限制存储在表中的数据。保证数据库中数据的正确、有效性和完整性。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2015.57.06.png\"\nalt=\"截屏2024-04-11 15.57.06\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 15.57.06</figcaption>\n</figure>\n<p><strong>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束</strong></p>\n<h3 id=\"约束演示\">1.约束演示</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2019.29.38.png\"\nalt=\"截屏2024-04-11 19.29.38\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 19.29.38</figcaption>\n</figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user (</span><br><span class=\"line\">\t<span class=\"built_in\">id</span> int primary key auto_increment,</span><br><span class=\"line\">  name varchar(10) not null unique,</span><br><span class=\"line\">  age int check (age &gt; 0 &amp;&amp; age &lt;= 120),</span><br><span class=\"line\">  status char(1) default <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">  gender char(1),</span><br><span class=\"line\">) comment <span class=\"string\">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"外键约束\">2.外键约束</h3>\n<p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-11%2020.01.23.png\"\nalt=\"截屏2024-04-11 20.01.23\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-11 20.01.23</figcaption>\n</figure>\n<p><strong>注意：目前上述的两张表，在数据库层面，并未建立外键关联，所以是无法保证数据的一致性和完整性的</strong></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.34.53.png\"\nalt=\"截屏2024-04-12 10.34.53\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 10.34.53</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.38.36.png\"\nalt=\"截屏2024-04-12 10.38.36\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 10.38.36</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.40.46.png\"\nalt=\"截屏2024-04-12 10.40.46\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 10.40.46</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.43.17.png\"\nalt=\"截屏2024-04-12 10.43.17\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 10.43.17</figcaption>\n</figure>\n<h2 id=\"四多表查询\">四、多表查询</h2>\n<h3 id=\"多表关系\">1.多表关系</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2010.52.50.png\"\nalt=\"截屏2024-04-12 10.52.50\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 10.52.50</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.04.18.png\"\nalt=\"截屏2024-04-12 11.04.18\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.04.18</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.06.00.png\"\nalt=\"截屏2024-04-12 11.06.00\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.06.00</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.10.06.png\"\nalt=\"截屏2024-04-12 11.10.06\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.10.06</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.10.28.png\"\nalt=\"截屏2024-04-12 11.10.28\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.10.28</figcaption>\n</figure>\n<p><strong>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</strong></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.12.40.png\"\nalt=\"截屏2024-04-12 11.12.40\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.12.40</figcaption>\n</figure>\n<h3 id=\"多表查询概述\">2.多表查询概述</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.19.20.png\"\nalt=\"截屏2024-04-12 11.19.20\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.19.20</figcaption>\n</figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * from emp, dept <span class=\"built_in\">where</span> emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.23.24.png\"\nalt=\"截屏2024-04-12 11.23.24\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.23.24</figcaption>\n</figure>\n<h3 id=\"内连接\">3.内连接</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.26.45.png\"\nalt=\"截屏2024-04-12 11.26.45\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.26.45</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.32.17.png\"\nalt=\"截屏2024-04-12 11.32.17\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.32.17</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.33.49.png\"\nalt=\"截屏2024-04-12 11.33.49\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.33.49</figcaption>\n</figure>\n<h3 id=\"外连接\">4.外连接</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.35.58.png\"\nalt=\"截屏2024-04-12 11.35.58\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.35.58</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.38.59.png\"\nalt=\"截屏2024-04-12 11.38.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.38.59</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.41.30.png\"\nalt=\"截屏2024-04-12 11.41.30\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.41.30</figcaption>\n</figure>\n<h3 id=\"自连接\">5.自连接</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.49.48.png\"\nalt=\"截屏2024-04-12 11.49.48\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.49.48</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.53.21.png\"\nalt=\"截屏2024-04-12 11.53.21\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.53.21</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2011.57.09.png\"\nalt=\"截屏2024-04-12 11.57.09\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 11.57.09</figcaption>\n</figure>\n<h3 id=\"联合查询\">6.联合查询</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.18.17.png\"\nalt=\"截屏2024-04-12 14.18.17\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 14.18.17</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.20.51.png\"\nalt=\"截屏2024-04-12 14.20.51\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 14.20.51</figcaption>\n</figure>\n<p><strong>会出现重复结果， 可以直接删除 all </strong></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.23.43.png\"\nalt=\"截屏2024-04-12 14.23.43\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 14.23.43</figcaption>\n</figure>\n<h3 id=\"子查询\">7.子查询</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2014.25.35.png\"\nalt=\"截屏2024-04-12 14.25.35\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 14.25.35</figcaption>\n</figure>\n<p>根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。</p>\n<h4 id=\"标量子查询\">标量子查询</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.31.52.png\"\nalt=\"截屏2024-04-12 15.31.52\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.31.52</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.34.59.png\"\nalt=\"截屏2024-04-12 15.34.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.34.59</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.36.59.png\"\nalt=\"截屏2024-04-12 15.36.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.36.59</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.37.35.png\"\nalt=\"截屏2024-04-12 15.37.35\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.37.35</figcaption>\n</figure>\n<h4 id=\"列子查询\">列子查询</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.40.18.png\"\nalt=\"截屏2024-04-12 15.40.18\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.40.18</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.43.23.png\"\nalt=\"截屏2024-04-12 15.43.23\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.43.23</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.46.48.png\"\nalt=\"截屏2024-04-12 15.46.48\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.46.48</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2015.49.46.png\"\nalt=\"截屏2024-04-12 15.49.46\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 15.49.46</figcaption>\n</figure>\n<h4 id=\"行子查询\">行子查询</h4>\n<p><img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.04.38.png\"\nalt=\"截屏2024-04-12 16.04.38\" /> <img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.10.30.png\"\nalt=\"截屏2024-04-12 16.10.30\" /></p>\n<h4 id=\"表子查询\">表子查询</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.16.11.png\"\nalt=\"截屏2024-04-12 16.16.11\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 16.16.11</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.19.22.png\"\nalt=\"截屏2024-04-12 16.19.22\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 16.19.22</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.27.04.png\"\nalt=\"截屏2024-04-12 16.27.04\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 16.27.04</figcaption>\n</figure>\n<h2 id=\"五事务\">五、事务</h2>\n<p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。典型案例是银行转账。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.37.59.png\"\nalt=\"截屏2024-04-12 16.37.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 16.37.59</figcaption>\n</figure>\n<p><strong>注意⚠️：默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</strong></p>\n<h3 id=\"事务操作\">1.事务操作</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2016.53.43.png\"\nalt=\"截屏2024-04-12 16.53.43\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 16.53.43</figcaption>\n</figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT @@autocommit;</span><br><span class=\"line\"></span><br><span class=\"line\"># @@autocommit = 1 : 自动提交；</span><br><span class=\"line\"># 控制事务，将 @@autocommit 设置为 0 ；当前语句不会直接提交，而是等待 COMMIT 指令</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">select @@autocommit;</span><br><span class=\"line\">set @@autocommit = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1.查询张三账户余额</span><br><span class=\"line\">select * from account where name = &#x27;张三&#x27;;</span><br><span class=\"line\"># 2.将张三账户余额-1000</span><br><span class=\"line\">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class=\"line\"># 3.将李四账户余额+1000</span><br><span class=\"line\">update account set money = money + 1000 where name = &#x27;张三&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交事务</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2017.21.37.png\"\nalt=\"截屏2024-04-12 17.21.37\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 17.21.37</figcaption>\n</figure>\n<h3 id=\"事务四大特性\">2.事务四大特性</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2020.29.10.png\"\nalt=\"截屏2024-04-12 20.29.10\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 20.29.10</figcaption>\n</figure>\n<h3 id=\"并发事务问题\">3.并发事务问题</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-12%2020.41.36.png\"\nalt=\"截屏2024-04-12 20.41.36\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-12 20.41.36</figcaption>\n</figure>\n<h3 id=\"事务隔离级别\">4.事务隔离级别</h3>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-13%2010.48.59.png\"\nalt=\"截屏2024-04-13 10.48.59\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-13 10.48.59</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-04-13%2010.52.56.png\"\nalt=\"截屏2024-04-13 10.52.56\" />\n<figcaption aria-hidden=\"true\">截屏2024-04-13 10.52.56</figcaption>\n</figure>\n<p><strong>SESSION 仅仅设置当前会话的的级别，GLOBAL\n设置为全部的</strong></p>\n<p><code>别担心，有一天我们地球的光会到达遥远的星系，在每个星系我们都会再次年轻，我们将永远在一起。</code></p>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2024/05/05/linux/linux-md/",
            "url": "https://chnhqz.github.io/2024/05/05/linux/linux-md/",
            "title": "linux.md",
            "date_published": "2024-05-05T04:26:02.000Z",
            "content_html": "<h3 id=\"linux学习笔记\">Linux学习笔记</h3>\n<p>以下是lInux设备添加v6的脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://install.zerotier.com | sudo bash</span><br><span class=\"line\">cd /var/lib/zerotier-one</span><br><span class=\"line\">rm -rf planet</span><br><span class=\"line\">wget http://blog.nomao.top/planet -O planet</span><br><span class=\"line\">service zerotier-one restart</span><br><span class=\"line\"></span><br><span class=\"line\">sudo zerotier-cli join 93caa675b035c9d7</span><br><span class=\"line\">sudo zerotier-cli set 93caa675b035c9d7 allowGlobal=true</span><br><span class=\"line\">sudo zerotier-cli set 93caa675b035c9d7 allowDefault=1</span><br></pre></td></tr></table></figure>\n<h3 id=\"linux命令\">2.Linux命令</h3>\n<h4 id=\"linux系统的目录结构\">2.1Linux系统的目录结构</h4>\n<p>Linux的目录结构是一个型结构，没有盘符的概念，只有一个根目录/，所有的文件都在它下面。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 11.50.33.png\" alt=\"截屏2023-12-26 11.50.33\" style=\"zoom:50%;\" /></p>\n<p>在Linux系统中，路径之间的层级关系，使用\n<code>:/</code>来表示。Windows则是 <code>:\\</code>。</p>\n<h4 id=\"linux命令入门\">2.2Linux命令入门</h4>\n<h5 id=\"linux命令基础\">2.2.1Linux命令基础</h5>\n<p>命令行：即Linux终端（Terminal），是一种命令提示符页面。以春“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令。</p>\n<p>命令：即Linux程序。一个命令就是一个Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化反馈</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 13.16.32.png\" alt=\"截屏2023-12-26 13.16.32\" style=\"zoom:50%;\" /></p>\n<p>学习Linux就是在命令行界面去熟练的使用Linux的各类命令。</p>\n<p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的形式：<code>command [-options] [parameter]</code></p>\n<ul>\n<li><code>comman:d</code> 命令本身</li>\n<li><code>-options:</code>\n【可选，非必填】命令的一些选项，可以通过选项控制命令的行为细节</li>\n<li><code>parameter:</code>\n【可选，非必填】命令的参数，多数用于命令的指向目标等</li>\n</ul>\n<blockquote>\n<p><code>ls -l /home/itheima</code> ls是命令本身，-l是选项，\n/home/itheima是参数</p>\n</blockquote>\n<h5 id=\"ls命令入门\">2.2.2ls命令入门</h5>\n<p><code>ls</code>\n命令的作用是列出目录下的内容，语法细节:<code>ls [-a -l -h] [linux路径]</code>\n。当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 14.59.20.png\" alt=\"截屏2023-12-26 14.59.20\" style=\"zoom:50%;\" /></p>\n<p>Linux系统的命令行终端，在启动的时候，默认会加载：</p>\n<ul>\n<li>当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的是HOME目录的内容</li>\n<li>HOME目录：每个Linux操作用户在Linux系统的个人账户目录，路径在\n:<code>/home/用户名</code></li>\n</ul>\n<h5 id=\"ls命令的参数和选项\">2.2.3ls命令的参数和选项</h5>\n<ul>\n<li><code>-a</code>\n选项，表示：all的意思，即列出全部文件（包含隐藏的文件/文件夹）</li>\n<li><code>-l</code>\n选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li>\n<li><code>-h</code>\n选项，表示：以易于阅读的形式，列出文件大小，如K、M、G。注意：<code>-h</code>\n选项必须搭配 <code>-l</code>一起使用。</li>\n</ul>\n<p>ls命令选项的组合使用 <code>ls -a -l</code></p>\n<h4 id=\"目录切换相关命令cdpwd\">2.3目录切换相关命令（cd/pwd）</h4>\n<h5 id=\"cd-切换工作目录\">2.3.1cd 切换工作目录</h5>\n<p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工像目录</p>\n<p>我们可以通过cd命令，更改当前所在的工作目录。</p>\n<p><code>cd</code>命令来自英文：Change Directory</p>\n<p>浯法：cd[Linux路径］</p>\n<ul>\n<li>﻿<code>cd</code>命令无需选项，只有参数，表示要切换到哪个目录下</li>\n<li>﻿<code>﻿cd</code>命令直接执行，不写参数，表示回到用户的HOME目录</li>\n</ul>\n<h5 id=\"pwd-查看当前工作目录\">2.3.2pwd 查看当前工作目录</h5>\n<p>通过<code>ls</code>来验证当前的工作目录，其实是不恰当的。</p>\n<p>我们可以通过<code>pwd</code>命令，来查看当前所在的工作目录。</p>\n<p><code>pwd</code>命令来自：Print work Directory</p>\n<p>语法：<code>pwd</code></p>\n<ul>\n<li><code>pwd</code>命令，无选项，无参数，直接输入<code>pwd</code>即可</li>\n</ul>\n<h4\nid=\"相对路径绝对路径和特殊路径符\">2.4相对路径、绝对路径和特殊路径符</h4>\n<h5 id=\"相对路径和绝对路径\">2.4.1相对路径和绝对路径</h5>\n<ul>\n<li>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以<code>/</code>开头</li>\n<li>相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以<code>/</code>开头</li>\n</ul>\n<h5 id=\"特殊路径符\">2.4.2特殊路径符</h5>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.03.10.png\" alt=\"截屏2023-12-26 17.03.10\" style=\"zoom:50%;\" /></p>\n<p>如图，当前工作目录处于：<code>/home/itheima/Desktop</code></p>\n<p>向上回退一级，切换目录到<code>/home/itheima</code>中</p>\n<ul>\n<li>可以直接通过<code>cd</code>，即可回到HOME目录</li>\n<li>也可以通过特殊路径符来完成</li>\n</ul>\n<p>特殊路径符：</p>\n<ul>\n<li><code>.</code> 表示当前目录，比如：<code>cd ./Desktop</code>\n表示切换到当前目录下的<code>Desktop</code> 目录内，和\n<code>cd Desktop</code> 效果一致</li>\n<li><code>..</code> 表示上一级目录，比如：<code>cd..</code>\n即可切换到上一级目录，<code>cd ../..</code> 切换到上二级的目录</li>\n<li><code>~</code> 表示HOME目录，比如：<code>cd~</code>\n即可切换到HOME目录或<code>cd ~/Desktop</code>\n，切换到HOME内的<code>Desktop</code> 目录</li>\n</ul>\n<h4 id=\"mkdir-命令\">2.5<code>mkdir</code> 命令</h4>\n<p>通过 <code>mkdir</code> 命令可以创建新的目录（文件夹）</p>\n<p><code>mkdir</code> 来自英文：Make Directory</p>\n<p>语法：<code>mkdir [-p] Linux路径</code></p>\n<ul>\n<li>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可</li>\n<li><code>-p</code>\n选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li>\n</ul>\n<blockquote>\n<p>⚠️：创建文件夹需要修改权限，确保操作均在HOME目录内，不要在HOME外操作。涉及到权限问题，HOME外无法成功。</p>\n</blockquote>\n<h4 id=\"文件操作命令\">2.6文件操作命令</h4>\n<h5 id=\"touch-创建文件\">2.6.1<code>touch</code> 创建文件</h5>\n<p>可以通过<code>touch</code> 命令创建文件</p>\n<p>语法：<code>touch Linux路径</code></p>\n<p><code>touch</code>\n命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.46.02.png\" alt=\"截屏2023-12-26 17.46.02\" style=\"zoom:50%;\" /></p>\n<blockquote>\n<p>文件夹与文件的区别，使用<code>ls -l</code>\n命令，发现文件夹是<code>d</code>开头，文件是<code>-</code>开头</p>\n</blockquote>\n<h5 id=\"cat-命令查看文件内容\">2.6.2<code>cat</code>\n命令查看文件内容</h5>\n<p>可以通过<code>cat</code> 查看内容</p>\n<p>语法：<code>cat Linux路径</code></p>\n<p><code>cat</code>\n同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-26 17.55.17.png\" alt=\"截屏2023-12-26 17.55.17\" style=\"zoom:50%;\" /></p>\n<h5 id=\"more-命令查看文件内容\">2.6.3<code>more</code>\n命令查看文件内容</h5>\n<p><code>more</code> 命令同样可以查看文件内容，同<code>cat</code>\n不同的是：</p>\n<ul>\n<li><code>cat</code> 是直接将内容全部显示出来</li>\n<li><code>more</code> 支持翻页，如果文件内容过多，可以一页页的展示</li>\n</ul>\n<p>语法：<code>more Linux路径</code></p>\n<p><code>more</code>\n同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径都可以使用</p>\n<h5 id=\"cp-复制文件文件夹\">2.6.4 <code>cp</code> 复制文件、文件夹</h5>\n<p><code>cp</code>\n命令可以用于复制文件，<code>cp</code>命令来自英文单词：copy</p>\n<p>语法：<code>cp [-r] 参数1 参数2</code></p>\n<ul>\n<li>﻿<code>-r</code>选项，可选，用于复制文件夹使用，表示递归</li>\n<li>﻿<code>﻿参数1</code>，Linux路径，表示被复制的文件或文件夹</li>\n<li>﻿<code>﻿参数2</code>，Linux路径，表示要复制去的地方</li>\n</ul>\n<h5 id=\"mv-移动文件文件夹\">2.6.5<code>mv</code> 移动文件、文件夹</h5>\n<p><code>mv</code>命令可以用于移动文件，<code>mv</code>命令来自英文单词：move</p>\n<p>语法：<code>mv 参数1 参数2</code></p>\n<ul>\n<li>﻿<code>参数1</code>，Linux路径，表示被移动的文件或文件夹</li>\n<li>﻿<code>﻿参数2</code>，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li>\n</ul>\n<h5 id=\"rm-删除文件文件夹\">2.6.6<code>rm</code> 删除文件、文件夹</h5>\n<p><code>rm</code>命令可用于删除文件、文件夹。<code>rm</code>命令来自英文单词：remove</p>\n<p>语法：<code>rm [-r -f] 参数1 参数2 . . . . . 参数N</code></p>\n<ul>\n<li>﻿同<code>cp</code>命令一样，<code>-r</code>选项用于删除文件夹</li>\n<li>﻿<code>-f</code>表示force，强制删除（不会弹出提示确认信息）\n<ul>\n<li>﻿普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li>\n<li>﻿所以一般普通用户用不到-选项</li>\n</ul></li>\n<li>﻿参数1、参数2、………参数N\n表示要州除的文件或文件夹路径，按照空格隔开</li>\n</ul>\n<p><code>rm</code>命令支持通配符<code>*</code>，用来做模糊匹配</p>\n<ul>\n<li>﻿符号<code>*</code> 表示通配符，即匹配任意内容（包含空），示例：</li>\n<li>﻿<code>﻿test*</code>，表示匹配任何以<code>test</code>开头的内容</li>\n<li>﻿<code>*test</code>，表示匹配任何以<code>test</code>结尾的内容</li>\n<li>﻿<code>﻿*test*</code>，表示匹配任何包含<code>test</code>的内容</li>\n</ul>\n<p><code>-f</code>\n可以通过<code>su -root</code>，并输入密码<code>123456</code>\n临时切换到<code>root</code> 用户体验。</p>\n<h5 id=\"which-查找命令的程序文件\">2.6.7<code>which</code>\n查找命令的程序文件</h5>\n<p>我们在前面学习到的Linux命令，起始它们的本体就是一个个的二进制可执行程序。和Windows系统中的.exe文件，是一个意思。</p>\n<p>我们可以通过<code>which</code>命令，查看所使用的一系列命令的程序文件存放在哪里。</p>\n<p>语法：<code>which 要查找的命令</code></p>\n<h5 id=\"find-查找指定文件\">2.6.8<code>find</code> 查找指定文件</h5>\n<p>语法：<code>find 起始路径 -name “被查找文件名”</code>\n这里查找文件也可以使用通配符。</p>\n<p><code>find</code> 可以按文件大小查找文件</p>\n<p>语法：<code>find 起始路径 -size +｜-n [kMG]</code></p>\n<ul>\n<li><code>+、-</code> 表示大于和小于</li>\n<li><code>n</code> 表示大小数字</li>\n<li><code>kMG</code>\n表示大小单位，<code>k</code>（小写字母）表示<code>kb</code>，<code>M</code>\n表示 <code>MB</code> ，<code>G</code>表示<code>GB</code>。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 20.14.03.png\" alt=\"截屏2023-12-27 20.14.03\" style=\"zoom:50%;\" /></p>\n<h5 id=\"grep-过滤文件内容\">2.6.8<code>grep</code> 过滤文件内容</h5>\n<p>可以通过<code>grep</code> 命令，从文件中通过关键字过滤文件行。</p>\n<p>语法：<code>grep [-n] 关键字 文件路径</code></p>\n<ul>\n<li>选项<code>-n</code>，可选，表示在结果中显示匹配的行的行号</li>\n<li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用“”将关键字包围起来。</li>\n<li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口。</li>\n</ul>\n<h5 id=\"wc-统计内容数量\">2.6.9<code>wc</code> 统计内容数量</h5>\n<p>可以通过<code>wc</code> 命令统计文件的行数、单词数量等</p>\n<p>语法：<code>wc [-c -m -l -w] 文件路径</code></p>\n<ul>\n<li>选项，<code>-c</code>，统计bytes数量</li>\n<li>选项，<code>-m</code>，统计字符数量</li>\n<li>选项，<code>-l</code>，统计行数</li>\n<li>选项，<code>-w</code>，统计单词数量</li>\n<li>参数，<code>文件路径</code>，被统计的文件，可作为内容输入端口</li>\n</ul>\n<h5 id=\"管道符\">2.6.10 <code>管道符</code></h5>\n<p>管道符的含义是：将管道符左边命令的结果，作为右边命令的输入</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 20.42.07.png\" alt=\"截屏2023-12-27 20.42.07\" style=\"zoom:50%;\" /></p>\n<p>如上图：</p>\n<ul>\n<li><code>cat itheima.txt</code> 的输出结果（文件内容）</li>\n<li>作为右边<code>grep</code>命令的输入（被过滤文件）</li>\n</ul>\n<h5 id=\"echo-输出内容\">2.6.11 <code>echo</code> 输出内容</h5>\n<p>可以使用<code>echo</code>命令在命令行内输出制定内容</p>\n<p>语法：<code>echo 输出的内容</code></p>\n<ul>\n<li>无需选项，又有一个参试，表示要输出的内容，复杂内容可以用\"\"包围</li>\n<li><figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-27%2021.06.13.png\"\nalt=\"截屏2023-12-27 21.06.13\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-27 21.06.13</figcaption>\n</figure></li>\n</ul>\n<p>反引号的作用，我们可以通过将命令用反引号（通常也称之为飘号）`将其包围</p>\n<p>被`包围的内容，会被作为命令执行，而非普通字符。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-27 21.11.32.png\" alt=\"截屏2023-12-27 21.11.32\" style=\"zoom:50%;\" /></p>\n<h5 id=\"tail-跟踪文件更改\">2.6.12 <code>tail</code> 跟踪文件更改</h5>\n<p>使用<code>tail</code>命令，可以查看文件尾部内容，跟踪文件的最新更改，</p>\n<p>语法：<code>tail [-f -num] Linux路径</code></p>\n<ul>\n<li>参数，Linux路径，表示被跟踪的文件路径</li>\n<li>选项，<code>-f</code>，表示持续跟踪</li>\n<li>选项，<code>-num</code>，表示查看尾部多少行，不填默认10行</li>\n</ul>\n<h5 id=\"重定向符使用\">2.6.13 重定向符使用</h5>\n<p>重定向符：<code>&gt;和&gt;&gt;</code></p>\n<ul>\n<li><code>&gt;</code>，将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li>\n<li><code>&gt;&gt;</code>，将左侧命令的结果，追加写入到符号右侧指定的文件中</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 17.08.09.png\" alt=\"截屏2023-12-28 17.08.09\" style=\"zoom:80%;\" /></p>\n<h4 id=\"vivim编辑器\">2.7 <code>vi\\vim</code>编辑器</h4>\n<p><code>vi\\vim</code>是\n<code>visual interface</code>的简称，是Linux中最经典的文本编辑器，同图形化界面中的文本编辑器一样，<code>vi</code>是命令行下对文本文件进行编辑的绝佳选择。</p>\n<p><code>vim</code>是<code>vi</code>的加强版本，兼容<code>vi</code>的所有指令，不仅能编辑文本，而且还具有<code>shell</code>程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p>\n<p><strong><code>vi\\vim</code>编辑器的三种工作模式</strong></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2017.35.03.png\"\nalt=\"截屏2023-12-28 17.35.03\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-28 17.35.03</figcaption>\n</figure>\n<p>命令：<code>vim 文件路径</code></p>\n<ul>\n<li>如果文件路径表示的文件不存在，那么此命令会用于编辑新文件</li>\n<li>如果文件路径表示的文件存在，那么此命令用于编辑已有文件</li>\n</ul>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2019.50.59.png\"\nalt=\"截屏2023-12-28 19.50.59\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-28 19.50.59</figcaption>\n</figure>\n<p>通过<code>vi\\vim</code>命令编辑文件，会打开一个新的窗口，此时这个窗口就是，命令窗口，命令模式是<code>vim</code>编辑器的入口和出口</p>\n<ul>\n<li>进入<code>vim</code>编辑器会进入命令模式</li>\n<li>通过命令模式输入键盘指令，可以进入输入模式</li>\n<li>输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式</li>\n</ul>\n<table>\n<thead>\n<tr class=\"header\">\n<th>模式</th>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>命令模式</td>\n<td>i</td>\n<td>在当前光标位置进入输入模式</td>\n</tr>\n<tr class=\"even\">\n<td>命令模式</td>\n<td>a</td>\n<td>在当前光标位置 之后 进入输入模式</td>\n</tr>\n<tr class=\"odd\">\n<td>命令模式</td>\n<td>I</td>\n<td>在当前行的开头，进入输入模式</td>\n</tr>\n<tr class=\"even\">\n<td>命令模式</td>\n<td>A</td>\n<td>在当前行的结尾，进入输入模式</td>\n</tr>\n<tr class=\"odd\">\n<td>命令模式</td>\n<td>o</td>\n<td>在当前光标下一行进入输入模式</td>\n</tr>\n<tr class=\"even\">\n<td>命令模式</td>\n<td>O</td>\n<td>在当前光标上一行进入输入模式</td>\n</tr>\n<tr class=\"odd\">\n<td>输入模式</td>\n<td>esc</td>\n<td>任何情况下输入esc 都能回到命令模式</td>\n</tr>\n</tbody>\n</table>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2021.17.03.png\"\nalt=\"截屏2023-12-28 21.17.03\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-28 21.17.03</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2022.19.15.png\"\nalt=\"截屏2023-12-28 22.19.15\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-28 22.19.15</figcaption>\n</figure>\n<h3 id=\"linux用户和权限\">3.Linux用户和权限</h3>\n<h4 id=\"linux的root用户\">3.1.Linux的root用户</h4>\n<p><strong>root用户（超级管理员）</strong></p>\n<p>无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理。</p>\n<ul>\n<li>在Linux系统中，拥有最大权限的账户名为：<code>root</code>（超级管理员）</li>\n</ul>\n<p>root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 22.53.06.png\" alt=\"截屏2023-12-28 22.53.06\" style=\"zoom:50%;\" /></p>\n<p>切换root用户</p>\n<p>命令：<code>su - root</code> 本机 root 密码 与 开机密码一致。</p>\n<p>普通用户的权限，一般在其HOME目录内是不受限的，一旦出了\nHOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限。</p>\n<p><strong><code>su</code> 和 <code>exit</code> 命令</strong></p>\n<p>语法：<code>su [-] [用户名]</code></p>\n<ul>\n<li>-符号是可选的，表示是否在切换用户后加载环境变量（后续讲解），建议带上</li>\n<li>参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root</li>\n<li>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl+d</li>\n<li>使用普通用户，切换到其它用户需要输入密码，如切换到root用户</li>\n<li>使用root用户切换到其它用户，无需密码，可以直接切换</li>\n</ul>\n<p><strong><code>sudo</code>命令</strong></p>\n<p>在我们得知root密码的时候，可以通过<code>su</code>\n命令切换到root得到最大权限，但是不建议长期使用root用户，避免带来系统损坏。</p>\n<p>我们可以使用<code>sudo</code>命令，为普通的命令授权，临时以root身份执行。</p>\n<p>语法：<code>sudo 其他命令</code></p>\n<ul>\n<li>在其他命令之前，带上 <code>sudo</code>\n，既可为这一条命令临时赋予root授权</li>\n<li>但是并不是所有用户，都有权利使用 <code>sudo</code>\n，我们需要为普通用户配置<code>sudo</code>认证</li>\n</ul>\n<p><strong>为普通用户配置sudo认证</strong></p>\n<ol type=\"1\">\n<li>切换到root用户，执行<code>visudo</code>命令，会自动通过<code>vi</code>编辑器打开，<code>/etc/sudoers</code></li>\n<li>在文件的最后添加：<img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-28 23.16.24.png\" alt=\"截屏2023-12-28 23.16.24\" style=\"zoom:50%;\" />其中最后的<code>NOPASSWD:ALL</code>\n表示使用<code>sudo</code>命令，无需输入密码</li>\n<li>最后通过 <code>wq</code>保存</li>\n</ol>\n<h4 id=\"用户用户组\">3.2.用户、用户组</h4>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-28%2023.29.43.png\"\nalt=\"截屏2023-12-28 23.29.43\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-28 23.29.43</figcaption>\n</figure>\n<p>Linux中关于权限的管控级别有2个级别，分别是：</p>\n<ul>\n<li>针对用户的权限控制</li>\n<li>针对用户组的权限控制</li>\n</ul>\n<p>比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。所以，我们需要学习在Linux中进行用户、用户组管理的基础命令，为后面学习权限控制打下基础。</p>\n<p><strong>用户组管理</strong></p>\n<p>以下命令需root用户执行</p>\n<ul>\n<li>创建用户组 <code>groupadd 用户组名</code></li>\n<li>删除用户组<code>groupdel 用户组名</code></li>\n</ul>\n<p><strong>用户管理</strong></p>\n<p>以下命令需root用户执行</p>\n<ul>\n<li>创建用户 <code>useradd [-g -d] 用户名</code>\n<ul>\n<li>﻿选项：<code>-g</code>指定用户的组，不指定<code>-g</code>，会创建同名组并自动加入，指定<code>-g</code>需要组己经存在，如己存在同名组，必须使用<code>-g</code></li>\n<li>﻿选项：<code>-d</code>指定用户<code>HOME路径</code>，不指定，<code>HOME</code>目录默认在：<code>/home/用户名</code></li>\n</ul></li>\n<li>删除用户 <code>userdel [-r] 用户名</code>\n<ul>\n<li>选项：<code>-r</code>，删除用户的<code>HOME</code>目录，不使用\n<code>-r</code>，删除用户时，<code>HOME</code>目录保留</li>\n</ul></li>\n<li>查看用户所属组 <code>id [用户名]</code>\n<ul>\n<li>参数：用户名，被查看的用户，如果不提供则查看自身</li>\n</ul></li>\n<li>修改用户所属组<code>usermod -aG 用户组 用户名</code>\n，将指定用户加入指定用户组</li>\n</ul>\n<p><strong><code>getent</code></strong></p>\n<p>使用<code>getent</code> 命令，可以查看当前系统中有哪些用户。</p>\n<p>语法 <code>getent passwd</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2000.20.13.png\"\nalt=\"截屏2023-12-29 00.20.13\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 00.20.13</figcaption>\n</figure>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-29 00.21.25.png\" alt=\"截屏2023-12-29 00.21.25\" style=\"zoom:50%;\" /></p>\n<h4 id=\"查看权限控制信息\">3.3.查看权限控制信息</h4>\n<p><strong>认知权限信息</strong></p>\n<p>通过<code>ls -l</code>可以以列表形式查看内容，并显示权限细节</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-12-29 00.24.17.png\" alt=\"截屏2023-12-29 00.24.17\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>序号1，表示文件、文件夹的权限控制信息</li>\n<li>序号2，表示文件、文件夹所属用户</li>\n<li>序号3，表示文件、文件夹所属用户组</li>\n</ul>\n<p>解析序号1，权限细节，权限细节总共分为10个槽位</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2000.31.57.png\"\nalt=\"截屏2023-12-29 00.31.57\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 00.31.57</figcaption>\n</figure>\n<p><strong>rwx</strong></p>\n<ul>\n<li>r表示读权限</li>\n<li>w表示写权限</li>\n<li>x表示执行权限</li>\n</ul>\n<p>针对文件、文件夹的不同，rwx的含义有细微差别</p>\n<ul>\n<li>r，针对文件可以查看文件内容\n<ul>\n<li>针对文件夹，可以查看文件夹内容，如<code>ls</code>命令</li>\n</ul></li>\n<li>w，针对文件表示可以修改此文件\n<ul>\n<li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li>\n</ul></li>\n<li>x，针对文件表示可以将文件作为程序执行\n<ul>\n<li>针对文件夹，表示可以更改工作目录到此文件夹，即<code>cd</code>进入</li>\n</ul></li>\n</ul>\n<h4 id=\"chmod命令\">3.4.<code>chmod</code>命令</h4>\n<p>我们可以使用<code>chmod</code>命令，修改文件、文件夹的权限信息。</p>\n<p>注意⚠️，只有文件、文件夹的所属用户或root用户可以修改</p>\n<p>语法：<code>chmod [-R] 权限 文件或文件夹</code></p>\n<ul>\n<li>选项：<code>-R</code> ，对文件夹内的全部内容应用同样的操作</li>\n</ul>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.13.16.png\"\nalt=\"截屏2023-12-29 01.13.16\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 01.13.16</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.25.39.png\"\nalt=\"截屏2023-12-29 01.25.39\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 01.25.39</figcaption>\n</figure>\n<p>命令：<code>chmod [-R] *** 文件、文件夹</code></p>\n<h4 id=\"chown-命令\">3.5.<code>chown</code> 命令</h4>\n<p>使用 <code>chown</code>\n命令，可以修改文件、文件夹的所属用户和用户组</p>\n<p>普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</p>\n<p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p>\n<ul>\n<li>选项，<code>-R</code>\n，同<code>chmod</code>，对文件夹内全部内容应用相同规则</li>\n<li>选项，用户，修改所属用户</li>\n<li>选项，用户组，修改所属用户组</li>\n<li><code>:</code> 用于分隔用户和用户组</li>\n</ul>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2001.35.41.png\"\nalt=\"截屏2023-12-29 01.35.41\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 01.35.41</figcaption>\n</figure>\n<h3 id=\"linux操作\">4.Linux操作</h3>\n<h4 id=\"各类小技巧快捷键\">4.1.各类小技巧快捷键</h4>\n<p><code>ctrl+c</code>强制停止</p>\n<ul>\n<li>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键<code>ctrl+c</code></li>\n<li>命令输入错误，也可以通过快捷键<code>ctrl+c</code>，退出当前输入，重新输入</li>\n</ul>\n<p><code>ctrl+d</code>退出或登出</p>\n<ul>\n<li>可以通过快捷键：<code>ctrl+d</code>，退出账户的登录</li>\n<li>或者退出某些特定程序的专属页面</li>\n</ul>\n<p>⚠️：不能用于退出<code>vi/vim</code></p>\n<p><code>history</code>历史命令搜索</p>\n<ul>\n<li>可以通过<code>history</code>命令，查看历史输入过的命令</li>\n<li>可以通过：<code>!</code>命令前缀，自动执行上一次匹配前缀的命令</li>\n<li>可以通过快捷键：<code>ctrl+r</code>，输入内容去匹配历史命令\n<ul>\n<li>如果搜索到的内容是你需要的，那么：\n<ul>\n<li>回车键可以直接执行</li>\n<li>键盘左右键，可以得到此命令（不执行）</li>\n</ul></li>\n</ul></li>\n</ul>\n<p><strong>光标移动快捷键</strong></p>\n<ul>\n<li><code>ctrl+a</code>，跳到命令开头</li>\n<li><code>ctrl+e</code>，跳到命令结尾</li>\n<li><code>ctrl+键盘左键</code> ，向左跳一个单词</li>\n<li><code>ctrl+键盘右键</code>，向右跳一个单词</li>\n</ul>\n<h4 id=\"软件安装\">4.2.软件安装</h4>\n<h5 id=\"yum为centos系统安装软件\">4.2.1.\n<code>yum</code>为CentOS系统安装软件</h5>\n<p>操作系统安装软件有许多方式，一般分为：</p>\n<ul>\n<li>下载安装包自行安装</li>\n<li>系统内应用商店安装</li>\n</ul>\n<p><code>yum命令</code></p>\n<p><code>yum</code>:RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p>\n<p>语法：<code>yum [-y] [install | remove | search] 软件名称</code></p>\n<ul>\n<li>选项：<code>-y</code>，自动确认，无需手动确认安装或卸载过程</li>\n<li><code>install</code>：安装</li>\n<li><code>remove</code>：卸载</li>\n<li><code>search</code>：搜素</li>\n</ul>\n<p><code>yum</code>命令需要root权限，可以<code>su</code>切换到root，或使用<code>sudo</code>提权。<code>yum</code>命令需要联网。</p>\n<h5 id=\"apt为ubuntu安装软件\">4.2.2.<code>apt</code>为Ubuntu安装软件</h5>\n<p>前面学习的各类Linux命令，都是通用的。但是软件安装，CentOs系统和Ubuntu是使用不同的包管理器。centos使用yum管理器，Ubuntu使用apt管理器通过前面学习的WSL环境，我们可以得到Ubuntu运行环境。</p>\n<p>语法：<code>apt [-y] [install | remove | search] 软件名称</code></p>\n<p>用法和<code>yum</code>一致，同样需要root杈限</p>\n<ul>\n<li>﻿﻿<code>apt install wget</code>, 安装wget</li>\n<li>﻿﻿<code>apt remove wget</code>,移除wget</li>\n<li>﻿﻿<code>apt search wget</code>,搜索wget</li>\n</ul>\n<h4\nid=\"systemctl控制软件启动关闭\">4.3.<code>systemctl</code>控制软件启动关闭</h4>\n<p>Linux系统很多软件(内置或第三方）均支持使用systemct命令控制：启动、停止、开机自启。能够被systemctl管理的软件，一般也称之为：服务。</p>\n<p>语法：<code>systemctl start | stop | status | enable | disable 服务名</code></p>\n<ul>\n<li>start 启动</li>\n<li>stop 关闭</li>\n<li>status 查看状态</li>\n<li>enable 开启开机自启</li>\n<li>disable 关闭开机自启</li>\n</ul>\n<p>除了内置的服务外，部分第三方软件安装后，如果它们内部有服务，也可以通过<code>systemctl</code>进行控制。</p>\n<h4 id=\"ln命令创建软链接\">4.4.<code>ln</code>命令创建软链接</h4>\n<p>在系统中创建软链接，可以将文件、文件夹链接到其它位置。</p>\n<p>类似Windows系统中的《快捷方式》</p>\n<p>语法：<code>In -s 参数1 参数2</code></p>\n<ul>\n<li><code>﻿-s</code>选项，创建软连接</li>\n<li><code>﻿参数1</code>：被链接的文件或文件夹</li>\n<li><code>﻿参数2</code>：要链接去的目的地</li>\n</ul>\n<p>实例：</p>\n<ul>\n<li>﻿﻿<code>In -s /etc/yum.conf ~/yum.conf</code></li>\n<li>﻿﻿<code>﻿﻿In -s /etc/yum ~/yum</code></li>\n</ul>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.10.21.png\"\nalt=\"截屏2023-12-29 15.10.21\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 15.10.21</figcaption>\n</figure>\n<h4 id=\"ip地址和主机名\">4.5.IP地址和主机名</h4>\n<p><strong>IP地址</strong></p>\n<p>每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯</p>\n<p>IP地址主要有2个版本，V4版本和V6版本（V5很少用，课程暂不涉及）</p>\n<p>IPV4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</p>\n<p>可以通过命令：<code>ifconfig</code>，\n查看本机的ip地址，如无法使用<code>ifconfig</code>命令，可以安装：<code>yum-y install net-tools</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.23.44.png\"\nalt=\"截屏2023-12-29 15.23.44\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 15.23.44</figcaption>\n</figure>\n<p><strong>特殊IP地址</strong></p>\n<ul>\n<li><code>127.0.0.1</code> ，这个IP地址用于指代本机</li>\n<li><code>0.0.0.0</code>，特殊IP地址\n<ul>\n<li>可以用来指代本机</li>\n<li>可以在端口绑定中用来确定绑定关系</li>\n<li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为<code>0.0.0.0</code>，表示允许任意IP访问。</li>\n</ul></li>\n</ul>\n<p><strong>域名解析</strong></p>\n<p>IP地址实在是难以记忆，有没有什么办法可以通过主机名或替代的字符地址去代替数宇化的IP地址呢？</p>\n<p>实际上，我们一直都是通过宇符化的地址去访问服务器，很少指定IP地址</p>\n<p>比如，我们在浏览器内打开：www.baidu.com，会打开百度的网址</p>\n<p>其中，www.baidu.com，是百度的网址，我们称之为：域名</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2015.50.17.png\"\nalt=\"截屏2023-12-29 15.50.17\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 15.50.17</figcaption>\n</figure>\n<p><strong>固定IP</strong></p>\n<p>当前我们虛拟机的Linux操作系统，其1P地址是通过DHGP服务获取的。</p>\n<p>DHCP：动态获取(P地址，即每汉重启设备后都会获取一次，可能导致1卩地址频繁变更</p>\n<p>原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变化我们就要频繁修改适配很麻</p>\n<p>烦</p>\n<p>原因2：在刚刚我们配置了虚拟机IP地址和主机名的映射，如果1P频繁更改，我们也需要频繁更新映射关系</p>\n<p>综上所述，我们需要1P地址固定下来，不要变化了。</p>\n<h4 id=\"网络请求和下载\">4.6.网络请求和下载</h4>\n<p>可以通过<code>ping</code>命令，检查指定的网络服务器是否是可连通状态</p>\n<p>语法：<code>ping [-c num] ip或主机名</code></p>\n<ul>\n<li>选项：<code>-c</code>，检查的次数，不使用<code>-c</code>选项，将无限次数持续检查</li>\n<li>参数：<code>-ip或主机名</code>\n，被检查的服务器的ip地址或主机名地址</li>\n</ul>\n<p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p>\n<p>语法：<code>wget [-b] url</code></p>\n<ul>\n<li>﻿选项：<code>-b</code>，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li>\n<li>﻿参数：<code>url</code>，下载链接</li>\n</ul>\n<p>示例：</p>\n<ul>\n<li><p>下载apache-hadoop\n3.3.0版本：<code>wget http://archive.apache.org/ dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2016.50.51.png\"\nalt=\"截屏2023-12-29 16.50.51\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 16.50.51</figcaption>\n</figure></li>\n<li><p>在后台下载：<code>wget -b http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></p></li>\n<li><p>通过<code>tail</code>命令可以监控后台下载进度：<code>tail -f wget-log</code></p></li>\n</ul>\n<p><code>curl</code>命令</p>\n<p><code>curl</code>可以发送<code>http</code>网络请求，可用于：下载文件、获取信息等</p>\n<p>语法：<code>curl [-O] url</code></p>\n<ul>\n<li>选项：<code>-O</code>，用于下载文件，当<code>url</code>是下载链接时，可以使用此选项保存文件</li>\n<li>参数：<code>url</code>，要发起请求的网络地址</li>\n</ul>\n<h4 id=\"网络传输\">4.7.网络传输</h4>\n<p>端口</p>\n<p>端口，是设备与外界通讯交流的出入口。端口可以分为：物理端口和虛拟端口两类</p>\n<ul>\n<li>物理端口：叉可称之为接口，是可见的端口，如USB接口，尺J45网口，HDM端口等</li>\n<li>虛拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的</li>\n</ul>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.01.09.png\"\nalt=\"截屏2023-12-29 20.01.09\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 20.01.09</figcaption>\n</figure>\n<p>端口（虚拟）</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.03.36.png\"\nalt=\"截屏2023-12-29 20.03.36\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 20.03.36</figcaption>\n</figure>\n<p>如上图所示，两台计算机可以通过IP地址来进行互相之间的访问，但是，两台计算机之间的服务之间如何进行互相访问？如果只通过IP地址，那么就不太精确，所以我们可以通过虚拟出来的端口来进行访问。</p>\n<p>Linux系统是一个超大号小区，可以支持65535个端口，这6万多个端口分为3类进行使用：</p>\n<ul>\n<li>公认端口：1～1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不要占用这个范围的端口</li>\n<li>注册端口：1024～49151，通常可以随意使用，用于松散的绑定一些程序、服务</li>\n<li>动态端口：49152～65535，通常不会固定绑定程序，二十当程序对外进行网络链接时，用于临时使用</li>\n</ul>\n<p>查看端口占用</p>\n<p>可以通过Linux命令去查看端口的占用情况</p>\n<ul>\n<li>使用<code>nmap</code>命令，安装<code>nmap:yum -y install nmap</code></li>\n</ul>\n<p>语法：<code>nmap 被查看的IP地址</code></p>\n<p>可以通过<code>netstat</code>命令，查看指定端口的占用情况</p>\n<p>语法：<code>netstat -anp|grep 端口号</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2020.31.34.png\"\nalt=\"截屏2023-12-29 20.31.34\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 20.31.34</figcaption>\n</figure>\n<h4 id=\"进程管理\">4.8.进程管理</h4>\n<p>程序运行在操作系统中，是被操作系统所管理的。</p>\n<p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p>\n<p>并会为每一个进程都分配一个独有的：进程1D（进程号）</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2021.51.55.png\"\nalt=\"截屏2023-12-29 21.51.55\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 21.51.55</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.07.06.png\"\nalt=\"截屏2023-12-29 22.07.06\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.07.06</figcaption>\n</figure>\n<p>在Linux中，可以通过<code>kill</code>命令关闭进程。</p>\n<p>语法：<code>kill [-9] 进程ID</code></p>\n<p>选项：<code>-9</code>，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</p>\n<h4 id=\"主机状态监控\">4.9.主机状态监控</h4>\n<p><strong>查看系统资源占用</strong></p>\n<p>可以通过<code>top</code>命令查看CPU、内存使用情况，类似Windows的任务管理器。默认每5秒刷新一次，语法：直接输入<code>top</code>即可。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.24.51.png\"\nalt=\"截屏2023-12-29 22.24.51\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.24.51</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.30.16.png\"\nalt=\"截屏2023-12-29 22.30.16\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.30.16</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.32.06.png\"\nalt=\"截屏2023-12-29 22.32.06\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.32.06</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.37.39.png\"\nalt=\"截屏2023-12-29 22.37.39\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.37.39</figcaption>\n</figure>\n<p>磁盘信息监控</p>\n<p>使用<code>df</code>命令，可以查看磁盘的使用情况</p>\n<p>语法：<code>df [-h]</code></p>\n<p>选项：<code>-h</code> ，以更加人性化的单位显示</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.48.24.png\"\nalt=\"截屏2023-12-29 22.48.24\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.48.24</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.49.59.png\"\nalt=\"截屏2023-12-29 22.49.59\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.49.59</figcaption>\n</figure>\n<p><strong>网络状态监控</strong></p>\n<p>可以使用<code>sar</code>命令查看网络的相关统计（<code>sar</code>命令非常复杂，这里仅简单用于统计网络）</p>\n<p>语法：<code>sar -n DEV nums1 num2</code></p>\n<p>选项：<code>-n</code>，查看网络，<code>DEV</code>表示查看网络接口，<code>num1</code>：刷新间隔（不填就查看一次结束）,<code>num2</code>：查看次数（不填无限次数）</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2023-12-29%2022.55.30.png\"\nalt=\"截屏2023-12-29 22.55.30\" />\n<figcaption aria-hidden=\"true\">截屏2023-12-29 22.55.30</figcaption>\n</figure>\n<h4 id=\"环境变量\">4.10.环境变量</h4>\n<p><strong>环境变量的作用</strong></p>\n<p>在讲解which命令的时候，我们知道使用的一系列命令其实本质上就是一个个的可执行程序。比如，cd命令的本体就是：<code>/usr/bin/cd</code>\n这个程序文件。</p>\n<p>那么为什么，无论当前工作目录在哪里，都能够执行:<code>/usr/bin/cd</code>\n这个程序呢？这就是环境变量的作用。</p>\n<p>环境变量是操作系统(windows、Linux、Mac)在运行的时候，记录的一些关键性信息，用以辅助系统运行。在Linux系统中执行：env命令即可查看当前系统中记录的环境变量环境变量是一种Keyvalue型结构，即名称和值，如下图：</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.03.30.png\"\nalt=\"截屏2024-01-01 14.03.30\" />\n<figcaption aria-hidden=\"true\">截屏2024-01-01 14.03.30</figcaption>\n</figure>\n<p>无论当前工作目录是什么，都能执行<code>/usr/bin/cd</code>这个程序，这个就是借助环境变量中<code>PATH</code>这个项目的值来做到的。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.06.32.png\"\nalt=\"截屏2024-01-01 14.06.32\" />\n<figcaption aria-hidden=\"true\">截屏2024-01-01 14.06.32</figcaption>\n</figure>\n<p><code>PATH</code>记录了系统中执行任何命令的搜索路径，如上图记录了（路径之间以<code>:</code>隔开）：</p>\n<ul>\n<li><code>/usr/local/bin</code></li>\n<li><code>/usr/bin</code></li>\n<li><code>/usr/local/sbin</code></li>\n<li><code>/usr/sbin</code></li>\n<li><code>/home/itheima/.local/bin</code></li>\n<li><code>/home/itheima/bin</code></li>\n</ul>\n<p>当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体。比如要执行<code>cd</code>命令，就从第二个目录<code>/usr/bin</code>中搜索到了<code>cd</code>命令，并执行。</p>\n<p><strong><code>$</code>符号的作用</strong></p>\n<p>在Linux系统中，<code>$</code>符号被用于取\"变量\"的值。环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。取得环境变量的值就可以通过语法：<code>$环境变量名</code>来取得。</p>\n<p>比如：<code>echo $PATH</code></p>\n<p>就可以取得<code>PATH</code>这个环境变量的值，并通过<code>echo</code>语句输出出来。</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.18.49.png\"\nalt=\"截屏2024-01-01 14.18.49\" />\n<figcaption aria-hidden=\"true\">截屏2024-01-01 14.18.49</figcaption>\n</figure>\n<p>又或者：<code>echo $&#123;PATH&#125;ABC</code></p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.19.22.png\"\nalt=\"截屏2024-01-01 14.19.22\" />\n<figcaption aria-hidden=\"true\">截屏2024-01-01 14.19.22</figcaption>\n</figure>\n<p>当和其他内容混合在一起的时候，可以通过<code>&#123;&#125;</code>来标注取的变量是谁。\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2014.26.56.png\"\nalt=\"截屏2024-01-01 14.26.56\" /></p>\n<p><strong>自定义环境变量PATH</strong></p>\n<p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。这些搜索路径我们也可以自行添加到PATH中去。</p>\n<p>测试：</p>\n<ul>\n<li>﻿在当前HOME目录内创建文件夹，myenv，在文件夹内创建文件mkhaha</li>\n<li>﻿通过vim编辑器，在mkhaha文件内填入：echo 哈哈哈哈哈</li>\n</ul>\n<p>完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行</p>\n<p>修改PATH的值</p>\n<p>临时修改PATH:export\nPATH=$PATH：/home/itheima/myenv，再次执行mkhaha，无论在哪里都能执行或格expotPATI=PATH:/om管里面退录的邊氁瑞的瘦缘路径文件中去</p>\n<h4 id=\"linux文件的压缩和解压\">4.11.Linux文件的压缩和解压</h4>\n<p><strong>压缩格式</strong></p>\n<p>市面上有非常多的压缩格式</p>\n<ul>\n<li>zip格式：Linux、Windows、macOS，常用</li>\n<li>7zip：Windows系统常用</li>\n<li>rar：Windows系统常用</li>\n<li>tar：Linux、MacOS常用</li>\n<li>gzip：Linux、MacOS常用</li>\n</ul>\n<p><strong><code>tar</code>命令</strong></p>\n<p>Linux和Mac系统常用有2种压缩格式，后级名分别是：</p>\n<ul>\n<li><code>tar</code>，称之为<code>tarball</code>，归档文件，即简单的将文件组装到一个<code>.tar</code>的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li>\n<li><code>gz</code>,也常见为,<code>.tar.gz</code>,<code>gzip</code>格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积。</li>\n</ul>\n<p>针对这两种格式，使用<code>tar</code>命令均可以进行压缩和解压缩的操作</p>\n<p>语法：<code>tar [-c -v -x -f -z -C〕参数1参数2 ... 参数N</code></p>\n<ul>\n<li><p>﻿<code>-c</code>，创建压缩文件，用于压缩模式</p></li>\n<li><p>﻿<code>﻿-v</code>,显示压缩、解压过程，用于查看进度</p></li>\n<li><p>﻿<code>-x</code>，解压模式</p></li>\n<li><p>﻿<code>-f</code>，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</p></li>\n<li><p>﻿<code>-z,gzip</code>模式，不使用-z就是普通的tarball格式</p></li>\n<li><p>﻿<code>-C</code> 选择解压的目的地，用于解压模式</p></li>\n</ul>\n<p><code>tar命令压缩</code></p>\n<p><code>tar</code>的常用组合为：</p>\n<ul>\n<li><code>tar -cvf test.tar 1 1.txt 2.txt 3.txt</code>\n将<code>1.txt 2.txt 3.txt</code>压缩到<code>test.tar</code>文件内</li>\n<li><code>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</code>将<code>1.txt 2.txt 3.txt</code>压缩到<code>test.tar.gz</code>文件内，使用<code>gzip</code>模式。</li>\n</ul>\n<p>⚠️注意：</p>\n<ul>\n<li><code>-z</code>选项如果使用，一般处于选项的第一位</li>\n<li><code>-f</code>则必须在最后一个</li>\n</ul>\n<p><strong><code>tar</code>解压</strong></p>\n<p>常用的<code>tar</code>解压组合</p>\n<ul>\n<li><code>tar -xvf test.tar</code> 解压<code>test.tar</code>\n，将文件解压至当前目录</li>\n<li><code>tar -xvf test.tar -C /home/itheima</code>\n解压<code>test.tar</code>，将文件解压至指定目录\n(<code>/home/itheima</code>)</li>\n<li><code>tar -zxvf test.tar.gz -C /home/itheima</code>\n以<code>Gzip</code> 模式解压\n<code>test.tar.gz</code>，将文件解压至指定目录内(<code>/home/itheima</code>)</li>\n</ul>\n<p><strong><code>zip</code>命令压缩文件</strong></p>\n<p>可以使用<code>zip</code>命令，压缩文件为<code>zip</code>压缩包</p>\n<p>语法：<code>zip [-r] 参数1 参数2 ... 参数N</code></p>\n<p>•<code>-r</code>，被压缩的包含文件夹的时候，需要使用<code>-r</code>选项，和<code>rm</code>、<code>cp</code>等命令的<code>-r</code>效果一致</p>\n<p>示例：</p>\n<p>• <code>zip test.zip a.txt b.txt c.txt</code></p>\n<p>将<code>a.txt b.txt c.txt</code>压缩到<code>test.zip</code>文件内</p>\n<p>•<code>zip -r test.zip test itheima a.txt</code></p>\n<p>将<code>test、itheima</code>两个文件夹和<code>a.tx</code>t文件，压缩到<code>test.zip</code>文件内</p>\n<figure>\n<img\nsrc=\"/Users/huangqiuzhao/Library/Application%20Support/typora-user-images/截屏2024-01-01%2019.57.45.png\"\nalt=\"截屏2024-01-01 19.57.45\" />\n<figcaption aria-hidden=\"true\">截屏2024-01-01 19.57.45</figcaption>\n</figure>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2023/06/08/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-1/",
            "url": "https://chnhqz.github.io/2023/06/08/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-1/",
            "title": "论文阅读",
            "date_published": "2023-06-08T06:26:00.000Z",
            "content_html": "\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2023/06/07/test/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/",
            "url": "https://chnhqz.github.io/2023/06/07/test/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/",
            "title": "我的第一篇博客文章",
            "date_published": "2023-06-07T10:34:09.000Z",
            "content_html": "<p><strong>YouTube</strong></p>\n<ol type=\"1\">\n<li>morning</li>\n<li>niha</li>\n<li>hell</li>\n</ol>\n<p><span class=\"math display\">\\[a_1\\]</span></p>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2023/06/07/test/hello-world/",
            "url": "https://chnhqz.github.io/2023/06/07/test/hello-world/",
            "title": "Hello World",
            "date_published": "2023-06-07T10:29:13.923Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very\nfirst post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for\nmore info. If you get any problems when using Hexo, you can find the\nanswer in <a\nhref=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or\nyou can ask me on <a\nhref=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<p>hello ### Create a new post</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a\nhref=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int </span><br></pre></td></tr></table></figure>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a\nhref=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a\nhref=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "https://chnhqz.github.io/2023/05/22/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/",
            "url": "https://chnhqz.github.io/2023/05/22/papper/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/",
            "title": "",
            "date_published": "2023-05-22T11:36:53.668Z",
            "content_html": "<h3 id=\"如何读文献\">如何读文献</h3>\n<h4\nid=\"每一篇文献自带了一份通往同一领域相关论文的地图它叫做参考文献\">每一篇文献自带了一份通往同一领域相关论文的地图，它叫做“参考文献”</h4>\n<ul>\n<li>背景介绍部分的参考文献，告诉你这个领域为什么重要，这个研究问题为什么有意义。</li>\n<li>对于研究问题及相关研究部分的参考文献，告诉你之前都有谁做了什么相似/相关的工作</li>\n<li>实验设计、实验方法部分的参考文献，告诉你这种设计/方法最早来自何处</li>\n<li>数据讨论部分的参考文献，告诉你什么样已知的理论研究支持了这些假设和结论</li>\n<li>总结展望部分的参考文献，告诉你最新的综述有哪些、待解決的问题有哪些、最最近的研究有哪些</li>\n<li>实验部分的参考文献，告诉你这些实验操作最原始的出处在哪里</li>\n</ul>\n<h4\nid=\"读完文献至少应该能够回答的四个问题\">读完文献，至少应该能够回答的四个问题</h4>\n<ul>\n<li>这篇文章，到底在解决什么问题？（摘要、前言部分）</li>\n<li>这个问题为什么在这个领域重要？（前言部分）</li>\n<li>这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）</li>\n<li>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</li>\n</ul>\n<p>注意把握核心文献，那些被多次提及以及多次引用的文献。</p>\n<p>还有一点是几乎很多人的读文献视频都没讲过的，但是似乎很多人都知道的事情：</p>\n<p>对于重要的研究性文献，你应该也看看它们的非正文部分，包括注释、脚注、以及supporting</p>\n<p>information（就是包含实验部分的附属文件），因为这些部分往往会包含一些作者不太想告诉你但是又不得不告诉你的关于这篇文章的事实，比如说这篇文章的局限性、缺点、尚且解决不了的一部分问题等等。</p>\n<ul>\n<li>﻿除了读新文献之外，还有一种文献非常值得读，那就是那些可能与你的研究没有非常直接的关联，但叉有一定关联，一定不算做你研究领域“核心文献〞，而且通常发在那些你看不起的“低影响因子小期\n刊〞，通常都是文字很多图很少，你甚至没有听过作者名字的，老文献</li>\n<li>﻿“现在的科研工作者，很多都是挖尸体的人〞 大约等于\n“你不站在巨人的肩膀上，如何能够得着夜空中的明月”。</li>\n<li>﻿提供一个有用的思路：你可以通过一篇文章中引用的一篇老文献找到通讯作者，然后看看这个“你没听过名字的〞教授一辈子学术生涯都做了什么，你往往会有意想不到的收获</li>\n</ul>\n<h3 id=\"文献列表\">文献列表</h3>\n<p>[1]\n吴英杰．隐私保护数据发布：模型与算法[M]．北京：清华大学出版社，2016</p>\n<p>[2] <a\nhref=\"https://www.zhihu.com/search?q=周志华&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D\">周志华</a>．机器学习\n[ M]．北京：清华大学出版社 2016</p>\n<p>[3] 刘俊旭 , <a\nhref=\"https://www.zhihu.com/search?q=孟小峰&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D\">孟小峰</a>\n. 机器学习的隐私保护研究综述 [J]. <a\nhref=\"https://www.zhihu.com/search?q=计算机研究与发展&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D\">计算机研究与发展</a>\n, 2020, 57( 2): 346</p>\n<p>[4] 熊平 , <a\nhref=\"https://www.zhihu.com/search?q=朱天清&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D\">朱天清</a>\n, 王晓峰 . 差分隐私保护及其应用 [J]. <a\nhref=\"https://www.zhihu.com/search?q=计算机学报&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2382359427%7D\">计算机学报</a>\n,2014, 37(1): 101 122</p>\n<h4 id=\"dp-theory\">DP theory</h4>\n<ul>\n<li>Gaussian differential privacy <a\nhref=\"https://arxiv.org/pdf/1905.02383\">[paper]</a> by Jinshuo Dong,\nAaron Roth, Weijie J. Su. 2019</li>\n<li>Average-Case Averages: Private Algorithms for Smooth Sensitivity and\nMean Estimation<a\nhref=\"https://arxiv.org/pdf/1906.02830.pdf\">[paper]</a> by Mark Bun and\nThomas Steinke. 2019</li>\n<li>New Differentially Private Algorithms for Learning Mixtures of\nWell-Separated Gaussians<a\nhref=\"https://arxiv.org/pdf/1909.03951.pdf\">[paper]</a> by Gautam\nKamath, Or Sheffet, Vikrant Singhal, Jonathan Ullman. 2019</li>\n<li>Private Hypothesis Selection <a\nhref=\"https://arxiv.org/pdf/1905.13229.pdf\">[paper]</a> by Mark Bun,\nGautam Kamath, Thomas Steinke,Steven Wu. 2019</li>\n<li>Privacy Amplification by Iteration <a\nhref=\"https://arxiv.org/abs/1808.06651\">[paper]</a> by Vitaly Feldman,\nIlya Mironov, Kunal Talwar, Abhradeep Thakurta. 2018</li>\n<li>pMSE Mechanism: Differentially Private Synthetic Data with Maximal\nDistributional Similarity <a\nhref=\"https://arxiv.org/pdf/1805.09392.pdf\">[paper]</a> by Joshua Snoke\nand Aleksandra Slavkovic. 2018</li>\n<li>Differentially Private Continual Learning <a\nhref=\"https://arxiv.org/pdf/1902.06497.pdf\">[paper]</a> by S.Farquhar\nand Yarin Gal. 2018</li>\n<li>Individual Fairness Under Composition <a\nhref=\"http://www.fatml.org/media/documents/individual_fairness_under_composition.pdf\">[paper]</a>\nby Cynthia Dwork and Christina Ilvento. 2018<br />\n</li>\n<li>Differentially Private Fair Learning <a\nhref=\"https://arxiv.org/abs/1812.02696\">[paper]</a> by Matthew\nJagielski, Michael Kearns, Jieming Mao, Alina Oprea, Aaron Roth, Saeed\nSharifi-Malvajerdi, Jonathan Ullman. 2018<br />\n</li>\n<li>Differentially Private False Discovery Rate Control <a\nhref=\"https://arxiv.org/abs/1807.04209\">[paper]</a> by Cynthia Dwork,\nWeijie J. Su, Li Zhang. 2018<br />\n</li>\n<li>Accuracy First: Selecting a Differential Privacy Level for\nAccuracy-Constrained ERM <a\nhref=\"https://arxiv.org/abs/1705.10829\">[paper]</a> <a\nhref=\"https://github.com/steven7woo/Accuracy-First-Differential-Privacy\">[code]</a>\nby Katrina Ligett, Seth Neel, Aaron Roth, Bo Waggoner, Z. Steven Wu.\n2017<br />\n</li>\n<li>Penalizing Unfairness in Binary Classification <a\nhref=\"https://arxiv.org/abs/1707.00044\">[paper]</a> by Yahav Bechavod,\nKatrina Ligett. 2017<br />\n</li>\n<li>Concentrated Differential Privacy <a\nhref=\"https://arxiv.org/abs/1603.01887\">[paper]</a> by Cynthia Dwork,\nGuy N. Rothblum. 2016<br />\n</li>\n<li>Protecting Privacy when Disclosing Information: k-Anonymity and Its\nEnforcement through Generalization and Suppression <a\nhref=\"https://epic.org/privacy/reidentification/Samarati_Sweeney_paper.pdf\">[paper]</a>\nby Pierangela Samarati and Latanya Sweeney</li>\n</ul>\n<h4 id=\"local-differential-privacy\">Local Differential Privacy</h4>\n<ul>\n<li>Answering multi-dimensional analytical queries under local\ndifferential privacy <a\nhref=\"https://par.nsf.gov/servlets/purl/10194803\">[paper]</a> by Tianhao\nWang, Bolin Ding, Jingren Zhou, Cheng Hong, Zhicong Huang, Ninghui Li,\nSomesh Jha. 2019</li>\n<li>Locally Private Gaussian Estimation <a\nhref=\"https://arxiv.org/abs/1811.08382\">[paper]</a> by Matthew Joseph,\nJanardhan Kulkarni, Jieming Mao, Zhiwei Steven Wu. 2019<br />\n</li>\n<li>Local Differential Privacy for Evolving Data <a\nhref=\"https://arxiv.org/abs/1802.07128\">[paper]</a> by Matthew Joseph,\nAaron Roth, Jonathan Ullman, Bo Waggoner. 2018<br />\n</li>\n<li>Privacy at Scale: Local Differential Privacy in Practice <a\nhref=\"http://dimacs.rutgers.edu/~graham/pubs/papers/ldptutorial.pdf\">[paper]</a>\nby Graham Cormode, Somesh Jha, Tejas kulkarni, Ninghui Li, Divesh\nSrivastava, Tianhao Wang. 2018<br />\n</li>\n<li>Locally Private Gaussian Estimation <a\nhref=\"https://arxiv.org/abs/1811.08382\">[paper]</a> by Matthew Joseph,\nJanardhan Kulkarni, Jieming Mao, Zhiwei Steven Wu. 2018<br />\n</li>\n<li>Locally differentially private protocols for frequency estimation <a\nhref=\"https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-wang-tianhao.pdf\">[paper]</a>\nby Tianhao Wang, Jeremiah Blocki, Ninghui Li, Somesh Jha. 2017</li>\n</ul>\n<h4 id=\"image-privacy\">Image Privacy</h4>\n<ul>\n<li>Learning to Anonymize Faces for Privacy Preserving Action Detection\n<a\nhref=\"https://web.cs.ucdavis.edu/~yjlee/projects/eccv2018-privacy.pdf\">[paper]</a>\nby Zhongzheng Ren, Yong Jae Lee and Michael S.Ryoo. 2019</li>\n<li>Image Privacy Prediction Using Deep Neural Networks <a\nhref=\"https://arxiv.org/pdf/1903.03695.pdf\">[paper]</a> by Ashwini\nTonge, Cornelia Caragea. 2019</li>\n</ul>\n<h4 id=\"adversarial-examples-and-robustness\">Adversarial Examples and\nRobustness</h4>\n<ul>\n<li>A unified view on differential privacy and robustness to adversarial\nexamples <a href=\"https://arxiv.org/abs/1906.07982\">[paper]</a> by\nRafael Pinot, et al. 2019<br />\n</li>\n<li>Certified Robustness to Adversarial Examples with Differential\nPrivacy <a href=\"https://arxiv.org/abs/1802.03471\">[paper]</a> by\nMathias Lecuyer, Vaggelis Atlidakis, Roxana Geambasu, Daniel Hsu, Suman\nJana. 2018</li>\n</ul>\n<h4 id=\"privacy-and-generative-model\">Privacy and Generative Model</h4>\n<ul>\n<li>Generalization in Generative Adversarial Networks:A Novel\nPerspective from Privacy Protection <a\nhref=\"https://arxiv.org/pdf/1908.07882.pdf\">[paper]</a> by Bingzhe Wu\netc. 2019</li>\n<li>DP-CGAN : Differentially Private Synthetic Data and Label Generation\n<a\nhref=\"http://openaccess.thecvf.com/content_CVPRW_2019/papers/CV-COPS/Torkzadehmahani_DP-CGAN_Differentially_Private_Synthetic_Data_and_Label_Generation_CVPRW_2019_paper.pdf\">[paper]</a>\nby Peter Kairouz etc. 2019</li>\n<li>Siamese Generative Adversarial Privatizer for Biometric Data <a\nhref=\"https://arxiv.org/pdf/1804.08757.pdf\">[paper]</a> <a\nhref=\"https://github.com/WUT-ML/privacy\">[code]</a> by WUT and peter\nkairouz. 2018</li>\n<li>Generative Adversarial Models for Learning Private and Fair\nRepresentations(GAPF) <a\nhref=\"https://arxiv.org/abs/1807.05306\">[paper]</a> <a\nhref=\"https://github.com/cabreraalex/private-fair-GAN\">[code]</a> by\nChong Huang, Peter Kairouz, Lalitha Sankar. 2018</li>\n<li>Context-Aware Generative Adversarial Privacy(GAP) <a\nhref=\"https://arxiv.org/abs/1710.09549\">[paper]</a> by Chong Huang,\nPeter Kairouz, Xiao Chen, Lalitha Sankar, Ram Rajagopal. 2017<br />\n</li>\n<li>Differentially Private Generative Adversarial Networks for Time\nSeries, Continuous, and Discrete Open Data <a\nhref=\"https://arxiv.org/abs/1901.02477\">[paper]</a> by Lorenzo Frigerio,\nAnderson Santana de Oliveira, Laurent Gomez, Patrick Duverger.\n2018<br />\n</li>\n<li>Generative Adversarial Nets <a\nhref=\"https://arxiv.org/abs/1406.2661\">[paper]</a> by Ian J. Goodfellow,\nJean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil\nOzair, Aaron Courville, Yoshua Bengio. 2014</li>\n</ul>\n<h4 id=\"privacy-in-federated-learning\">Privacy in Federated\nLearning</h4>\n<ul>\n<li>Beyond Inferring Class Representatives: User-Level Privacy Leakage\nFrom Federated Learning <a\nhref=\"https://arxiv.org/pdf/1812.00535.pdf\">[paper]</a> by Zhibo Wang,\netc. 2019</li>\n<li>Exploiting Unintended Feature Leakage in Collaborative Learning <a\nhref=\"https://arxiv.org/pdf/1805.04049.pdf\">[paper]</a> <a\nhref=\"https://github.com/csong27/property-inference-collaborative-ml\">[code]</a>\nby Vitaly's group. 2019</li>\n<li>How To Backdoor Federated Learning <a\nhref=\"https://arxiv.org/abs/1807.00459\">[paper]</a> <a\nhref=\"https://github.com/ebagdasa/backdoor_federated_learning\">[code]</a>\nby Vitaly's group. 2018</li>\n<li>Deep Models Under the GAN: Information Leakage from Collaborative\nDeep Learning <a href=\"https://arxiv.org/abs/1702.07464\">[paper]</a> by\nBriland Hitaj, Giuseppe Ateniese, Fernando Perez-Cruz. 2017</li>\n</ul>\n<h4 id=\"private-ml\">Private ML</h4>\n<ul>\n<li>Towards practical differentially private convex optimization <a\nhref=\"http://www.omthakkar.com/papers/TPDPCO.pdf\">[paper]</a> by Roger\nIyengar, Joseph P Near, Dawn Song, Om Thakkar, Abhradeep Thakurta, Lun\nWang. 2019</li>\n<li>Bolt-on Differential Privacy for Scalable Stochastic Gradient\nDescent-based Analytics <a\nhref=\"https://dl.acm.org/doi/pdf/10.1145/3035918.3064047\">[paper]</a> by\nXi Wu, Fengan Li, Arun Kumar, Kamalika Chaudhuri, Somesh Jha, Jeffrey F\nNaughton. 2017</li>\n<li>Deep learning with differential privacy <a\nhref=\"https://arxiv.org/pdf/1607.00133.pdf%20\">[paper]</a> by Martin\nAbadi, Andy Chu, Ian Goodfellow, H Brendan McMahan, Ilya Mironov, Kunal\nTalwar, Li Zhang. 2016</li>\n<li>Learning with differential privacy: stability, learnability and the\nsufficiency and necessity of ERM principle <a\nhref=\"https://dl.acm.org/citation.cfm?id=3053465\">[paper]</a> by\nYu-Xiang Wang, Jing Lei, Stephen E.Fienberg. 2016<br />\n</li>\n<li>Privacy-Preserving Deep Learning <a\nhref=\"https://www.cs.cornell.edu/~shmat/shmat_ccs15.pdf\">[paper]</a> by\nReza Shokri and Vitaly Shmatikov.2015<br />\n</li>\n<li>Differential Privacy and Machine Learning: a Survey and Review <a\nhref=\"https://arxiv.org/abs/1412.7584\">[paper]</a> by Zhanglong Ji,\nZachary C. Lipton, Charles Elkan. 2014</li>\n</ul>\n<h4 id=\"privacy-in-mab\">Privacy in MAB</h4>\n<ul>\n<li>Privacy-Preserving Contextual Bandits <a\nhref=\"https://arxiv.org/pdf/1910.05299.pdf\">[paper]</a> by Facebook AI\nResearch. 2019</li>\n<li>Differentially Private Contextual Linear Bandits <a\nhref=\"https://arxiv.org/pdf/1810.00068.pdf\">[paper]</a> by Roshan\nShariff and Or Sheffet. 2018<br />\n</li>\n<li>Achieving Privacy in the Adversarial Multi-Armed Bandit <a\nhref=\"https://arxiv.org/abs/1701.04222\">[paper]</a> by Aristide C. Y.\nTossou, Christos Dimitrakakis. 2017<br />\n</li>\n<li>Differentially Private Policy Evaluation <a\nhref=\"https://arxiv.org/abs/1603.02010\">[paper]</a> by Borja Balle,\nMaziar Gomrokchi, Doina Precup. 2016<br />\n</li>\n<li>Algorithms for Differentially Private Multi-Armed Bandits <a\nhref=\"https://arxiv.org/abs/1511.08681\">[paper]</a> by Aristide Tossou,\nChristos Dimitrakakis. 2015<br />\n</li>\n<li>MAB problems <a\nhref=\"http://web.eecs.umich.edu/faculty/teneketzis/papers/MAB-Survey.pdf\">[paper]</a>\nby Aditya Mahajan and D.teneketzis<br />\n</li>\n<li>(Nearly) Optimal Differentially Private Stochastic Multi-Arm Bandits\n<a href=\"http://auai.org/uai2015/proceedings/papers/58.pdf\">[paper]</a>\nby Nikita Mishra and Abhradeep Thakurta<br />\n</li>\n<li>Taming the Monster: A Fast and Simple Algorithm for Contextual\nBandits <a\nhref=\"http://proceedings.mlr.press/v32/agarwalb14.pdf\">[paper]</a> by\nA.A, D.H, S.K, J.L, L.L, R.E.S</li>\n</ul>\n<h4 id=\"privacy-preserving-encrypted-neural-network\">Privacy-preserving\nEncrypted Neural Network</h4>\n<ul>\n<li>SHE: A Fast and Accurate Deep Neural Network for Encrypted Data <a\nhref=\"https://arxiv.org/abs/1906.00148\">[paper]</a> <a\nhref=\"https://github.com/safednn/SHE\">[code]</a> by Qian Lou, Lei Jiang.\n2019</li>\n<li>2P-DNN : Privacy-Preserving Deep Neural Networks Based on\nHomomorphic Cryptosystem <a\nhref=\"https://arxiv.org/abs/1807.08459\">[paper]</a> <a\nhref=\"https://github.com/zhustrong/pigstrong/tree/master/pigstrong\">[code]</a>\nby Qiang Zhu, Xixiang Lv. 2018</li>\n<li>ABY3 A Mixed Protocol Framework for Machine Learning <a\nhref=\"https://eprint.iacr.org/2018/403.pdf\">[paper]</a> by Payman\nMohassel, Peter Rindal . 2018</li>\n<li>Secureml: A system for scalable privacy-preserving machine learning\n<a\nhref=\"http://web.eecs.umich.edu/~mosharaf/Readings/SecureML.pdf\">[paper]</a>\nby Payman Mohassel, Yupeng Zhang. 2017</li>\n</ul>\n<h4 id=\"differential-privacy-tutorial\">Differential Privacy\nTutorial</h4>\n<ul>\n<li>For dummies <a\nhref=\"https://robertovitillo.com/2016/07/29/differential-privacy-for-dummies/\">[link]</a></li>\n<li>Emory University CS 573 Data Privacy and Security, Fall 2018 <a\nhref=\"http://www.cs.emory.edu/~lxiong/cs573/\">[course website]</a></li>\n<li>KDD 2018 Privacy tutorial <a\nhref=\"https://sites.google.com/view/kdd2018privacytutorial\">[link]</a></li>\n<li>KDD 2018 Privacy at scale: Local Differential Privacy in Practice\n[[link]](</li>\n</ul>\n<h3 id=\"年6月份文献阅读\">2023年6月份文献阅读</h3>\n<h4\nid=\"differential-privacy-protection-on-weighted-graph-in-wireless-networks\">Differential\nprivacy protection on weighted graph in wireless networks</h4>\n<p>无线网络中加权图差分隐私保护</p>\n<p>差分隐私（differential\nprivacy）是一种隐私保护框架，可以在涉及个人数据的情况下，对敏感信息进行保护。差分隐私的基本思想是，对于输入数据中的任何一条记录，其存在或不存在对最终输出结果的影响应该很小。因此，在加噪声时使用随机化技术来保护数据隐私，同时通过引入随机扰动等方法来减少攻击者获取敏感信息的概率。差分隐私已被广泛应用于数据挖掘、机器学习、社交网络和隐私保护等领域。差分隐私是一种隐私保护的概念和技术，旨在对个体的敏感数据进行隐私保护，同时保持对整体数据的有意义的统计分析。差分隐私的核心思想是通过向个体数据添加噪声来保护隐私，确保即使在具有所有其他数据的情况下，个体的隐私仍然得到保护。具体而言，差分隐私通过引入随机性和噪声来模糊个体数据，使得任何单个个体的贡献都无法被准确地确定。这样，即使攻击者具有访问和分析整体数据集的能力，也无法推断出个体的准确信息。通过在计算或数据发布过程中应用差分隐私，可以确保数据的隐私性，防止个人身份的泄露以及敏感信息的暴露。差分隐私的实现方法通常涉及添加噪声、扰动数据或限制查询等技术手段。它可以应用于各种场景，包括数据挖掘、机器学习、统计分析等领域，以保护个人隐私并促进数据共享和研究。同时，差分隐私也涉及一些数学理论和算法，用于量化隐私保护的强度以及在保护和分析之间取得平衡的方法。</p>\n<p>网络图数据包含着大量的用户信息。（如何包含？）</p>\n<p>网络图数据包含着大量的用户信息，主要是因为网络图记录了用户之间的连接和交互关系。这些关系可以包括社交网络中的朋友关系、通信网络中的通话记录、互联网上的浏览历史等。通过分析网络图数据，可以获得用户的社交圈子、兴趣爱好、交流频率、行为模式等信息。例如，通过分析社交网络图，可以了解一个用户的朋友数量、朋友之间的联系强度，甚至可以推断出用户的兴趣爱好和社交影响力。在通信网络中，通过分析通话图可以了解用户之间的通话频率、通话时长、通话时间段等，这些信息可以用于用户行为分析、社交推荐、广告定向等应用。此外，网络图数据还可以包含用户的位置信息、IP地址、设备信息等。这些附加信息可以与网络图中的连接关系结合起来，进一步揭示用户的行为模式、偏好和用户群体特征。因此，网络图数据对于了解用户行为、社交关系和个人特征具有重要意义，同时也带来了隐私保护的挑战，需要采取适当的隐私保护措施来保护用户的个人隐私。</p>\n<p>只是简单的删除或者替换图中的节点ID，这种简单的隐藏节点信息仍然会有隐私泄漏的风险，因为结构数据仍然能够推导出用户的隐私。更多的在加权网络图中，权值也有</p>\n<p>hierarchical random graph：层次随机图（hierarchical random\ngraph）是一种具有层级结构的随机图模型，它可以用于描述复杂系统中的层次结构特征。在这个模型中，每个节点都被划分为不同的层级，并且每个层级中的节点之间存在不同的概率连接。这种模型在网络科学、社会学、生物学等领域有广泛的应用。</p>\n<p>Markov Monte Carlo：马尔可夫蒙特卡罗（Markov Monte\nCarlo，简称MCMC）是一种常用的随机采样方法，它可以用于从复杂的概率分布中采样得到样本。它基于马尔可夫链的性质，通过在状态空间中进行转移来达到采样的目的。MCMC可以应用于很多领域，比如贝叶斯统计、机器学习等。</p>\n<p>k-anonymity\nmethod：k-匿名（k-anonymity）是一种隐私保护方法，它可以在传输数据时保证数据中的每个个体都至少有k个相似的邻居，从而实现个体身份的隐私保护。具体来说，在k-匿名中，通过对原始数据进行通用化、泛化等操作，将具有相同属性值的记录合并为一个组，从而达到隐藏个体身份的目的。该方法在数据挖掘、隐私保护等领域得到了广泛的应用。在使用k-匿名保护方法时，由于需要对数据进行通用化、泛化等处理，因此会存在一定的背景知识假设。如果攻击者能够获取到更多的背景知识，则可能会推断出原始数据中的一些敏感信息。因此，k-匿名方法的相对有效性可能不是非常强，需要针对具体场景采用不同的隐私保护方法。</p>\n<p>本文通过结合边权重值和图结构设计了一种隐私保护算法。</p>\n<p><em>𝜀</em>- differential privacy：𝜀-差分隐私 (epsilon-differential\nprivacy)\n是一种差分隐私的度量方式之一，用于衡量随机化算法的隐私保护强度。表示在相同的输入数据集中，可能输出不同的结果（比如添加了随机噪声），但每个结果的隐私保护程度都保持一致。𝜀-差分隐私是指对于任意两个互相独立的数据集\nS 和 S'，它们只有微小的区别（比如只有一个记录不同），随机化算法保证以 𝜀\n的概率输出的结果具有相似的隐私保护程度。𝜀\n越小则表示隐私保护程度越高，但可能会降低数据实用性和准确性。</p>\n<p>本文主要贡献：</p>\n<ol type=\"1\">\n<li>根据边的频率，在图形生成过程中使用差分隐私的拉普拉斯噪声扰动，并设计合理的图形生成规则。</li>\n<li>在获取扰动图形集之后，设计了边权重保护算法，包括合理的隐私预算分配策略。</li>\n<li>然后，将扰动边权重集成到图形的编码过程中，并挖掘图谱的频繁子图。在挖掘过程中，使用差分隐私的拉普拉斯机制和指数机制来保护图形结构，从而提高数据效用。</li>\n</ol>\n<p><strong>Definition\n2.1</strong>给定一个随机算法𝑀，𝑅𝑎𝑛𝑔𝑒(𝑀)表示算法𝑀的所有可能输出结果的集合。对于任意两个相邻的数据集𝐷和𝐷′以及任意子集𝑆⊆𝑅𝑎𝑛𝑔𝑒(𝑀)，如果满足𝑃𝑟(𝑀(𝐷)∈𝑆)≤𝑃𝑟(𝑀(𝐷′)∈𝑆)×exp(𝜀)，则算法𝑀就满足𝜀-差分隐私。此外，差分隐私有两种常见的机制，拉普拉斯机制和指数机制\n[25]。拉普拉斯机制用于数值隐私保护，而指数机制用于非数值隐私保护。两种机制定义如下。噪声机制的选择决定了查询的准确性。</p>\n<p><strong>Definition 2.2</strong> (<em>Laplace\nMechanism</em>)给定数据集𝐷，函数𝑓∶𝐷<span\nclass=\"math inline\">\\(→r_d\\)</span>\n满足灵敏度，记为△𝑓，那么随机算法𝑀(𝐷)=𝐹(𝐷)+𝐿𝑎𝑝(△𝑓/𝜀)满足𝜀-差分隐私。其中，𝐿𝑎𝑝(△𝑓/𝜀)是随机噪声，是拉普拉斯分布，其比例因子为△𝑓/𝜀。噪声的大小直接与△𝑓成正比，与𝜀成反比。</p>\n<p><strong>Definition 2.3</strong> (<em>Global\nSensitivity</em>)给定函数𝑓∶𝐷→ <span\nclass=\"math inline\">\\(r_d\\)</span>，输入为数据集𝐷，输出为一个𝑑维实数向量。对于任意相邻的数据集𝐷和𝐷′，△𝑓\n= <span\nclass=\"math inline\">\\(max_{D,D&#39;}\\)</span>‖𝑓(𝐷)−𝐹(𝐷′)‖是𝑓的全局灵敏度。其中，𝑅代表映射的实数空间，𝐿1距离表示𝑓(𝐷)和𝑓(𝐷′)之间的距离。</p>\n<p><strong>Definition 2.4</strong> (<em>Exponential Mechanism</em>)</p>\n<p>差分隐私还具有序列组合和并行组合两个属性[10]。序列组合强调隐私预算可以在方法的不同步骤中分配，而并行组合确保算法在其数据集的非重叠子集中满足差分隐私的隐私性。</p>\n<p>在本文中，我们提出了一种隐私保护算法，以保护物联网中的加权图，主要采用差分隐私保护模型来保护边权重和图结构。首先，我们扰乱整个图集并在图生成过程中添加噪声；其次，我们为扰乱的图集设计了边权重保护算法，然后对图进行编码并将扰乱的边权重整合到其中。然后，我们挖掘和保护图集中的频繁图结构，在挖掘过程中使用差分隐私。最后，我们在真实数据集上进行实验证明，我们的方法是可行和有效的。</p>\n<h4\nid=\"a-survey-of-dummy-based-location-privacy-protection-techniques-for-location-based-services\">A\nSurvey of Dummy-Based Location Privacy Protection Techniques for\nLocation-Based Services</h4>\n<p>《基于虚假数据的位置隐私保护技术在基于位置的服务中的调查》是一篇研究论文或文章，提供了对基于位置的服务（LBS）中用于保护位置隐私的各种技术的概述和分析。</p>\n<p>在这项调查中，重点关注基于虚假数据的技术，这些技术涉及生成和利用虚假或伪造的位置信息，以在保护用户隐私的同时允许提供LBS。这些技术旨在防止或减轻可能危及使用LBS应用程序的个人隐私的位置跟踪和推断攻击。</p>\n<p>调查可能涵盖一系列基于虚假数据的技术，例如：</p>\n<ol type=\"1\">\n<li>虚假注入：将伪造或虚假的位置更新与用户的真实位置一起引入，以困惑对手并使其难以准确追踪用户。</li>\n<li>虚假选择：从预定义的集合中选择合适的虚假位置，或基于特定标准选择虚假位置，以确保隐私保护同时保持LBS的效用。</li>\n<li>虚假移动：通过生成逼真的虚假位置更新来模拟用户的移动模式或轨迹，从而混淆用户的实际移动。</li>\n<li>虚假更新策略：确定虚假位置更新的频率、时间和特征，以增强隐私保护并尽量减少对LBS功能的影响。</li>\n</ol>\n<p>调查可能讨论不同基于虚假数据技术的优点、局限性和权衡，考虑隐私保护、LBS的效用、计算开销和通信成本等因素。</p>\n<p>总的来说，这项调查是了解基于虚假数据的位置隐私保护技术在基于位置的服务中的现状的全面资源。它可以提供对这一研究领域的挑战、进展和未来方向的洞察。</p>\n<p>Dummy-based location privacy protection：基于虚假位置的隐私保护</p>\n<p>基于虚假数据的位置隐私保护是一种技术方法，旨在保护个人在使用位置相关服务时的位置隐私。该方法通过引入虚假或伪造的位置信息，使得攻击者难以确定用户的真实位置，从而保护用户的隐私。</p>\n<p>在基于虚假数据的位置隐私保护中，主要的思想是在用户的真实位置信息中添加一些虚假的位置数据，使得攻击者无法准确追踪用户的位置。这些虚假数据可以包括虚假位置坐标、虚假位置更新时间或者虚假移动轨迹。</p>\n<p>使用虚假数据的好处是可以提供一定的隐私保护，同时仍然可以享受位置相关服务的便利性。通过引入虚假数据，用户的真实位置更难以被追踪或推断出来，从而保护用户的隐私。</p>\n<p>虽然基于虚假数据的位置隐私保护可以提供一定程度的隐私保护，但也存在一些限制和挑战。其中一项挑战是如何选择合适的虚假数据以平衡隐私保护和服务的实用性。虚假数据的选择需要考虑用户的行为模式、位置需求以及攻击者的推断能力。另外，虚假数据的生成和管理也需要考虑计算和通信开销等方面的因素。</p>\n<p>因此，基于虚假数据的位置隐私保护是一种重要的技术手段，用于在位置相关服务中保护用户的隐私。它通过引入虚假数据来混淆用户的真实位置，从而提高用户的位置隐私保护水平。</p>\n<p>Level of privacy (LoP):\"Level of\nprivacy\"（隐私水平）指的是个人或组织在其个人信息或数据处理过程中所期望的或实现的隐私保护程度。</p>\n<p>\"Quality of Service\"（服务质量）通常缩写为\nQoS，指的是在计算机网络和通信领域中，用于描述网络或通信系统所提供的服务的质量水平。</p>\n<ul>\n<li><p>这篇文章，到底在解决什么问题？（摘要、前言部分）</p></li>\n<li><p>这个问题为什么在这个领域重要？（前言部分）</p></li>\n<li><p>这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）</p></li>\n<li><p>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</p></li>\n</ul>\n<h4\nid=\"dp-ltod-differential-privacy-latent-trajectory-community-discovering-services-over-location-based-social-networks\">DP-LTOD:\nDifferential Privacy Latent Trajectory Community Discovering Services\nover Location-Based Social Networks</h4>\n<ul>\n<li><p>这篇文章，到底在解决什么问题？（摘要、前言部分）</p>\n<p>这篇论文解决了两个问题：</p>\n<p>1、根据用户的轨迹，将用户分类</p>\n<p>2、设计了一个新的模糊轨迹的方法</p>\n<p>首先，由于大规模无线通信网络的应用，基于位置的社交网络也大规模出现并应用。但是很多应用在使用用户的位置权限时。会存在泄漏用户位置隐私的可能。这些位置信息包含用户的位置轨迹。</p>\n<p>所以本篇文章提出了一种差分隐私潜在轨迹团发现方案（DP-\nLTOD，Differential Privacy Latent Trajectory Community Discovering\n）。通过将原始轨迹序列模糊化为符合差分隐私的轨迹序列来保护轨迹隐私。</p>\n<p>还开发了一种轨迹聚类算法，根据语义距离和地理距离将轨迹分类到不同类型的聚类中。</p></li>\n<li><p>这个问题为什么在这个领域重要？（前言部分）</p>\n<p>1、历史轨迹反应了用户的随时间的位置变化。通过分析收集大量用户的历史轨迹，可以把有相似爱好、兴趣、行为的用户聚类在一起。</p>\n<p>2、轨迹信息可以为许多应用软件提供支持。</p>\n<p>那么问题就来了，有些不被信任的第三方泄漏用户信息来做一些恶意事件。或者攻击者得到数据后分析用户数据做一些恶意事件。</p></li>\n<li><p>这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）</p>\n<p>对于用户轨迹分类问题：</p>\n<p>该论文考虑了两方面：语义分类，地理位置分类。综合这两种方法，可以有效的将用户轨迹分类。</p>\n<p>对于用户轨迹信息的保护，该论文设计了一个挑选模糊位置的方法。这个方法可以挑选出最接近真实位置的模糊位置。之后设计了两种攻击方式。贝叶斯、马尔可夫。并针对这两种攻击分别进行了拉普拉斯噪声、指数噪声的添加。使得之后的扰乱矩阵既能保护隐私又能兼顾数据的使用。</p></li>\n<li><p>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</p></li>\n</ul>\n<p>在本文中，我们研究了在严格的差分隐私模型下的潜在轨迹社区发现问题。首先，我们介绍了考虑用户兴趣和偏好的潜在轨迹社区发现（LTOD）方法。然后，我们探讨了设计差分隐私潜在轨迹社区发现（DP-LTOD）方案的可能性，以确保隐私和数据效用的良好性能。我们发现，在DP-LTOD中，模糊化轨迹序列的特征对于提高LTOD的准确性至关重要。如果我们能够有效地选择最优的模糊化轨迹，可以显著改善效用和隐私的权衡。为此，我们制定了一个轨迹模糊化问题，选择与原始轨迹差异最小的最优轨迹。我们证明了这个问题是NP难问题，并提出了一种启发式的轨迹模糊化算法来解决该问题。在我们的DP-LTOD方案中，另一个核心是在轨迹模糊化阶段添加差分隐私所需的噪声。为了防止贝叶斯攻击和马尔可夫攻击，我们在位置模糊化矩阵生成和轨迹序列函数生成阶段分别添加基于拉普拉斯分布和指数分布的噪声。通过形式化的隐私分析，我们证明了DP-LTOD方案满足\u0015-差分隐私。通过实验证明，我们的DP-LTOD方案能够以高准确性私密地发现潜在轨迹社区。</p>\n<p>对于未来的工作，我们将进一步完善攻击模型，考虑社交连接图或内容文本等因素。将利用深度学习技术训练位置模糊化矩阵，以智能感知用户的实际位置并选择模糊化位置。此外，我们将考虑更多的维度（例如时间或速度等）来发现潜在轨迹社区。将发现的潜在轨迹社区应用于LBSNs中为用户推荐个性化服务将是一个有趣的研究方向。</p>\n<h4\nid=\"privacy-attitudes-and-privacy-behaviour-a-review-of-current-research-on-the-privacy-paradox-phenomenon\">Privacy\nattitudes and privacy behaviour: A review of current research on the\nprivacy paradox phenomenon</h4>\n<p>隐私态度和隐私行为：对隐私悖论现象的当前研究进行综述。综述论文。</p>\n<h3 id=\"june-5-2023week-1\">1.JUNE 5, 2023(WEEK 1)</h3>\n<h4 id=\"decision-tree\">Decision tree</h4>\n<table>\n<colgroup>\n<col style=\"width: 15%\" />\n<col style=\"width: 15%\" />\n<col style=\"width: 1%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 15%\" />\n<col style=\"width: 15%\" />\n<col style=\"width: 15%\" />\n<col style=\"width: 15%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Title</th>\n<th>Publication</th>\n<th>Year</th>\n<th>Authors</th>\n<th>Area</th>\n<th>Problem</th>\n<th>Main Method</th>\n<th>Datasets</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><strong>LSTM-TrajGAN: A Deep Learning Approach to Trajectory Privacy\nProtection</strong></td>\n<td>ACM Subject Classification Security and privacy</td>\n<td>2020</td>\n<td>Jinmen Rao <br />Song Gao</td>\n<td>Deep Learning Trajectory Privacy Protection</td>\n<td>如何生成与原始数据相似度大的伪造轨迹，从而保护原始轨迹隐私并使得原始数据的使用影响降到最小。</td>\n<td>使用一种深度学习模型来训练生成伪造轨迹</td>\n<td>Foursquare weekly trajectory dataset in New York City</td>\n</tr>\n<tr class=\"even\">\n<td><strong>trajGANs: Using generative adversarial networks for\ngeo-privacy protection of trajectory data (Vision paper)</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>Differentially Private Triangle and 4-Cycle Counting in the\nShuffle Model</strong></td>\n<td>CCS</td>\n<td>2022</td>\n<td>Jacob Imola Takao Murakami</td>\n<td><a\nhref=\"https://dl.acm.org/doi/proceedings/10.1145/3548606\">Computer and\nCommunications Security</a></td>\n<td></td>\n<td></td>\n<td>https://github.com/Triangle4CycleShuffle/Triangle4CycleShuffle</td>\n</tr>\n<tr class=\"even\">\n<td><strong>Personalized Differential Privacy Preservation Method for\nTrajectory Based on Regional Density Analysis</strong></td>\n<td>2023 2nd International Conference on Big Data, Information and\nComputer Network (BDICN)</td>\n<td>2023</td>\n<td>Weicheng zhi</td>\n<td>差分隐私 轨迹隐私</td>\n<td>如何平衡虚假轨迹的轨迹隐私保护和轨迹的服务利用率</td>\n<td>通过将轨迹中比较集中的点用一个点来代替，生成一个新的轨迹，之后再对这个点添加噪声</td>\n<td>Geolife<br />T-drive</td>\n</tr>\n</tbody>\n</table>\n<h5\nid=\"lstm-trajgan-a-deep-learning-approach-to-trajectory-privacy-protection\"><strong>LSTM-TrajGAN:\nA Deep Learning Approach to Trajectory Privacy Protection</strong></h5>\n<blockquote>\n<p>这篇论文在解决什么问题？（摘要、前言）</p>\n</blockquote>\n<p>随着位置服务的兴起，如何保护用户的位置、轨迹隐私？</p>\n<blockquote>\n<p>这个问题为什么重要？</p>\n</blockquote>\n<p>现如今通用的方法是从用户轨迹数据中移除一些敏感数据（用户名字、ID）。但是这些数据可能能通过空间、时间、地理位置的语义信息被推断出。而另一种把用户数据整合进地理位置的方法不仅不能保护用户隐私，反而也造成空间分析的低效。因此，为了平衡用户隐私保护和用户数据在应用中的使用，作者提出了<strong>LSTM-\nTrajGAN</strong>模型。</p>\n<blockquote>\n<p>作者是如何解决这个问题？（具体的实验设计、优化部分）</p>\n</blockquote>\n<p><strong>大体思路：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.41.13.png\" alt=\"截屏2023-06-07 22.41.13\" style=\"zoom:50%;\" /></p>\n<p>将轨迹信息（空间、时间、语义信息）编码，之后送入LSTM- TrajGAN\n模型，之后利用伪造轨迹数据进行应用。</p>\n<p><strong>轨迹编码：</strong></p>\n<p>轨迹的编码主要分为location、time、user id 、trajectory id、other\noptional attributes。</p>\n<p>location：标准化经纬度（具体的方法是，得到数据集中所有位置点的质心点，然后所有的位置的经纬度跟这个质心的偏差来作为位置经纬度的标准化）这样的方法可以使得模型更好的学习到两个不同的轨迹点的空间偏差。</p>\n<p>time：使用one-hot encoders 去编码。具体编码为周、小时这两种。</p>\n<p>other optional attributes：编码为10维的二进制向量</p>\n<p>不对用户ID和轨迹ID编码。因为它们仅用于指示点所属的用户和轨迹。</p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.55.30.png\" alt=\"截屏2023-06-07 22.55.30\" style=\"zoom:50%;\" /></p>\n<p><strong>轨迹填充：</strong></p>\n<p>填0</p>\n<p><strong>LSTM-TrajGAN Model:</strong></p>\n<p><img loading=\"lazy\" data-src=\"/Users/huangqiuzhao/Library/Application Support/typora-user-images/截屏2023-06-07 22.57.27.png\" alt=\"截屏2023-06-07 22.57.27\" style=\"zoom:50%;\" /></p>\n<p>主要是两部分，轨迹生成器和轨迹分辨器。在轨迹生成器中，首先是将噪声和经过多层感知机的真实的轨迹数据组合在一起（这里起到添加噪声的作用），然后经过全连接层再经过LSTM，之后经过全连结层和3个softmax生成了伪造轨迹。之后将真实轨迹和伪造数据一起送入轨迹分辨器中，进行分辨。在进行对抗训练中，本文的一大亮点，重新设计了损失函数（<strong>TrajLoss\nfor Measuring Trajectory Similarity Losses</strong>） <span\nclass=\"math display\">\\[\nTrajLoss(y^r,y^p,t^r,t^s)=\\alpha L_{BCE}(y^r,y^p)+\\beta\nL_{s}(t^r,t^s)+\\gamma L_{t}(t^r,t^s)+cL_{c}(t^r,t^s)\n\\]</span> 其中 <span class=\"math inline\">\\(y^r\\)</span> 和 <span\nclass=\"math inline\">\\(y^p\\)</span>\n表示真实的标签和通过分类器预测的结果。 <span\nclass=\"math inline\">\\(t^r\\)</span> 和 <span\nclass=\"math inline\">\\(t^s\\)</span> 则表示真实轨迹和伪造轨迹。</p>\n<blockquote>\n<p>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</p>\n</blockquote>\n<h5\nid=\"personalized-differential-privacy-preservation-method-for-trajectory-based-on-regional-density-analysis\"><strong>Personalized\nDifferential Privacy Preservation Method for Trajectory Based on\nRegional Density Analysis</strong></h5>\n<blockquote>\n<p>将基于区域密度分析的个性化差分隐私保护方法应用于轨迹数据</p>\n</blockquote>\n<ul>\n<li>这篇文章，到底在解决什么问题？（摘要、前言部分）</li>\n</ul>\n<blockquote>\n<p>目前大部分方法都对轨迹中的所有点进行噪声的添加，同时对轨迹中的点分配同样的隐私预算。这样不能对轨迹中的用户的特征进行个性化的轨迹隐私保护。</p>\n</blockquote>\n<ul>\n<li>这个问题为什么在这个领域重要？（前言部分）</li>\n<li>这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）</li>\n</ul>\n<blockquote>\n<p>针对这个问题，提出了一种基于区域密度分析的轨迹保护方法。分析每个用户的停留区域，计算停留点，并根据时间和距离阈值重构轨迹集。使用基于局部密度峰值的最小生成树聚类算法获取用户轨迹的隐私敏感位置点和活动热点区域。根据设计的隐私重要程度表达式，计算每个敏感位置点的隐私得分，并为其分配适当的隐私预算值。</p>\n</blockquote>\n<ul>\n<li>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</li>\n</ul>\n<blockquote>\n<p>主要的亮点在于，使用经纬度和时间，找到了一个密度最高区域。并将其重构，然后根据设计的隐私重要程度表达式，计算每个敏感位置的隐私得分，并为其分配适当的隐私预算值。这其实算是将轨迹中的重要的点找出来（毕竟轨迹中的的点有很多，每一个点其实所包含的信息是不一样的。比如在街道上的一些点和在餐厅的点，它们包含的信息当然不同），为其分配不同的隐私预算值。其实这个的隐私预算值可以视为权重值。含有信息不同的轨迹的点自然需要不同的权重值。然后根据隐私预算为这个重构的轨迹图添加噪声。</p>\n<p>我觉得这个问题的解决还有一个点可以考虑进去，首先作者只是考虑了经纬度、时间。一些点所处位置的语义信息并没有被考虑进去。是否可以将这个语义信息考虑进去？不同的点他们所处的位置可能是咖啡店、书店等等。这个信息其实也有较大的影响。</p>\n</blockquote>\n<p>这篇文章，到底在解决什么问题？（摘要、前言部分）</p>\n<p>这个问题为什么在这个领域重要？（前言部分）</p>\n<p>这些作者是怎么解决这个问题的？（具体的实验设计、优化部分）</p>\n<p>这个问题的解决有什么亮点、局限，有什么应用？（数据分析、应用展示、结论、展望部分）</p>\n",
            "tags": []
        }
    ]
}